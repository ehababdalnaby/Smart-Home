
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000153a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000094  00800060  0000153a  000015ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a0  008000f4  008000f4  00001662  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001662  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f8  00000000  00000000  000016fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004865  00000000  00000000  000019f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001376  00000000  00000000  00006259  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000190f  00000000  00000000  000075cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000074c  00000000  00000000  00008ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a12  00000000  00000000  0000962c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d1b  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000248  00000000  00000000  0000bd59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 1b 05 	jmp	0xa36	; 0xa36 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3f       	cpi	r26, 0xF4	; 244
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a4 ef       	ldi	r26, 0xF4	; 244
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 39       	cpi	r26, 0x94	; 148
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main()
{
	
	
	u8 TV_state=0;
	UART_INIT(9600);
      92:	80 e8       	ldi	r24, 0x80	; 128
      94:	95 e2       	ldi	r25, 0x25	; 37
      96:	0e 94 40 05 	call	0xa80	; 0xa80 <UART_INIT>
	MQTT_Connect("1111");
      9a:	87 e6       	ldi	r24, 0x67	; 103
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 a4 05 	call	0xb48	; 0xb48 <MQTT_Connect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a2:	2f ef       	ldi	r18, 0xFF	; 255
      a4:	8d e3       	ldi	r24, 0x3D	; 61
      a6:	99 e4       	ldi	r25, 0x49	; 73
      a8:	21 50       	subi	r18, 0x01	; 1
      aa:	80 40       	sbci	r24, 0x00	; 0
      ac:	90 40       	sbci	r25, 0x00	; 0
      ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
      b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
      b2:	00 00       	nop
	_delay_ms(3000);
	MQTT_Subscribe("G/TV");
      b4:	8c e6       	ldi	r24, 0x6C	; 108
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	0e 94 08 06 	call	0xc10	; 0xc10 <MQTT_Subscribe>
	Project_Init();
      bc:	0e 94 75 06 	call	0xcea	; 0xcea <Project_Init>
	sei();
      c0:	78 94       	sei
	u8 password[5]={0};
	turnOnFireAlarm();
      c2:	0e 94 70 06 	call	0xce0	; 0xce0 <turnOnFireAlarm>
	while(1)
	{
		//Get_Password(password);
		AnalogSensors();
      c6:	0e 94 05 07 	call	0xe0a	; 0xe0a <AnalogSensors>
      ca:	fd cf       	rjmp	.-6      	; 0xc6 <main+0x34>

000000cc <__vector_1>:
	}
}


ISR(INT0_vect)
{
      cc:	1f 92       	push	r1
      ce:	0f 92       	push	r0
      d0:	0f b6       	in	r0, 0x3f	; 63
      d2:	0f 92       	push	r0
      d4:	11 24       	eor	r1, r1
      d6:	2f 93       	push	r18
      d8:	3f 93       	push	r19
      da:	4f 93       	push	r20
      dc:	5f 93       	push	r21
      de:	6f 93       	push	r22
      e0:	7f 93       	push	r23
      e2:	8f 93       	push	r24
      e4:	9f 93       	push	r25
      e6:	af 93       	push	r26
      e8:	bf 93       	push	r27
      ea:	ef 93       	push	r30
      ec:	ff 93       	push	r31
	ptrINT();
      ee:	e0 91 8e 01 	lds	r30, 0x018E	; 0x80018e <ptrINT>
      f2:	f0 91 8f 01 	lds	r31, 0x018F	; 0x80018f <ptrINT+0x1>
      f6:	09 95       	icall
}
      f8:	ff 91       	pop	r31
      fa:	ef 91       	pop	r30
      fc:	bf 91       	pop	r27
      fe:	af 91       	pop	r26
     100:	9f 91       	pop	r25
     102:	8f 91       	pop	r24
     104:	7f 91       	pop	r23
     106:	6f 91       	pop	r22
     108:	5f 91       	pop	r21
     10a:	4f 91       	pop	r20
     10c:	3f 91       	pop	r19
     10e:	2f 91       	pop	r18
     110:	0f 90       	pop	r0
     112:	0f be       	out	0x3f, r0	; 63
     114:	0f 90       	pop	r0
     116:	1f 90       	pop	r1
     118:	18 95       	reti

0000011a <__vector_13>:

ISR(USART_RXC_vect)
{
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	11 24       	eor	r1, r1
     124:	2f 93       	push	r18
     126:	3f 93       	push	r19
     128:	8f 93       	push	r24
     12a:	9f 93       	push	r25
     12c:	ef 93       	push	r30
     12e:	ff 93       	push	r31
	data=UDR;
     130:	9c b1       	in	r25, 0x0c	; 12
     132:	90 93 f4 00 	sts	0x00F4, r25	; 0x8000f4 <__data_end>
	if (pktRecState == 0 && data == 0x30)
     136:	80 91 f5 00 	lds	r24, 0x00F5	; 0x8000f5 <pktRecState>
     13a:	81 11       	cpse	r24, r1
     13c:	0a c0       	rjmp	.+20     	; 0x152 <__vector_13+0x38>
     13e:	90 33       	cpi	r25, 0x30	; 48
     140:	41 f4       	brne	.+16     	; 0x152 <__vector_13+0x38>
	{
		mqttPktInd = 0;
		mqttPkt[mqttPktInd++] = data;
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <mqttPktInd>
     148:	90 93 f8 00 	sts	0x00F8, r25	; 0x8000f8 <mqttPkt>
		pktRecState = 1; // we received the pub type
     14c:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <pktRecState>
     150:	27 c0       	rjmp	.+78     	; 0x1a0 <__vector_13+0x86>
	}
	else if(pktRecState == 1)
     152:	81 30       	cpi	r24, 0x01	; 1
     154:	79 f4       	brne	.+30     	; 0x174 <__vector_13+0x5a>
	{
		mqttPkt[mqttPktInd++] = data;
     156:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <mqttPktInd>
     15a:	8e 0f       	add	r24, r30
     15c:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <mqttPktInd>
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	e8 50       	subi	r30, 0x08	; 8
     164:	ff 4f       	sbci	r31, 0xFF	; 255
     166:	90 83       	st	Z, r25
		pktRecState = 2;
     168:	82 e0       	ldi	r24, 0x02	; 2
     16a:	80 93 f5 00 	sts	0x00F5, r24	; 0x8000f5 <pktRecState>
		remLen = data;
     16e:	90 93 f6 00 	sts	0x00F6, r25	; 0x8000f6 <remLen>
     172:	16 c0       	rjmp	.+44     	; 0x1a0 <__vector_13+0x86>
	}
	else if(pktRecState == 2)
     174:	82 30       	cpi	r24, 0x02	; 2
     176:	a1 f4       	brne	.+40     	; 0x1a0 <__vector_13+0x86>
	{
		mqttPkt[mqttPktInd++] = data;
     178:	e0 91 f7 00 	lds	r30, 0x00F7	; 0x8000f7 <mqttPktInd>
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	2e 0f       	add	r18, r30
     180:	20 93 f7 00 	sts	0x00F7, r18	; 0x8000f7 <mqttPktInd>
     184:	f0 e0       	ldi	r31, 0x00	; 0
     186:	e8 50       	subi	r30, 0x08	; 8
     188:	ff 4f       	sbci	r31, 0xFF	; 255
     18a:	90 83       	st	Z, r25
		if(mqttPktInd == remLen + 2)
     18c:	30 e0       	ldi	r19, 0x00	; 0
     18e:	80 91 f6 00 	lds	r24, 0x00F6	; 0x8000f6 <remLen>
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	02 96       	adiw	r24, 0x02	; 2
     196:	28 17       	cp	r18, r24
     198:	39 07       	cpc	r19, r25
     19a:	11 f4       	brne	.+4      	; 0x1a0 <__vector_13+0x86>
		{
			pktRecState = 0;
     19c:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <pktRecState>
		}
	}

if(mqttPkt[0] == 0x30)
     1a0:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <mqttPkt>
     1a4:	80 33       	cpi	r24, 0x30	; 48
     1a6:	89 f4       	brne	.+34     	; 0x1ca <__vector_13+0xb0>
{
	if(mqttPkt[remLen + 1] == '1')
     1a8:	e0 91 f6 00 	lds	r30, 0x00F6	; 0x8000f6 <remLen>
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	e7 50       	subi	r30, 0x07	; 7
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	80 81       	ld	r24, Z
     1b4:	81 33       	cpi	r24, 0x31	; 49
     1b6:	21 f4       	brne	.+8      	; 0x1c0 <__vector_13+0xa6>
	{
		SETBit(PORTD,7);
     1b8:	82 b3       	in	r24, 0x12	; 18
     1ba:	80 68       	ori	r24, 0x80	; 128
     1bc:	82 bb       	out	0x12, r24	; 18
     1be:	05 c0       	rjmp	.+10     	; 0x1ca <__vector_13+0xb0>
	}
	else if(mqttPkt[remLen + 1] == '0')
     1c0:	80 33       	cpi	r24, 0x30	; 48
     1c2:	19 f4       	brne	.+6      	; 0x1ca <__vector_13+0xb0>
	{
		CLRBit(PORTD,7);
     1c4:	82 b3       	in	r24, 0x12	; 18
     1c6:	8f 77       	andi	r24, 0x7F	; 127
     1c8:	82 bb       	out	0x12, r24	; 18
	}
	
}
     1ca:	ff 91       	pop	r31
     1cc:	ef 91       	pop	r30
     1ce:	9f 91       	pop	r25
     1d0:	8f 91       	pop	r24
     1d2:	3f 91       	pop	r19
     1d4:	2f 91       	pop	r18
     1d6:	0f 90       	pop	r0
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	0f 90       	pop	r0
     1dc:	1f 90       	pop	r1
     1de:	18 95       	reti

000001e0 <DHT_start>:
 */ 
#include "DHT.h"
#include <string.h>
void DHT_start(void)
{
	pinDirection(DHT_PIN,OUTPUT);		
     1e0:	61 e0       	ldi	r22, 0x01	; 1
     1e2:	82 e1       	ldi	r24, 0x12	; 18
     1e4:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	82 e1       	ldi	r24, 0x12	; 18
     1ec:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     1f0:	8f e3       	ldi	r24, 0x3F	; 63
     1f2:	9c e9       	ldi	r25, 0x9C	; 156
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <DHT_start+0x14>
     1f8:	00 c0       	rjmp	.+0      	; 0x1fa <DHT_start+0x1a>
     1fa:	00 00       	nop
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
     1fc:	61 e0       	ldi	r22, 0x01	; 1
     1fe:	82 e1       	ldi	r24, 0x12	; 18
     200:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     204:	08 95       	ret

00000206 <DHT_read>:
}

u8 DHT_read(void)
{
     206:	cf 93       	push	r28
     208:	df 93       	push	r29
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     20a:	d0 e0       	ldi	r29, 0x00	; 0
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
     20c:	c0 e0       	ldi	r28, 0x00	; 0
	for (i=0;i<8;i++)
     20e:	1b c0       	rjmp	.+54     	; 0x246 <DHT_read+0x40>
	{
		while (readPin(DHT_PIN)==0);
     210:	82 e1       	ldi	r24, 0x12	; 18
     212:	0e 94 b8 04 	call	0x970	; 0x970 <readPin>
     216:	88 23       	and	r24, r24
     218:	d9 f3       	breq	.-10     	; 0x210 <DHT_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     21a:	80 e5       	ldi	r24, 0x50	; 80
     21c:	8a 95       	dec	r24
     21e:	f1 f7       	brne	.-4      	; 0x21c <DHT_read+0x16>
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     220:	82 e1       	ldi	r24, 0x12	; 18
     222:	0e 94 b8 04 	call	0x970	; 0x970 <readPin>
     226:	81 11       	cpse	r24, r1
     228:	02 c0       	rjmp	.+4      	; 0x22e <DHT_read+0x28>
		{
			bitLogic=bitLogic<<1;
     22a:	cc 0f       	add	r28, r28
     22c:	06 c0       	rjmp	.+12     	; 0x23a <DHT_read+0x34>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     22e:	8c 2f       	mov	r24, r28
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	88 0f       	add	r24, r24
     234:	99 1f       	adc	r25, r25
     236:	c8 2f       	mov	r28, r24
     238:	c1 60       	ori	r28, 0x01	; 1
		}
		
		while(readPin(DHT_PIN));
     23a:	82 e1       	ldi	r24, 0x12	; 18
     23c:	0e 94 b8 04 	call	0x970	; 0x970 <readPin>
     240:	81 11       	cpse	r24, r1
     242:	fb cf       	rjmp	.-10     	; 0x23a <DHT_read+0x34>
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     244:	df 5f       	subi	r29, 0xFF	; 255
     246:	d8 30       	cpi	r29, 0x08	; 8
     248:	18 f3       	brcs	.-58     	; 0x210 <DHT_read+0xa>
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
}
     24a:	8c 2f       	mov	r24, r28
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <DHT_Response>:

void DHT_Response(void)
{
	pinDirection(DHT_PIN,INPUT);
     252:	60 e0       	ldi	r22, 0x00	; 0
     254:	82 e1       	ldi	r24, 0x12	; 18
     256:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
	while(readPin(DHT_PIN));
     25a:	82 e1       	ldi	r24, 0x12	; 18
     25c:	0e 94 b8 04 	call	0x970	; 0x970 <readPin>
     260:	81 11       	cpse	r24, r1
     262:	fb cf       	rjmp	.-10     	; 0x25a <DHT_Response+0x8>
	while(!readPin(DHT_PIN));
     264:	82 e1       	ldi	r24, 0x12	; 18
     266:	0e 94 b8 04 	call	0x970	; 0x970 <readPin>
     26a:	88 23       	and	r24, r24
     26c:	d9 f3       	breq	.-10     	; 0x264 <DHT_Response+0x12>
	while(readPin(DHT_PIN));
     26e:	82 e1       	ldi	r24, 0x12	; 18
     270:	0e 94 b8 04 	call	0x970	; 0x970 <readPin>
     274:	81 11       	cpse	r24, r1
     276:	fb cf       	rjmp	.-10     	; 0x26e <DHT_Response+0x1c>
}
     278:	08 95       	ret

0000027a <intTostring>:
	
}


void intTostring(u16 hum_1,u16 temp_1,u8* temp,u8* hum )
{
     27a:	4f 92       	push	r4
     27c:	5f 92       	push	r5
     27e:	6f 92       	push	r6
     280:	7f 92       	push	r7
     282:	8f 92       	push	r8
     284:	9f 92       	push	r9
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	cd b7       	in	r28, 0x3d	; 61
     29c:	de b7       	in	r29, 0x3e	; 62
     29e:	66 97       	sbiw	r28, 0x16	; 22
     2a0:	0f b6       	in	r0, 0x3f	; 63
     2a2:	f8 94       	cli
     2a4:	de bf       	out	0x3e, r29	; 62
     2a6:	0f be       	out	0x3f, r0	; 63
     2a8:	cd bf       	out	0x3d, r28	; 61
     2aa:	3c 01       	movw	r6, r24
     2ac:	5b 01       	movw	r10, r22
     2ae:	4a 01       	movw	r8, r20
     2b0:	42 2e       	mov	r4, r18
     2b2:	53 2e       	mov	r5, r19
	u8 dot[]=".";
     2b4:	8e e2       	ldi	r24, 0x2E	; 46
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	9a 83       	std	Y+2, r25	; 0x02
     2ba:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_2[10]={0},hum_2[10]={0};
     2bc:	8a e0       	ldi	r24, 0x0A	; 10
     2be:	fe 01       	movw	r30, r28
     2c0:	33 96       	adiw	r30, 0x03	; 3
     2c2:	df 01       	movw	r26, r30
     2c4:	98 2f       	mov	r25, r24
     2c6:	1d 92       	st	X+, r1
     2c8:	9a 95       	dec	r25
     2ca:	e9 f7       	brne	.-6      	; 0x2c6 <intTostring+0x4c>
     2cc:	3a 96       	adiw	r30, 0x0a	; 10
     2ce:	df 01       	movw	r26, r30
     2d0:	1d 92       	st	X+, r1
     2d2:	8a 95       	dec	r24
     2d4:	e9 f7       	brne	.-6      	; 0x2d0 <intTostring+0x56>
			if (GETBit(temp_1,15)==1)
     2d6:	77 23       	and	r23, r23
     2d8:	34 f4       	brge	.+12     	; 0x2e6 <intTostring+0x6c>
			{
				CLRBit(temp_1,15);
     2da:	e8 94       	clt
     2dc:	b7 f8       	bld	r11, 7
				temp[0]='-';
     2de:	8d e2       	ldi	r24, 0x2D	; 45
     2e0:	fa 01       	movw	r30, r20
     2e2:	81 93       	st	Z+, r24
     2e4:	4f 01       	movw	r8, r30
				temp++;
			}
			sprintf(temp,"%u",(temp_1)/10);
     2e6:	95 01       	movw	r18, r10
     2e8:	ad ec       	ldi	r26, 0xCD	; 205
     2ea:	bc ec       	ldi	r27, 0xCC	; 204
     2ec:	0e 94 97 07 	call	0xf2e	; 0xf2e <__umulhisi3>
     2f0:	6c 01       	movw	r12, r24
     2f2:	d6 94       	lsr	r13
     2f4:	c7 94       	ror	r12
     2f6:	d6 94       	lsr	r13
     2f8:	c7 94       	ror	r12
     2fa:	d6 94       	lsr	r13
     2fc:	c7 94       	ror	r12
     2fe:	df 92       	push	r13
     300:	cf 92       	push	r12
     302:	01 e7       	ldi	r16, 0x71	; 113
     304:	10 e0       	ldi	r17, 0x00	; 0
     306:	1f 93       	push	r17
     308:	0f 93       	push	r16
     30a:	9f 92       	push	r9
     30c:	8f 92       	push	r8
     30e:	0e 94 b1 07 	call	0xf62	; 0xf62 <sprintf>
			sprintf(hum,"%u",(hum_1)/10);
     312:	93 01       	movw	r18, r6
     314:	ad ec       	ldi	r26, 0xCD	; 205
     316:	bc ec       	ldi	r27, 0xCC	; 204
     318:	0e 94 97 07 	call	0xf2e	; 0xf2e <__umulhisi3>
     31c:	7c 01       	movw	r14, r24
     31e:	f6 94       	lsr	r15
     320:	e7 94       	ror	r14
     322:	f6 94       	lsr	r15
     324:	e7 94       	ror	r14
     326:	f6 94       	lsr	r15
     328:	e7 94       	ror	r14
     32a:	ff 92       	push	r15
     32c:	ef 92       	push	r14
     32e:	1f 93       	push	r17
     330:	0f 93       	push	r16
     332:	5f 92       	push	r5
     334:	4f 92       	push	r4
     336:	0e 94 b1 07 	call	0xf62	; 0xf62 <sprintf>
			
			sprintf(temp_2,"%u",((temp_1)%10));
     33a:	c6 01       	movw	r24, r12
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	cc 0c       	add	r12, r12
     342:	dd 1c       	adc	r13, r13
     344:	cc 0c       	add	r12, r12
     346:	dd 1c       	adc	r13, r13
     348:	cc 0c       	add	r12, r12
     34a:	dd 1c       	adc	r13, r13
     34c:	c8 0e       	add	r12, r24
     34e:	d9 1e       	adc	r13, r25
     350:	ac 18       	sub	r10, r12
     352:	bd 08       	sbc	r11, r13
     354:	bf 92       	push	r11
     356:	af 92       	push	r10
     358:	1f 93       	push	r17
     35a:	0f 93       	push	r16
     35c:	6e 01       	movw	r12, r28
     35e:	f3 e0       	ldi	r31, 0x03	; 3
     360:	cf 0e       	add	r12, r31
     362:	d1 1c       	adc	r13, r1
     364:	df 92       	push	r13
     366:	cf 92       	push	r12
     368:	0e 94 b1 07 	call	0xf62	; 0xf62 <sprintf>
			sprintf(hum_2,"%u",((hum_1)%10));
     36c:	c7 01       	movw	r24, r14
     36e:	88 0f       	add	r24, r24
     370:	99 1f       	adc	r25, r25
     372:	ee 0c       	add	r14, r14
     374:	ff 1c       	adc	r15, r15
     376:	ee 0c       	add	r14, r14
     378:	ff 1c       	adc	r15, r15
     37a:	ee 0c       	add	r14, r14
     37c:	ff 1c       	adc	r15, r15
     37e:	e8 0e       	add	r14, r24
     380:	f9 1e       	adc	r15, r25
     382:	6e 18       	sub	r6, r14
     384:	7f 08       	sbc	r7, r15
     386:	7f 92       	push	r7
     388:	6f 92       	push	r6
     38a:	1f 93       	push	r17
     38c:	0f 93       	push	r16
     38e:	8e 01       	movw	r16, r28
     390:	03 5f       	subi	r16, 0xF3	; 243
     392:	1f 4f       	sbci	r17, 0xFF	; 255
     394:	1f 93       	push	r17
     396:	0f 93       	push	r16
     398:	0e 94 b1 07 	call	0xf62	; 0xf62 <sprintf>
			
			strcat(hum,dot);
     39c:	be 01       	movw	r22, r28
     39e:	6f 5f       	subi	r22, 0xFF	; 255
     3a0:	7f 4f       	sbci	r23, 0xFF	; 255
     3a2:	84 2d       	mov	r24, r4
     3a4:	95 2d       	mov	r25, r5
     3a6:	0e 94 a6 07 	call	0xf4c	; 0xf4c <strcat>
			strcat(temp,dot);
     3aa:	be 01       	movw	r22, r28
     3ac:	6f 5f       	subi	r22, 0xFF	; 255
     3ae:	7f 4f       	sbci	r23, 0xFF	; 255
     3b0:	c4 01       	movw	r24, r8
     3b2:	0e 94 a6 07 	call	0xf4c	; 0xf4c <strcat>
			strcat(hum,hum_2);
     3b6:	b8 01       	movw	r22, r16
     3b8:	84 2d       	mov	r24, r4
     3ba:	95 2d       	mov	r25, r5
     3bc:	0e 94 a6 07 	call	0xf4c	; 0xf4c <strcat>
			strcat(temp,temp_2);
     3c0:	b6 01       	movw	r22, r12
     3c2:	c4 01       	movw	r24, r8
     3c4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <strcat>
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	66 96       	adiw	r28, 0x16	; 22
     3d4:	0f b6       	in	r0, 0x3f	; 63
     3d6:	f8 94       	cli
     3d8:	de bf       	out	0x3e, r29	; 62
     3da:	0f be       	out	0x3f, r0	; 63
     3dc:	cd bf       	out	0x3d, r28	; 61
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	ff 90       	pop	r15
     3e8:	ef 90       	pop	r14
     3ea:	df 90       	pop	r13
     3ec:	cf 90       	pop	r12
     3ee:	bf 90       	pop	r11
     3f0:	af 90       	pop	r10
     3f2:	9f 90       	pop	r9
     3f4:	8f 90       	pop	r8
     3f6:	7f 90       	pop	r7
     3f8:	6f 90       	pop	r6
     3fa:	5f 90       	pop	r5
     3fc:	4f 90       	pop	r4
     3fe:	08 95       	ret

00000400 <DHT_Represent>:
	while(!readPin(DHT_PIN));
	while(readPin(DHT_PIN));
}

BOOL DHT_Represent(u8* hum,u8* temp)
{
     400:	df 92       	push	r13
     402:	ef 92       	push	r14
     404:	ff 92       	push	r15
     406:	0f 93       	push	r16
     408:	1f 93       	push	r17
     40a:	cf 93       	push	r28
     40c:	df 93       	push	r29
     40e:	7c 01       	movw	r14, r24
     410:	8b 01       	movw	r16, r22
	u16 temp_1=0,hum_1=0;
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
	DHT_start();
     412:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <DHT_start>
	DHT_Response();
     416:	0e 94 29 01 	call	0x252	; 0x252 <DHT_Response>
	humidity_I=DHT_read();
     41a:	0e 94 03 01 	call	0x206	; 0x206 <DHT_read>
     41e:	d8 2f       	mov	r29, r24
	humidity_D=DHT_read();
     420:	0e 94 03 01 	call	0x206	; 0x206 <DHT_read>
     424:	d8 2e       	mov	r13, r24
	temp_I=DHT_read();
     426:	0e 94 03 01 	call	0x206	; 0x206 <DHT_read>
     42a:	c8 2f       	mov	r28, r24
	temp_D=DHT_read();
     42c:	0e 94 03 01 	call	0x206	; 0x206 <DHT_read>
	
		hum_1=((humidity_I<<8)|humidity_D);
     430:	ed 2f       	mov	r30, r29
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	fe 2f       	mov	r31, r30
     436:	ee 27       	eor	r30, r30
		temp_1=((temp_I<<8)|temp_D);
     438:	6c 2f       	mov	r22, r28
     43a:	70 e0       	ldi	r23, 0x00	; 0
     43c:	76 2f       	mov	r23, r22
     43e:	66 27       	eor	r22, r22
     440:	68 2b       	or	r22, r24
		
		intTostring(hum_1,temp_1,temp,hum);
     442:	97 01       	movw	r18, r14
     444:	a8 01       	movw	r20, r16
     446:	cf 01       	movw	r24, r30
     448:	8d 29       	or	r24, r13
     44a:	0e 94 3d 01 	call	0x27a	; 0x27a <intTostring>
		return TRUE;
	
}
     44e:	81 e0       	ldi	r24, 0x01	; 1
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	1f 91       	pop	r17
     456:	0f 91       	pop	r16
     458:	ff 90       	pop	r15
     45a:	ef 90       	pop	r14
     45c:	df 90       	pop	r13
     45e:	08 95       	ret

00000460 <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
     460:	41 e0       	ldi	r20, 0x01	; 1
     462:	6f e0       	ldi	r22, 0x0F	; 15
     464:	87 e3       	ldi	r24, 0x37	; 55
     466:	90 e0       	ldi	r25, 0x00	; 0
     468:	0e 94 0c 05 	call	0xa18	; 0xa18 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
     46c:	41 e0       	ldi	r20, 0x01	; 1
     46e:	6f e0       	ldi	r22, 0x0F	; 15
     470:	88 e3       	ldi	r24, 0x38	; 56
     472:	90 e0       	ldi	r25, 0x00	; 0
     474:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
     478:	40 e0       	ldi	r20, 0x00	; 0
     47a:	60 e7       	ldi	r22, 0x70	; 112
     47c:	87 e3       	ldi	r24, 0x37	; 55
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	0e 94 0c 05 	call	0xa18	; 0xa18 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	60 e7       	ldi	r22, 0x70	; 112
     488:	88 e3       	ldi	r24, 0x38	; 56
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
     490:	08 95       	ret

00000492 <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     492:	61 e0       	ldi	r22, 0x01	; 1
     494:	83 e0       	ldi	r24, 0x03	; 3
     496:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     49a:	85 e8       	ldi	r24, 0x85	; 133
     49c:	8a 95       	dec	r24
     49e:	f1 f7       	brne	.-4      	; 0x49c <LCD_latch+0xa>
     4a0:	00 00       	nop
     4a2:	60 e0       	ldi	r22, 0x00	; 0
     4a4:	83 e0       	ldi	r24, 0x03	; 3
     4a6:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     4aa:	85 e8       	ldi	r24, 0x85	; 133
     4ac:	8a 95       	dec	r24
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <LCD_latch+0x1a>
     4b0:	00 00       	nop
     4b2:	08 95       	ret

000004b4 <SendToLCD>:
     4b4:	cf 93       	push	r28
     4b6:	c8 2f       	mov	r28, r24
     4b8:	40 e0       	ldi	r20, 0x00	; 0
     4ba:	60 ef       	ldi	r22, 0xF0	; 240
     4bc:	8b e3       	ldi	r24, 0x3B	; 59
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
     4c4:	6c 2f       	mov	r22, r28
     4c6:	60 7f       	andi	r22, 0xF0	; 240
     4c8:	41 e0       	ldi	r20, 0x01	; 1
     4ca:	8b e3       	ldi	r24, 0x3B	; 59
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
     4d2:	0e 94 49 02 	call	0x492	; 0x492 <LCD_latch>
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	60 ef       	ldi	r22, 0xF0	; 240
     4da:	8b e3       	ldi	r24, 0x3B	; 59
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
     4e2:	80 e1       	ldi	r24, 0x10	; 16
     4e4:	c8 9f       	mul	r28, r24
     4e6:	b0 01       	movw	r22, r0
     4e8:	11 24       	eor	r1, r1
     4ea:	41 e0       	ldi	r20, 0x01	; 1
     4ec:	8b e3       	ldi	r24, 0x3B	; 59
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
     4f4:	0e 94 49 02 	call	0x492	; 0x492 <LCD_latch>
     4f8:	85 e8       	ldi	r24, 0x85	; 133
     4fa:	8a 95       	dec	r24
     4fc:	f1 f7       	brne	.-4      	; 0x4fa <SendToLCD+0x46>
     4fe:	00 00       	nop
     500:	cf 91       	pop	r28
     502:	08 95       	ret

00000504 <LCD_send_cmd>:
     504:	cf 93       	push	r28
     506:	c8 2f       	mov	r28, r24
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	82 e0       	ldi	r24, 0x02	; 2
     50c:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     510:	8c 2f       	mov	r24, r28
     512:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SendToLCD>
     516:	cf 91       	pop	r28
     518:	08 95       	ret

0000051a <LCD_CLEAR>:
     51a:	81 e0       	ldi	r24, 0x01	; 1
     51c:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     520:	8f e9       	ldi	r24, 0x9F	; 159
     522:	9f e0       	ldi	r25, 0x0F	; 15
     524:	01 97       	sbiw	r24, 0x01	; 1
     526:	f1 f7       	brne	.-4      	; 0x524 <LCD_CLEAR+0xa>
     528:	00 c0       	rjmp	.+0      	; 0x52a <LCD_CLEAR+0x10>
     52a:	00 00       	nop
     52c:	08 95       	ret

0000052e <LCD_ret_Home>:
     52e:	82 e0       	ldi	r24, 0x02	; 2
     530:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     534:	8f e9       	ldi	r24, 0x9F	; 159
     536:	9f e0       	ldi	r25, 0x0F	; 15
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	f1 f7       	brne	.-4      	; 0x538 <LCD_ret_Home+0xa>
     53c:	00 c0       	rjmp	.+0      	; 0x53e <LCD_ret_Home+0x10>
     53e:	00 00       	nop
     540:	08 95       	ret

00000542 <LCD_init>:
     542:	41 e0       	ldi	r20, 0x01	; 1
     544:	60 ef       	ldi	r22, 0xF0	; 240
     546:	8a e3       	ldi	r24, 0x3A	; 58
     548:	90 e0       	ldi	r25, 0x00	; 0
     54a:	0e 94 0c 05 	call	0xa18	; 0xa18 <pinsDirection>
     54e:	41 e0       	ldi	r20, 0x01	; 1
     550:	6c e0       	ldi	r22, 0x0C	; 12
     552:	8a e3       	ldi	r24, 0x3A	; 58
     554:	90 e0       	ldi	r25, 0x00	; 0
     556:	0e 94 0c 05 	call	0xa18	; 0xa18 <pinsDirection>
     55a:	2f ef       	ldi	r18, 0xFF	; 255
     55c:	89 ef       	ldi	r24, 0xF9	; 249
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	21 50       	subi	r18, 0x01	; 1
     562:	80 40       	sbci	r24, 0x00	; 0
     564:	90 40       	sbci	r25, 0x00	; 0
     566:	e1 f7       	brne	.-8      	; 0x560 <LCD_init+0x1e>
     568:	00 c0       	rjmp	.+0      	; 0x56a <LCD_init+0x28>
     56a:	00 00       	nop
     56c:	0e 94 97 02 	call	0x52e	; 0x52e <LCD_ret_Home>
     570:	86 e0       	ldi	r24, 0x06	; 6
     572:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     576:	8c e0       	ldi	r24, 0x0C	; 12
     578:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     57c:	80 e1       	ldi	r24, 0x10	; 16
     57e:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     582:	88 e2       	ldi	r24, 0x28	; 40
     584:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     588:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_CLEAR>
     58c:	08 95       	ret

0000058e <LCD_send_data>:
     58e:	cf 93       	push	r28
     590:	c8 2f       	mov	r28, r24
     592:	61 e0       	ldi	r22, 0x01	; 1
     594:	82 e0       	ldi	r24, 0x02	; 2
     596:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     59a:	8c 2f       	mov	r24, r28
     59c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <SendToLCD>
     5a0:	cf 91       	pop	r28
     5a2:	08 95       	ret

000005a4 <disp_char>:
     5a4:	0e 94 c7 02 	call	0x58e	; 0x58e <LCD_send_data>
     5a8:	08 95       	ret

000005aa <disp_str>:
     5aa:	0f 93       	push	r16
     5ac:	1f 93       	push	r17
     5ae:	cf 93       	push	r28
     5b0:	8c 01       	movw	r16, r24
     5b2:	c0 e0       	ldi	r28, 0x00	; 0
     5b4:	03 c0       	rjmp	.+6      	; 0x5bc <disp_str+0x12>
     5b6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <disp_char>
     5ba:	cf 5f       	subi	r28, 0xFF	; 255
     5bc:	f8 01       	movw	r30, r16
     5be:	ec 0f       	add	r30, r28
     5c0:	f1 1d       	adc	r31, r1
     5c2:	80 81       	ld	r24, Z
     5c4:	81 11       	cpse	r24, r1
     5c6:	f7 cf       	rjmp	.-18     	; 0x5b6 <disp_str+0xc>
     5c8:	cf 91       	pop	r28
     5ca:	1f 91       	pop	r17
     5cc:	0f 91       	pop	r16
     5ce:	08 95       	ret

000005d0 <LCD_GOTXY>:
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	29 f4       	brne	.+10     	; 0x5de <LCD_GOTXY+0xe>
     5d4:	8f e7       	ldi	r24, 0x7F	; 127
     5d6:	86 0f       	add	r24, r22
     5d8:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     5dc:	08 95       	ret
     5de:	82 30       	cpi	r24, 0x02	; 2
     5e0:	29 f4       	brne	.+10     	; 0x5ec <LCD_GOTXY+0x1c>
     5e2:	8f eb       	ldi	r24, 0xBF	; 191
     5e4:	86 0f       	add	r24, r22
     5e6:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     5ea:	08 95       	ret
     5ec:	83 30       	cpi	r24, 0x03	; 3
     5ee:	29 f4       	brne	.+10     	; 0x5fa <LCD_GOTXY+0x2a>
     5f0:	8f e8       	ldi	r24, 0x8F	; 143
     5f2:	86 0f       	add	r24, r22
     5f4:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     5f8:	08 95       	ret
     5fa:	84 30       	cpi	r24, 0x04	; 4
     5fc:	21 f4       	brne	.+8      	; 0x606 <LCD_GOTXY+0x36>
     5fe:	8f ec       	ldi	r24, 0xCF	; 207
     600:	86 0f       	add	r24, r22
     602:	0e 94 82 02 	call	0x504	; 0x504 <LCD_send_cmd>
     606:	08 95       	ret

00000608 <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     60e:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <LCD_GOTXY>
	disp_str(str);
     612:	ce 01       	movw	r24, r28
     614:	0e 94 d5 02 	call	0x5aa	; 0x5aa <disp_str>
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <disp_int>:


void disp_int(u32 intvalue)
{
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	2b 97       	sbiw	r28, 0x0b	; 11
     62c:	0f b6       	in	r0, 0x3f	; 63
     62e:	f8 94       	cli
     630:	de bf       	out	0x3e, r29	; 62
     632:	0f be       	out	0x3f, r0	; 63
     634:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     636:	8e 01       	movw	r16, r28
     638:	0f 5f       	subi	r16, 0xFF	; 255
     63a:	1f 4f       	sbci	r17, 0xFF	; 255
     63c:	2b e0       	ldi	r18, 0x0B	; 11
     63e:	f8 01       	movw	r30, r16
     640:	11 92       	st	Z+, r1
     642:	2a 95       	dec	r18
     644:	e9 f7       	brne	.-6      	; 0x640 <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	7f 93       	push	r23
     64c:	6f 93       	push	r22
     64e:	81 e7       	ldi	r24, 0x71	; 113
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	1f 93       	push	r17
     658:	0f 93       	push	r16
     65a:	0e 94 b1 07 	call	0xf62	; 0xf62 <sprintf>
		disp_str(string);
     65e:	c8 01       	movw	r24, r16
     660:	0e 94 d5 02 	call	0x5aa	; 0x5aa <disp_str>
}
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	f8 94       	cli
     668:	de bf       	out	0x3e, r29	; 62
     66a:	0f be       	out	0x3f, r0	; 63
     66c:	cd bf       	out	0x3d, r28	; 61
     66e:	2b 96       	adiw	r28, 0x0b	; 11
     670:	0f b6       	in	r0, 0x3f	; 63
     672:	f8 94       	cli
     674:	de bf       	out	0x3e, r29	; 62
     676:	0f be       	out	0x3f, r0	; 63
     678:	cd bf       	out	0x3d, r28	; 61
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	08 95       	ret

00000684 <Callback>:


void (*ptrINT)(void)=0;
void Callback(void (*ptr)(void))
{
	ptrINT=ptr;
     684:	90 93 8f 01 	sts	0x018F, r25	; 0x80018f <ptrINT+0x1>
     688:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <ptrINT>
     68c:	08 95       	ret

0000068e <INT_init>:


void INT_init(u8 int_num , u8 sense_control)
{
	//GICR|=(1<<int_num);
	switch(int_num)
     68e:	86 30       	cpi	r24, 0x06	; 6
     690:	a1 f0       	breq	.+40     	; 0x6ba <INT_init+0x2c>
     692:	87 30       	cpi	r24, 0x07	; 7
     694:	e1 f0       	breq	.+56     	; 0x6ce <INT_init+0x40>
     696:	85 30       	cpi	r24, 0x05	; 5
     698:	11 f5       	brne	.+68     	; 0x6de <INT_init+0x50>
	{
		case INT_2:
		MCUCSR|=((sense_control & 0x01)<<6);
     69a:	84 b7       	in	r24, 0x34	; 52
     69c:	26 2f       	mov	r18, r22
     69e:	21 70       	andi	r18, 0x01	; 1
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	00 24       	eor	r0, r0
     6a4:	36 95       	lsr	r19
     6a6:	27 95       	ror	r18
     6a8:	07 94       	ror	r0
     6aa:	36 95       	lsr	r19
     6ac:	27 95       	ror	r18
     6ae:	07 94       	ror	r0
     6b0:	32 2f       	mov	r19, r18
     6b2:	20 2d       	mov	r18, r0
     6b4:	28 2b       	or	r18, r24
     6b6:	24 bf       	out	0x34, r18	; 52
		break;
     6b8:	08 95       	ret
		
		case INT_0:
		CLRBits(MCUCR,INT0_ISC_MSK);
     6ba:	85 b7       	in	r24, 0x35	; 53
     6bc:	8c 7f       	andi	r24, 0xFC	; 252
     6be:	85 bf       	out	0x35, r24	; 53
		SETBits(MCUCR,sense_control<<INT0_ISC_POS);
     6c0:	85 b7       	in	r24, 0x35	; 53
     6c2:	68 2b       	or	r22, r24
     6c4:	65 bf       	out	0x35, r22	; 53
		SETBit(GICR,INT_0);
     6c6:	8b b7       	in	r24, 0x3b	; 59
     6c8:	80 64       	ori	r24, 0x40	; 64
     6ca:	8b bf       	out	0x3b, r24	; 59
		break;
     6cc:	08 95       	ret
		case INT_1:
		MCUCR|=(sense_control<<2);
     6ce:	85 b7       	in	r24, 0x35	; 53
     6d0:	70 e0       	ldi	r23, 0x00	; 0
     6d2:	66 0f       	add	r22, r22
     6d4:	77 1f       	adc	r23, r23
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	68 2b       	or	r22, r24
     6dc:	65 bf       	out	0x35, r22	; 53
     6de:	08 95       	ret

000006e0 <GLOBAL_INT_EN>:
	}
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
     6e0:	41 e0       	ldi	r20, 0x01	; 1
     6e2:	60 e8       	ldi	r22, 0x80	; 128
     6e4:	8f e5       	ldi	r24, 0x5F	; 95
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 fd 04 	call	0x9fa	; 0x9fa <writePins>
     6ec:	08 95       	ret

000006ee <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
     6ee:	87 b1       	in	r24, 0x07	; 7
     6f0:	80 64       	ori	r24, 0x40	; 64
     6f2:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
     6f4:	86 b1       	in	r24, 0x06	; 6
     6f6:	87 68       	ori	r24, 0x87	; 135
     6f8:	86 b9       	out	0x06, r24	; 6
     6fa:	08 95       	ret

000006fc <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
     6fc:	97 b1       	in	r25, 0x07	; 7
     6fe:	90 7e       	andi	r25, 0xE0	; 224
     700:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
     702:	97 b1       	in	r25, 0x07	; 7
     704:	89 2b       	or	r24, r25
     706:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
     708:	86 b1       	in	r24, 0x06	; 6
     70a:	80 64       	ori	r24, 0x40	; 64
     70c:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
     70e:	36 99       	sbic	0x06, 6	; 6
     710:	fe cf       	rjmp	.-4      	; 0x70e <read_analog+0x12>
	return (ADC);		
     712:	84 b1       	in	r24, 0x04	; 4
     714:	95 b1       	in	r25, 0x05	; 5
}
     716:	08 95       	ret

00000718 <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
     718:	88 30       	cpi	r24, 0x08	; 8
     71a:	f8 f4       	brcc	.+62     	; 0x75a <writePin+0x42>
		if(logic==HIGH)
     71c:	61 30       	cpi	r22, 0x01	; 1
     71e:	69 f4       	brne	.+26     	; 0x73a <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
     720:	4b b3       	in	r20, 0x1b	; 27
     722:	21 e0       	ldi	r18, 0x01	; 1
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	b9 01       	movw	r22, r18
     728:	02 c0       	rjmp	.+4      	; 0x72e <writePin+0x16>
     72a:	66 0f       	add	r22, r22
     72c:	77 1f       	adc	r23, r23
     72e:	8a 95       	dec	r24
     730:	e2 f7       	brpl	.-8      	; 0x72a <writePin+0x12>
     732:	cb 01       	movw	r24, r22
     734:	84 2b       	or	r24, r20
     736:	8b bb       	out	0x1b, r24	; 27
     738:	08 95       	ret
		else if(logic==LOW)
     73a:	61 11       	cpse	r22, r1
     73c:	82 c0       	rjmp	.+260    	; 0x842 <writePin+0x12a>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
     73e:	4b b3       	in	r20, 0x1b	; 27
     740:	21 e0       	ldi	r18, 0x01	; 1
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	b9 01       	movw	r22, r18
     746:	02 c0       	rjmp	.+4      	; 0x74c <writePin+0x34>
     748:	66 0f       	add	r22, r22
     74a:	77 1f       	adc	r23, r23
     74c:	8a 95       	dec	r24
     74e:	e2 f7       	brpl	.-8      	; 0x748 <writePin+0x30>
     750:	cb 01       	movw	r24, r22
     752:	80 95       	com	r24
     754:	84 23       	and	r24, r20
     756:	8b bb       	out	0x1b, r24	; 27
     758:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
     75a:	98 ef       	ldi	r25, 0xF8	; 248
     75c:	98 0f       	add	r25, r24
     75e:	98 30       	cpi	r25, 0x08	; 8
     760:	18 f5       	brcc	.+70     	; 0x7a8 <writePin+0x90>
		if(logic==HIGH)
     762:	61 30       	cpi	r22, 0x01	; 1
     764:	79 f4       	brne	.+30     	; 0x784 <writePin+0x6c>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
     766:	48 b3       	in	r20, 0x18	; 24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	08 97       	sbiw	r24, 0x08	; 8
     76c:	21 e0       	ldi	r18, 0x01	; 1
     76e:	30 e0       	ldi	r19, 0x00	; 0
     770:	b9 01       	movw	r22, r18
     772:	02 c0       	rjmp	.+4      	; 0x778 <writePin+0x60>
     774:	66 0f       	add	r22, r22
     776:	77 1f       	adc	r23, r23
     778:	8a 95       	dec	r24
     77a:	e2 f7       	brpl	.-8      	; 0x774 <writePin+0x5c>
     77c:	cb 01       	movw	r24, r22
     77e:	84 2b       	or	r24, r20
     780:	88 bb       	out	0x18, r24	; 24
     782:	08 95       	ret
		else if(logic==LOW)
     784:	61 11       	cpse	r22, r1
     786:	5d c0       	rjmp	.+186    	; 0x842 <writePin+0x12a>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
     788:	48 b3       	in	r20, 0x18	; 24
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	08 97       	sbiw	r24, 0x08	; 8
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	b9 01       	movw	r22, r18
     794:	02 c0       	rjmp	.+4      	; 0x79a <writePin+0x82>
     796:	66 0f       	add	r22, r22
     798:	77 1f       	adc	r23, r23
     79a:	8a 95       	dec	r24
     79c:	e2 f7       	brpl	.-8      	; 0x796 <writePin+0x7e>
     79e:	cb 01       	movw	r24, r22
     7a0:	80 95       	com	r24
     7a2:	84 23       	and	r24, r20
     7a4:	88 bb       	out	0x18, r24	; 24
     7a6:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
     7a8:	90 ef       	ldi	r25, 0xF0	; 240
     7aa:	98 0f       	add	r25, r24
     7ac:	98 30       	cpi	r25, 0x08	; 8
     7ae:	18 f5       	brcc	.+70     	; 0x7f6 <writePin+0xde>
		if(logic==HIGH)
     7b0:	61 30       	cpi	r22, 0x01	; 1
     7b2:	79 f4       	brne	.+30     	; 0x7d2 <writePin+0xba>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
     7b4:	45 b3       	in	r20, 0x15	; 21
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	40 97       	sbiw	r24, 0x10	; 16
     7ba:	21 e0       	ldi	r18, 0x01	; 1
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	b9 01       	movw	r22, r18
     7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <writePin+0xae>
     7c2:	66 0f       	add	r22, r22
     7c4:	77 1f       	adc	r23, r23
     7c6:	8a 95       	dec	r24
     7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <writePin+0xaa>
     7ca:	cb 01       	movw	r24, r22
     7cc:	84 2b       	or	r24, r20
     7ce:	85 bb       	out	0x15, r24	; 21
     7d0:	08 95       	ret
		else if(logic==LOW)
     7d2:	61 11       	cpse	r22, r1
     7d4:	36 c0       	rjmp	.+108    	; 0x842 <writePin+0x12a>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
     7d6:	45 b3       	in	r20, 0x15	; 21
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	40 97       	sbiw	r24, 0x10	; 16
     7dc:	21 e0       	ldi	r18, 0x01	; 1
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	b9 01       	movw	r22, r18
     7e2:	02 c0       	rjmp	.+4      	; 0x7e8 <writePin+0xd0>
     7e4:	66 0f       	add	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	8a 95       	dec	r24
     7ea:	e2 f7       	brpl	.-8      	; 0x7e4 <writePin+0xcc>
     7ec:	cb 01       	movw	r24, r22
     7ee:	80 95       	com	r24
     7f0:	84 23       	and	r24, r20
     7f2:	85 bb       	out	0x15, r24	; 21
     7f4:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
     7f6:	98 ee       	ldi	r25, 0xE8	; 232
     7f8:	98 0f       	add	r25, r24
     7fa:	98 30       	cpi	r25, 0x08	; 8
     7fc:	10 f5       	brcc	.+68     	; 0x842 <writePin+0x12a>
		if(logic==HIGH)
     7fe:	61 30       	cpi	r22, 0x01	; 1
     800:	79 f4       	brne	.+30     	; 0x820 <writePin+0x108>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
     802:	42 b3       	in	r20, 0x12	; 18
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	48 97       	sbiw	r24, 0x18	; 24
     808:	21 e0       	ldi	r18, 0x01	; 1
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	b9 01       	movw	r22, r18
     80e:	02 c0       	rjmp	.+4      	; 0x814 <writePin+0xfc>
     810:	66 0f       	add	r22, r22
     812:	77 1f       	adc	r23, r23
     814:	8a 95       	dec	r24
     816:	e2 f7       	brpl	.-8      	; 0x810 <writePin+0xf8>
     818:	cb 01       	movw	r24, r22
     81a:	84 2b       	or	r24, r20
     81c:	82 bb       	out	0x12, r24	; 18
     81e:	08 95       	ret
		else if(logic==LOW)
     820:	61 11       	cpse	r22, r1
     822:	0f c0       	rjmp	.+30     	; 0x842 <writePin+0x12a>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
     824:	42 b3       	in	r20, 0x12	; 18
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	48 97       	sbiw	r24, 0x18	; 24
     82a:	21 e0       	ldi	r18, 0x01	; 1
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	b9 01       	movw	r22, r18
     830:	02 c0       	rjmp	.+4      	; 0x836 <writePin+0x11e>
     832:	66 0f       	add	r22, r22
     834:	77 1f       	adc	r23, r23
     836:	8a 95       	dec	r24
     838:	e2 f7       	brpl	.-8      	; 0x832 <writePin+0x11a>
     83a:	cb 01       	movw	r24, r22
     83c:	80 95       	com	r24
     83e:	84 23       	and	r24, r20
     840:	82 bb       	out	0x12, r24	; 18
     842:	08 95       	ret

00000844 <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
     844:	88 30       	cpi	r24, 0x08	; 8
     846:	f8 f4       	brcc	.+62     	; 0x886 <__stack+0x27>
		if(direction == OUTPUT)
     848:	61 30       	cpi	r22, 0x01	; 1
     84a:	69 f4       	brne	.+26     	; 0x866 <__stack+0x7>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
     84c:	4a b3       	in	r20, 0x1a	; 26
     84e:	21 e0       	ldi	r18, 0x01	; 1
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	b9 01       	movw	r22, r18
     854:	02 c0       	rjmp	.+4      	; 0x85a <pinDirection+0x16>
     856:	66 0f       	add	r22, r22
     858:	77 1f       	adc	r23, r23
     85a:	8a 95       	dec	r24
     85c:	e2 f7       	brpl	.-8      	; 0x856 <pinDirection+0x12>
     85e:	cb 01       	movw	r24, r22
     860:	84 2b       	or	r24, r20
     862:	8a bb       	out	0x1a, r24	; 26
     864:	08 95       	ret
		else if(direction == INPUT)
     866:	61 11       	cpse	r22, r1
     868:	82 c0       	rjmp	.+260    	; 0x96e <__stack+0x10f>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
     86a:	4a b3       	in	r20, 0x1a	; 26
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	b9 01       	movw	r22, r18
     872:	02 c0       	rjmp	.+4      	; 0x878 <__stack+0x19>
     874:	66 0f       	add	r22, r22
     876:	77 1f       	adc	r23, r23
     878:	8a 95       	dec	r24
     87a:	e2 f7       	brpl	.-8      	; 0x874 <__stack+0x15>
     87c:	cb 01       	movw	r24, r22
     87e:	80 95       	com	r24
     880:	84 23       	and	r24, r20
     882:	8a bb       	out	0x1a, r24	; 26
     884:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
     886:	98 ef       	ldi	r25, 0xF8	; 248
     888:	98 0f       	add	r25, r24
     88a:	98 30       	cpi	r25, 0x08	; 8
     88c:	18 f5       	brcc	.+70     	; 0x8d4 <__stack+0x75>
		if(direction == OUTPUT)
     88e:	61 30       	cpi	r22, 0x01	; 1
     890:	79 f4       	brne	.+30     	; 0x8b0 <__stack+0x51>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
     892:	47 b3       	in	r20, 0x17	; 23
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	08 97       	sbiw	r24, 0x08	; 8
     898:	21 e0       	ldi	r18, 0x01	; 1
     89a:	30 e0       	ldi	r19, 0x00	; 0
     89c:	b9 01       	movw	r22, r18
     89e:	02 c0       	rjmp	.+4      	; 0x8a4 <__stack+0x45>
     8a0:	66 0f       	add	r22, r22
     8a2:	77 1f       	adc	r23, r23
     8a4:	8a 95       	dec	r24
     8a6:	e2 f7       	brpl	.-8      	; 0x8a0 <__stack+0x41>
     8a8:	cb 01       	movw	r24, r22
     8aa:	84 2b       	or	r24, r20
     8ac:	87 bb       	out	0x17, r24	; 23
     8ae:	08 95       	ret
		else if(direction == LOW)
     8b0:	61 11       	cpse	r22, r1
     8b2:	5d c0       	rjmp	.+186    	; 0x96e <__stack+0x10f>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
     8b4:	47 b3       	in	r20, 0x17	; 23
     8b6:	90 e0       	ldi	r25, 0x00	; 0
     8b8:	08 97       	sbiw	r24, 0x08	; 8
     8ba:	21 e0       	ldi	r18, 0x01	; 1
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	b9 01       	movw	r22, r18
     8c0:	02 c0       	rjmp	.+4      	; 0x8c6 <__stack+0x67>
     8c2:	66 0f       	add	r22, r22
     8c4:	77 1f       	adc	r23, r23
     8c6:	8a 95       	dec	r24
     8c8:	e2 f7       	brpl	.-8      	; 0x8c2 <__stack+0x63>
     8ca:	cb 01       	movw	r24, r22
     8cc:	80 95       	com	r24
     8ce:	84 23       	and	r24, r20
     8d0:	87 bb       	out	0x17, r24	; 23
     8d2:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
     8d4:	90 ef       	ldi	r25, 0xF0	; 240
     8d6:	98 0f       	add	r25, r24
     8d8:	98 30       	cpi	r25, 0x08	; 8
     8da:	18 f5       	brcc	.+70     	; 0x922 <__stack+0xc3>
		if(direction == OUTPUT)
     8dc:	61 30       	cpi	r22, 0x01	; 1
     8de:	79 f4       	brne	.+30     	; 0x8fe <__stack+0x9f>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
     8e0:	44 b3       	in	r20, 0x14	; 20
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	40 97       	sbiw	r24, 0x10	; 16
     8e6:	21 e0       	ldi	r18, 0x01	; 1
     8e8:	30 e0       	ldi	r19, 0x00	; 0
     8ea:	b9 01       	movw	r22, r18
     8ec:	02 c0       	rjmp	.+4      	; 0x8f2 <__stack+0x93>
     8ee:	66 0f       	add	r22, r22
     8f0:	77 1f       	adc	r23, r23
     8f2:	8a 95       	dec	r24
     8f4:	e2 f7       	brpl	.-8      	; 0x8ee <__stack+0x8f>
     8f6:	cb 01       	movw	r24, r22
     8f8:	84 2b       	or	r24, r20
     8fa:	84 bb       	out	0x14, r24	; 20
     8fc:	08 95       	ret
		else if(direction==INPUT)
     8fe:	61 11       	cpse	r22, r1
     900:	36 c0       	rjmp	.+108    	; 0x96e <__stack+0x10f>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
     902:	44 b3       	in	r20, 0x14	; 20
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	40 97       	sbiw	r24, 0x10	; 16
     908:	21 e0       	ldi	r18, 0x01	; 1
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	b9 01       	movw	r22, r18
     90e:	02 c0       	rjmp	.+4      	; 0x914 <__stack+0xb5>
     910:	66 0f       	add	r22, r22
     912:	77 1f       	adc	r23, r23
     914:	8a 95       	dec	r24
     916:	e2 f7       	brpl	.-8      	; 0x910 <__stack+0xb1>
     918:	cb 01       	movw	r24, r22
     91a:	80 95       	com	r24
     91c:	84 23       	and	r24, r20
     91e:	84 bb       	out	0x14, r24	; 20
     920:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
     922:	98 ee       	ldi	r25, 0xE8	; 232
     924:	98 0f       	add	r25, r24
     926:	98 30       	cpi	r25, 0x08	; 8
     928:	10 f5       	brcc	.+68     	; 0x96e <__stack+0x10f>
		if(direction == OUTPUT)
     92a:	61 30       	cpi	r22, 0x01	; 1
     92c:	79 f4       	brne	.+30     	; 0x94c <__stack+0xed>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
     92e:	41 b3       	in	r20, 0x11	; 17
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	48 97       	sbiw	r24, 0x18	; 24
     934:	21 e0       	ldi	r18, 0x01	; 1
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	b9 01       	movw	r22, r18
     93a:	02 c0       	rjmp	.+4      	; 0x940 <__stack+0xe1>
     93c:	66 0f       	add	r22, r22
     93e:	77 1f       	adc	r23, r23
     940:	8a 95       	dec	r24
     942:	e2 f7       	brpl	.-8      	; 0x93c <__stack+0xdd>
     944:	cb 01       	movw	r24, r22
     946:	84 2b       	or	r24, r20
     948:	81 bb       	out	0x11, r24	; 17
     94a:	08 95       	ret
		else if(direction == INPUT)
     94c:	61 11       	cpse	r22, r1
     94e:	0f c0       	rjmp	.+30     	; 0x96e <__stack+0x10f>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
     950:	41 b3       	in	r20, 0x11	; 17
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	48 97       	sbiw	r24, 0x18	; 24
     956:	21 e0       	ldi	r18, 0x01	; 1
     958:	30 e0       	ldi	r19, 0x00	; 0
     95a:	b9 01       	movw	r22, r18
     95c:	02 c0       	rjmp	.+4      	; 0x962 <__stack+0x103>
     95e:	66 0f       	add	r22, r22
     960:	77 1f       	adc	r23, r23
     962:	8a 95       	dec	r24
     964:	e2 f7       	brpl	.-8      	; 0x95e <__stack+0xff>
     966:	cb 01       	movw	r24, r22
     968:	80 95       	com	r24
     96a:	84 23       	and	r24, r20
     96c:	81 bb       	out	0x11, r24	; 17
     96e:	08 95       	ret

00000970 <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
     970:	88 30       	cpi	r24, 0x08	; 8
     972:	58 f4       	brcc	.+22     	; 0x98a <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
     974:	29 b3       	in	r18, 0x19	; 25
     976:	30 e0       	ldi	r19, 0x00	; 0
     978:	a9 01       	movw	r20, r18
     97a:	02 c0       	rjmp	.+4      	; 0x980 <readPin+0x10>
     97c:	55 95       	asr	r21
     97e:	47 95       	ror	r20
     980:	8a 95       	dec	r24
     982:	e2 f7       	brpl	.-8      	; 0x97c <readPin+0xc>
     984:	ca 01       	movw	r24, r20
     986:	81 70       	andi	r24, 0x01	; 1
     988:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
     98a:	98 ef       	ldi	r25, 0xF8	; 248
     98c:	98 0f       	add	r25, r24
     98e:	98 30       	cpi	r25, 0x08	; 8
     990:	70 f4       	brcc	.+28     	; 0x9ae <readPin+0x3e>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
     992:	96 b3       	in	r25, 0x16	; 22
     994:	28 2f       	mov	r18, r24
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	28 50       	subi	r18, 0x08	; 8
     99a:	31 09       	sbc	r19, r1
     99c:	89 2f       	mov	r24, r25
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	02 c0       	rjmp	.+4      	; 0x9a6 <readPin+0x36>
     9a2:	95 95       	asr	r25
     9a4:	87 95       	ror	r24
     9a6:	2a 95       	dec	r18
     9a8:	e2 f7       	brpl	.-8      	; 0x9a2 <readPin+0x32>
     9aa:	81 70       	andi	r24, 0x01	; 1
     9ac:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
     9ae:	90 ef       	ldi	r25, 0xF0	; 240
     9b0:	98 0f       	add	r25, r24
     9b2:	98 30       	cpi	r25, 0x08	; 8
     9b4:	70 f4       	brcc	.+28     	; 0x9d2 <readPin+0x62>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
     9b6:	93 b3       	in	r25, 0x13	; 19
     9b8:	28 2f       	mov	r18, r24
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	20 51       	subi	r18, 0x10	; 16
     9be:	31 09       	sbc	r19, r1
     9c0:	89 2f       	mov	r24, r25
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <readPin+0x5a>
     9c6:	95 95       	asr	r25
     9c8:	87 95       	ror	r24
     9ca:	2a 95       	dec	r18
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <readPin+0x56>
     9ce:	81 70       	andi	r24, 0x01	; 1
     9d0:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
     9d2:	98 ee       	ldi	r25, 0xE8	; 232
     9d4:	98 0f       	add	r25, r24
     9d6:	98 30       	cpi	r25, 0x08	; 8
     9d8:	70 f4       	brcc	.+28     	; 0x9f6 <readPin+0x86>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
     9da:	90 b3       	in	r25, 0x10	; 16
     9dc:	28 2f       	mov	r18, r24
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	28 51       	subi	r18, 0x18	; 24
     9e2:	31 09       	sbc	r19, r1
     9e4:	89 2f       	mov	r24, r25
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	02 c0       	rjmp	.+4      	; 0x9ee <readPin+0x7e>
     9ea:	95 95       	asr	r25
     9ec:	87 95       	ror	r24
     9ee:	2a 95       	dec	r18
     9f0:	e2 f7       	brpl	.-8      	; 0x9ea <readPin+0x7a>
     9f2:	81 70       	andi	r24, 0x01	; 1
     9f4:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     9f6:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
     9f8:	08 95       	ret

000009fa <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     9fa:	41 30       	cpi	r20, 0x01	; 1
     9fc:	29 f4       	brne	.+10     	; 0xa08 <writePins+0xe>
		SETBits(*port,mask);
     9fe:	fc 01       	movw	r30, r24
     a00:	20 81       	ld	r18, Z
     a02:	62 2b       	or	r22, r18
     a04:	60 83       	st	Z, r22
     a06:	08 95       	ret
	else if(logic==LOW)
     a08:	41 11       	cpse	r20, r1
     a0a:	05 c0       	rjmp	.+10     	; 0xa16 <writePins+0x1c>
		CLRBits(*port,mask);
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 81       	ld	r18, Z
     a10:	60 95       	com	r22
     a12:	62 23       	and	r22, r18
     a14:	60 83       	st	Z, r22
     a16:	08 95       	ret

00000a18 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     a18:	41 30       	cpi	r20, 0x01	; 1
     a1a:	29 f4       	brne	.+10     	; 0xa26 <pinsDirection+0xe>
		SETBits(*ddr,mask);
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 81       	ld	r18, Z
     a20:	62 2b       	or	r22, r18
     a22:	60 83       	st	Z, r22
     a24:	08 95       	ret
	else if(direction == INPUT)
     a26:	41 11       	cpse	r20, r1
     a28:	05 c0       	rjmp	.+10     	; 0xa34 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 81       	ld	r18, Z
     a2e:	60 95       	com	r22
     a30:	62 23       	and	r22, r18
     a32:	60 83       	st	Z, r22
     a34:	08 95       	ret

00000a36 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
     a36:	1f 92       	push	r1
     a38:	0f 92       	push	r0
     a3a:	0f b6       	in	r0, 0x3f	; 63
     a3c:	0f 92       	push	r0
     a3e:	11 24       	eor	r1, r1
     a40:	8f 93       	push	r24
     a42:	9f 93       	push	r25
     a44:	af 93       	push	r26
     a46:	bf 93       	push	r27
	overflow++;	
     a48:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <overflow>
     a4c:	90 91 91 01 	lds	r25, 0x0191	; 0x800191 <overflow+0x1>
     a50:	a0 91 92 01 	lds	r26, 0x0192	; 0x800192 <overflow+0x2>
     a54:	b0 91 93 01 	lds	r27, 0x0193	; 0x800193 <overflow+0x3>
     a58:	01 96       	adiw	r24, 0x01	; 1
     a5a:	a1 1d       	adc	r26, r1
     a5c:	b1 1d       	adc	r27, r1
     a5e:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <overflow>
     a62:	90 93 91 01 	sts	0x0191, r25	; 0x800191 <overflow+0x1>
     a66:	a0 93 92 01 	sts	0x0192, r26	; 0x800192 <overflow+0x2>
     a6a:	b0 93 93 01 	sts	0x0193, r27	; 0x800193 <overflow+0x3>
}
     a6e:	bf 91       	pop	r27
     a70:	af 91       	pop	r26
     a72:	9f 91       	pop	r25
     a74:	8f 91       	pop	r24
     a76:	0f 90       	pop	r0
     a78:	0f be       	out	0x3f, r0	; 63
     a7a:	0f 90       	pop	r0
     a7c:	1f 90       	pop	r1
     a7e:	18 95       	reti

00000a80 <UART_INIT>:
	}
	else{
		result = FALSE;
	}
	return result;
}
     a80:	a0 e0       	ldi	r26, 0x00	; 0
     a82:	b0 e0       	ldi	r27, 0x00	; 0
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	aa 1f       	adc	r26, r26
     a8a:	bb 1f       	adc	r27, r27
     a8c:	88 0f       	add	r24, r24
     a8e:	99 1f       	adc	r25, r25
     a90:	aa 1f       	adc	r26, r26
     a92:	bb 1f       	adc	r27, r27
     a94:	9c 01       	movw	r18, r24
     a96:	ad 01       	movw	r20, r26
     a98:	22 0f       	add	r18, r18
     a9a:	33 1f       	adc	r19, r19
     a9c:	44 1f       	adc	r20, r20
     a9e:	55 1f       	adc	r21, r21
     aa0:	22 0f       	add	r18, r18
     aa2:	33 1f       	adc	r19, r19
     aa4:	44 1f       	adc	r20, r20
     aa6:	55 1f       	adc	r21, r21
     aa8:	60 e0       	ldi	r22, 0x00	; 0
     aaa:	72 e1       	ldi	r23, 0x12	; 18
     aac:	8a e7       	ldi	r24, 0x7A	; 122
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	0e 94 75 07 	call	0xeea	; 0xeea <__udivmodsi4>
     ab4:	21 50       	subi	r18, 0x01	; 1
     ab6:	31 09       	sbc	r19, r1
     ab8:	30 bd       	out	0x20, r19	; 32
     aba:	29 b9       	out	0x09, r18	; 9
     abc:	8a b1       	in	r24, 0x0a	; 10
     abe:	88 60       	ori	r24, 0x08	; 8
     ac0:	8a b9       	out	0x0a, r24	; 10
     ac2:	8a b1       	in	r24, 0x0a	; 10
     ac4:	80 61       	ori	r24, 0x10	; 16
     ac6:	8a b9       	out	0x0a, r24	; 10
     ac8:	8a b1       	in	r24, 0x0a	; 10
     aca:	80 68       	ori	r24, 0x80	; 128
     acc:	8a b9       	out	0x0a, r24	; 10
     ace:	86 e8       	ldi	r24, 0x86	; 134
     ad0:	80 bd       	out	0x20, r24	; 32
     ad2:	0e 94 70 03 	call	0x6e0	; 0x6e0 <GLOBAL_INT_EN>
     ad6:	08 95       	ret

00000ad8 <UART_TX>:
     ad8:	8c b9       	out	0x0c, r24	; 12
     ada:	5d 9b       	sbis	0x0b, 5	; 11
     adc:	fe cf       	rjmp	.-4      	; 0xada <UART_TX+0x2>
     ade:	08 95       	ret

00000ae0 <Uart_SendStr>:

void	Uart_SendStr(u8* str){
     ae0:	cf 92       	push	r12
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	ec 01       	movw	r28, r24
	u32 ind = 0;
     aee:	c1 2c       	mov	r12, r1
     af0:	d1 2c       	mov	r13, r1
     af2:	76 01       	movw	r14, r12
	while(str[ind] != 0){
     af4:	07 c0       	rjmp	.+14     	; 0xb04 <Uart_SendStr+0x24>
		UART_TX(str[ind]);
     af6:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
		ind++;
     afa:	8f ef       	ldi	r24, 0xFF	; 255
     afc:	c8 1a       	sub	r12, r24
     afe:	d8 0a       	sbc	r13, r24
     b00:	e8 0a       	sbc	r14, r24
     b02:	f8 0a       	sbc	r15, r24
	return result;
}

void	Uart_SendStr(u8* str){
	u32 ind = 0;
	while(str[ind] != 0){
     b04:	fe 01       	movw	r30, r28
     b06:	ec 0d       	add	r30, r12
     b08:	fd 1d       	adc	r31, r13
     b0a:	80 81       	ld	r24, Z
     b0c:	81 11       	cpse	r24, r1
     b0e:	f3 cf       	rjmp	.-26     	; 0xaf6 <Uart_SendStr+0x16>
		UART_TX(str[ind]);
		ind++;
	}
}
     b10:	df 91       	pop	r29
     b12:	cf 91       	pop	r28
     b14:	ff 90       	pop	r15
     b16:	ef 90       	pop	r14
     b18:	df 90       	pop	r13
     b1a:	cf 90       	pop	r12
     b1c:	08 95       	ret

00000b1e <sendUTFStr>:
 */ 
#include "MQTT.h"

u16 PID = 1;
u8 proName[] = "MQTT";
void sendUTFStr(u8* str){
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
     b22:	ec 01       	movw	r28, r24
	UART_TX(0x00); // MSB = 0 because packet len < 256
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(strlen(str));
     b2a:	fe 01       	movw	r30, r28
     b2c:	01 90       	ld	r0, Z+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <sendUTFStr+0xe>
     b32:	cf 01       	movw	r24, r30
     b34:	01 97       	sbiw	r24, 0x01	; 1
     b36:	8c 1b       	sub	r24, r28
     b38:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	Uart_SendStr(str);
     b3c:	ce 01       	movw	r24, r28
     b3e:	0e 94 70 05 	call	0xae0	; 0xae0 <Uart_SendStr>
}
     b42:	df 91       	pop	r29
     b44:	cf 91       	pop	r28
     b46:	08 95       	ret

00000b48 <MQTT_Connect>:
void MQTT_Connect(u8* id){
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	df 93       	push	r29
     b50:	8c 01       	movw	r16, r24
	u8 RL = (2 + strlen(proName)) + 1 + 1 + 2 + ( 2 + strlen(id));
     b52:	e0 e6       	ldi	r30, 0x60	; 96
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	01 90       	ld	r0, Z+
     b58:	00 20       	and	r0, r0
     b5a:	e9 f7       	brne	.-6      	; 0xb56 <MQTT_Connect+0xe>
     b5c:	31 97       	sbiw	r30, 0x01	; 1
     b5e:	ef 01       	movw	r28, r30
     b60:	c0 56       	subi	r28, 0x60	; 96
     b62:	d0 40       	sbci	r29, 0x00	; 0
     b64:	fc 01       	movw	r30, r24
     b66:	01 90       	ld	r0, Z+
     b68:	00 20       	and	r0, r0
     b6a:	e9 f7       	brne	.-6      	; 0xb66 <MQTT_Connect+0x1e>
     b6c:	31 97       	sbiw	r30, 0x01	; 1
     b6e:	e8 1b       	sub	r30, r24
     b70:	f9 0b       	sbc	r31, r25
     b72:	ec 0f       	add	r30, r28
     b74:	c8 e0       	ldi	r28, 0x08	; 8
     b76:	ce 0f       	add	r28, r30
	UART_TX(0x10);
     b78:	80 e1       	ldi	r24, 0x10	; 16
     b7a:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(RL);
     b7e:	8c 2f       	mov	r24, r28
     b80:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	sendUTFStr(proName);
     b84:	80 e6       	ldi	r24, 0x60	; 96
     b86:	90 e0       	ldi	r25, 0x00	; 0
     b88:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sendUTFStr>
	UART_TX(0x04);
     b8c:	84 e0       	ldi	r24, 0x04	; 4
     b8e:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(0x02);
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(0xFF);
     b98:	8f ef       	ldi	r24, 0xFF	; 255
     b9a:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(0xFF);
     b9e:	8f ef       	ldi	r24, 0xFF	; 255
     ba0:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	sendUTFStr(id);
     ba4:	c8 01       	movw	r24, r16
     ba6:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sendUTFStr>
}
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	0f 91       	pop	r16
     bb2:	08 95       	ret

00000bb4 <MQTT_Publish>:
void MQTT_Publish(u8* topic, u8* msgPtr, u8 msgLen){
     bb4:	ef 92       	push	r14
     bb6:	ff 92       	push	r15
     bb8:	0f 93       	push	r16
     bba:	1f 93       	push	r17
     bbc:	cf 93       	push	r28
     bbe:	df 93       	push	r29
     bc0:	7c 01       	movw	r14, r24
     bc2:	8b 01       	movw	r16, r22
     bc4:	d4 2f       	mov	r29, r20
	u8 RL = (2 + strlen(topic)) + msgLen;
     bc6:	fc 01       	movw	r30, r24
     bc8:	01 90       	ld	r0, Z+
     bca:	00 20       	and	r0, r0
     bcc:	e9 f7       	brne	.-6      	; 0xbc8 <MQTT_Publish+0x14>
     bce:	31 97       	sbiw	r30, 0x01	; 1
     bd0:	e8 1b       	sub	r30, r24
     bd2:	f9 0b       	sbc	r31, r25
     bd4:	e4 0f       	add	r30, r20
     bd6:	c2 e0       	ldi	r28, 0x02	; 2
     bd8:	ce 0f       	add	r28, r30
	u8 ind = 0;
	UART_TX(0x30);
     bda:	80 e3       	ldi	r24, 0x30	; 48
     bdc:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(RL);
     be0:	8c 2f       	mov	r24, r28
     be2:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	sendUTFStr(topic);
     be6:	c7 01       	movw	r24, r14
     be8:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sendUTFStr>
	for (ind = 0; ind < msgLen; ind++)
     bec:	c0 e0       	ldi	r28, 0x00	; 0
     bee:	07 c0       	rjmp	.+14     	; 0xbfe <MQTT_Publish+0x4a>
	{
		UART_TX(msgPtr[ind]);
     bf0:	f8 01       	movw	r30, r16
     bf2:	ec 0f       	add	r30, r28
     bf4:	f1 1d       	adc	r31, r1
     bf6:	80 81       	ld	r24, Z
     bf8:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	u8 RL = (2 + strlen(topic)) + msgLen;
	u8 ind = 0;
	UART_TX(0x30);
	UART_TX(RL);
	sendUTFStr(topic);
	for (ind = 0; ind < msgLen; ind++)
     bfc:	cf 5f       	subi	r28, 0xFF	; 255
     bfe:	cd 17       	cp	r28, r29
     c00:	b8 f3       	brcs	.-18     	; 0xbf0 <MQTT_Publish+0x3c>
	{
		UART_TX(msgPtr[ind]);
	}
}
     c02:	df 91       	pop	r29
     c04:	cf 91       	pop	r28
     c06:	1f 91       	pop	r17
     c08:	0f 91       	pop	r16
     c0a:	ff 90       	pop	r15
     c0c:	ef 90       	pop	r14
     c0e:	08 95       	ret

00000c10 <MQTT_Subscribe>:
void MQTT_Subscribe(u8* topic){
     c10:	0f 93       	push	r16
     c12:	1f 93       	push	r17
     c14:	cf 93       	push	r28
     c16:	8c 01       	movw	r16, r24
	u8 RL = 2 + (2 + strlen(topic)) + 1;
     c18:	fc 01       	movw	r30, r24
     c1a:	01 90       	ld	r0, Z+
     c1c:	00 20       	and	r0, r0
     c1e:	e9 f7       	brne	.-6      	; 0xc1a <MQTT_Subscribe+0xa>
     c20:	31 97       	sbiw	r30, 0x01	; 1
     c22:	e8 1b       	sub	r30, r24
     c24:	f9 0b       	sbc	r31, r25
     c26:	c5 e0       	ldi	r28, 0x05	; 5
     c28:	ce 0f       	add	r28, r30
	UART_TX(0x82);
     c2a:	82 e8       	ldi	r24, 0x82	; 130
     c2c:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX(RL);
     c30:	8c 2f       	mov	r24, r28
     c32:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	
	UART_TX((u8)(PID>>8)); // MSB
     c36:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <PID+0x1>
     c3a:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	UART_TX((u8)(PID));
     c3e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <PID>
     c42:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
	PID++;
     c46:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <PID>
     c4a:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <PID+0x1>
     c4e:	01 96       	adiw	r24, 0x01	; 1
     c50:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <PID+0x1>
     c54:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <PID>
	
	sendUTFStr(topic);	
     c58:	c8 01       	movw	r24, r16
     c5a:	0e 94 8f 05 	call	0xb1e	; 0xb1e <sendUTFStr>
	UART_TX(0x00);
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	0e 94 6c 05 	call	0xad8	; 0xad8 <UART_TX>
     c64:	cf 91       	pop	r28
     c66:	1f 91       	pop	r17
     c68:	0f 91       	pop	r16
     c6a:	08 95       	ret

00000c6c <FireAlarm>:
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
}
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	2d 97       	sbiw	r28, 0x0d	; 13
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	8d e0       	ldi	r24, 0x0D	; 13
     c82:	eb e7       	ldi	r30, 0x7B	; 123
     c84:	f0 e0       	ldi	r31, 0x00	; 0
     c86:	be 01       	movw	r22, r28
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	7f 4f       	sbci	r23, 0xFF	; 255
     c8c:	db 01       	movw	r26, r22
     c8e:	01 90       	ld	r0, Z+
     c90:	0d 92       	st	X+, r0
     c92:	8a 95       	dec	r24
     c94:	e1 f7       	brne	.-8      	; 0xc8e <FireAlarm+0x22>
     c96:	92 b3       	in	r25, 0x12	; 18
     c98:	88 e0       	ldi	r24, 0x08	; 8
     c9a:	89 27       	eor	r24, r25
     c9c:	82 bb       	out	0x12, r24	; 18
     c9e:	88 b3       	in	r24, 0x18	; 24
     ca0:	80 58       	subi	r24, 0x80	; 128
     ca2:	88 bb       	out	0x18, r24	; 24
     ca4:	fb 01       	movw	r30, r22
     ca6:	01 90       	ld	r0, Z+
     ca8:	00 20       	and	r0, r0
     caa:	e9 f7       	brne	.-6      	; 0xca6 <FireAlarm+0x3a>
     cac:	31 97       	sbiw	r30, 0x01	; 1
     cae:	af 01       	movw	r20, r30
     cb0:	46 1b       	sub	r20, r22
     cb2:	57 0b       	sbc	r21, r23
     cb4:	84 e7       	ldi	r24, 0x74	; 116
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <MQTT_Publish>
     cbc:	2f ef       	ldi	r18, 0xFF	; 255
     cbe:	89 e6       	ldi	r24, 0x69	; 105
     cc0:	98 e1       	ldi	r25, 0x18	; 24
     cc2:	21 50       	subi	r18, 0x01	; 1
     cc4:	80 40       	sbci	r24, 0x00	; 0
     cc6:	90 40       	sbci	r25, 0x00	; 0
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <FireAlarm+0x56>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <FireAlarm+0x60>
     ccc:	00 00       	nop
     cce:	2d 96       	adiw	r28, 0x0d	; 13
     cd0:	0f b6       	in	r0, 0x3f	; 63
     cd2:	f8 94       	cli
     cd4:	de bf       	out	0x3e, r29	; 62
     cd6:	0f be       	out	0x3f, r0	; 63
     cd8:	cd bf       	out	0x3d, r28	; 61
     cda:	df 91       	pop	r29
     cdc:	cf 91       	pop	r28
     cde:	08 95       	ret

00000ce0 <turnOnFireAlarm>:
     ce0:	86 e3       	ldi	r24, 0x36	; 54
     ce2:	96 e0       	ldi	r25, 0x06	; 6
     ce4:	0e 94 42 03 	call	0x684	; 0x684 <Callback>
     ce8:	08 95       	ret

00000cea <Project_Init>:
     cea:	0e 94 30 02 	call	0x460	; 0x460 <KEYPAD_Init>
     cee:	0e 94 a1 02 	call	0x542	; 0x542 <LCD_init>
     cf2:	0e 94 77 03 	call	0x6ee	; 0x6ee <ADC_init>
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	86 e0       	ldi	r24, 0x06	; 6
     cfa:	0e 94 47 03 	call	0x68e	; 0x68e <INT_init>
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	84 e1       	ldi	r24, 0x14	; 20
     d02:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	8f e0       	ldi	r24, 0x0F	; 15
     d0a:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	8c e1       	ldi	r24, 0x1C	; 28
     d12:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d16:	61 e0       	ldi	r22, 0x01	; 1
     d18:	8d e1       	ldi	r24, 0x1D	; 29
     d1a:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d1e:	61 e0       	ldi	r22, 0x01	; 1
     d20:	8b e1       	ldi	r24, 0x1B	; 27
     d22:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d26:	61 e0       	ldi	r22, 0x01	; 1
     d28:	8f e1       	ldi	r24, 0x1F	; 31
     d2a:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d2e:	60 e0       	ldi	r22, 0x00	; 0
     d30:	8a e1       	ldi	r24, 0x1A	; 26
     d32:	0e 94 22 04 	call	0x844	; 0x844 <pinDirection>
     d36:	08 95       	ret

00000d38 <temp>:
// 	 	_delay_ms(1000);
// 	
}

void temp(void)
{
     d38:	ef 92       	push	r14
     d3a:	ff 92       	push	r15
     d3c:	0f 93       	push	r16
     d3e:	1f 93       	push	r17
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	c8 57       	subi	r28, 0x78	; 120
     d4a:	d1 09       	sbc	r29, r1
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
	u8 temp[60];
	u8 hum[60];
	disp_strXY(3,1,"Humid=     %RH");
     d56:	42 eb       	ldi	r20, 0xB2	; 178
     d58:	50 e0       	ldi	r21, 0x00	; 0
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	83 e0       	ldi	r24, 0x03	; 3
     d5e:	0e 94 04 03 	call	0x608	; 0x608 <disp_strXY>
	disp_strXY(4,1,"temp=      Deg.c");
     d62:	41 ec       	ldi	r20, 0xC1	; 193
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	61 e0       	ldi	r22, 0x01	; 1
     d68:	84 e0       	ldi	r24, 0x04	; 4
     d6a:	0e 94 04 03 	call	0x608	; 0x608 <disp_strXY>
	DHT_Represent(hum,temp);
     d6e:	8e 01       	movw	r16, r28
     d70:	03 5c       	subi	r16, 0xC3	; 195
     d72:	1f 4f       	sbci	r17, 0xFF	; 255
     d74:	ce 01       	movw	r24, r28
     d76:	01 96       	adiw	r24, 0x01	; 1
     d78:	7c 01       	movw	r14, r24
     d7a:	bc 01       	movw	r22, r24
     d7c:	c8 01       	movw	r24, r16
     d7e:	0e 94 00 02 	call	0x400	; 0x400 <DHT_Represent>
	disp_strXY(3,7,hum);
     d82:	a8 01       	movw	r20, r16
     d84:	67 e0       	ldi	r22, 0x07	; 7
     d86:	83 e0       	ldi	r24, 0x03	; 3
     d88:	0e 94 04 03 	call	0x608	; 0x608 <disp_strXY>
	disp_strXY(4,6,temp);
     d8c:	a7 01       	movw	r20, r14
     d8e:	66 e0       	ldi	r22, 0x06	; 6
     d90:	84 e0       	ldi	r24, 0x04	; 4
     d92:	0e 94 04 03 	call	0x608	; 0x608 <disp_strXY>
	
	MQTT_Publish("G/DHT",temp,strlen(temp));
     d96:	f7 01       	movw	r30, r14
     d98:	01 90       	ld	r0, Z+
     d9a:	00 20       	and	r0, r0
     d9c:	e9 f7       	brne	.-6      	; 0xd98 <temp+0x60>
     d9e:	31 97       	sbiw	r30, 0x01	; 1
     da0:	af 01       	movw	r20, r30
     da2:	4e 19       	sub	r20, r14
     da4:	5f 09       	sbc	r21, r15
     da6:	b7 01       	movw	r22, r14
     da8:	82 ed       	ldi	r24, 0xD2	; 210
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	0e 94 da 05 	call	0xbb4	; 0xbb4 <MQTT_Publish>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     db0:	9f ef       	ldi	r25, 0xFF	; 255
     db2:	29 e6       	ldi	r18, 0x69	; 105
     db4:	88 e1       	ldi	r24, 0x18	; 24
     db6:	91 50       	subi	r25, 0x01	; 1
     db8:	20 40       	sbci	r18, 0x00	; 0
     dba:	80 40       	sbci	r24, 0x00	; 0
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <temp+0x7e>
     dbe:	00 c0       	rjmp	.+0      	; 0xdc0 <temp+0x88>
     dc0:	00 00       	nop
	_delay_ms(1000);
	MQTT_Publish("G/hum",hum,strlen(hum));
     dc2:	f8 01       	movw	r30, r16
     dc4:	01 90       	ld	r0, Z+
     dc6:	00 20       	and	r0, r0
     dc8:	e9 f7       	brne	.-6      	; 0xdc4 <temp+0x8c>
     dca:	31 97       	sbiw	r30, 0x01	; 1
     dcc:	af 01       	movw	r20, r30
     dce:	40 1b       	sub	r20, r16
     dd0:	51 0b       	sbc	r21, r17
     dd2:	b8 01       	movw	r22, r16
     dd4:	88 ed       	ldi	r24, 0xD8	; 216
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <MQTT_Publish>
     ddc:	9f ef       	ldi	r25, 0xFF	; 255
     dde:	29 e6       	ldi	r18, 0x69	; 105
     de0:	88 e1       	ldi	r24, 0x18	; 24
     de2:	91 50       	subi	r25, 0x01	; 1
     de4:	20 40       	sbci	r18, 0x00	; 0
     de6:	80 40       	sbci	r24, 0x00	; 0
     de8:	e1 f7       	brne	.-8      	; 0xde2 <temp+0xaa>
     dea:	00 c0       	rjmp	.+0      	; 0xdec <temp+0xb4>
     dec:	00 00       	nop
	_delay_ms(1000);
}
     dee:	c8 58       	subi	r28, 0x88	; 136
     df0:	df 4f       	sbci	r29, 0xFF	; 255
     df2:	0f b6       	in	r0, 0x3f	; 63
     df4:	f8 94       	cli
     df6:	de bf       	out	0x3e, r29	; 62
     df8:	0f be       	out	0x3f, r0	; 63
     dfa:	cd bf       	out	0x3d, r28	; 61
     dfc:	df 91       	pop	r29
     dfe:	cf 91       	pop	r28
     e00:	1f 91       	pop	r17
     e02:	0f 91       	pop	r16
     e04:	ff 90       	pop	r15
     e06:	ef 90       	pop	r14
     e08:	08 95       	ret

00000e0a <AnalogSensors>:
	disp_intXY(2,6,trials);
	Get_Password(password);	
}

void AnalogSensors(void)
{
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ef 92       	push	r14
     e10:	ff 92       	push	r15
     e12:	0f 93       	push	r16
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
	u8 tempstr[4]={0};
	LCD_CLEAR();
     e1a:	0e 94 8d 02 	call	0x51a	; 0x51a <LCD_CLEAR>
	u16 LDR=0;
	u16 soil=0;
	soil=read_analog(SOILSENSOR);
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	0e 94 7e 03 	call	0x6fc	; 0x6fc <read_analog>
     e26:	ec 01       	movw	r28, r24
	LDR=read_analog(LDRSENSOR);
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	0e 94 7e 03 	call	0x6fc	; 0x6fc <read_analog>
     e30:	8c 01       	movw	r16, r24
	soil=(100-(soil*100UL)/1019UL);
     e32:	9e 01       	movw	r18, r28
     e34:	a4 e6       	ldi	r26, 0x64	; 100
     e36:	b0 e0       	ldi	r27, 0x00	; 0
     e38:	0e 94 97 07 	call	0xf2e	; 0xf2e <__umulhisi3>
     e3c:	2b ef       	ldi	r18, 0xFB	; 251
     e3e:	33 e0       	ldi	r19, 0x03	; 3
     e40:	40 e0       	ldi	r20, 0x00	; 0
     e42:	50 e0       	ldi	r21, 0x00	; 0
     e44:	0e 94 75 07 	call	0xeea	; 0xeea <__udivmodsi4>
     e48:	c4 e6       	ldi	r28, 0x64	; 100
     e4a:	d0 e0       	ldi	r29, 0x00	; 0
     e4c:	c2 1b       	sub	r28, r18
     e4e:	d3 0b       	sbc	r29, r19
	LDR=((LDR*100UL)/407UL);
     e50:	98 01       	movw	r18, r16
     e52:	a4 e6       	ldi	r26, 0x64	; 100
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	0e 94 97 07 	call	0xf2e	; 0xf2e <__umulhisi3>
     e5a:	27 e9       	ldi	r18, 0x97	; 151
     e5c:	31 e0       	ldi	r19, 0x01	; 1
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	50 e0       	ldi	r21, 0x00	; 0
     e62:	0e 94 75 07 	call	0xeea	; 0xeea <__udivmodsi4>
     e66:	69 01       	movw	r12, r18
     e68:	7a 01       	movw	r14, r20
     e6a:	89 01       	movw	r16, r18
	disp_strXY(1,1,"soil water=");
     e6c:	4e ed       	ldi	r20, 0xDE	; 222
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	0e 94 04 03 	call	0x608	; 0x608 <disp_strXY>
	disp_int(soil);
     e78:	be 01       	movw	r22, r28
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 0f 03 	call	0x61e	; 0x61e <disp_int>
	disp_char('%');
     e82:	85 e2       	ldi	r24, 0x25	; 37
     e84:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <disp_char>
	disp_strXY(2,1,"Light = ");
     e88:	4a ee       	ldi	r20, 0xEA	; 234
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	61 e0       	ldi	r22, 0x01	; 1
     e8e:	82 e0       	ldi	r24, 0x02	; 2
     e90:	0e 94 04 03 	call	0x608	; 0x608 <disp_strXY>
	disp_int(LDR);
     e94:	c7 01       	movw	r24, r14
     e96:	b6 01       	movw	r22, r12
     e98:	88 27       	eor	r24, r24
     e9a:	99 27       	eor	r25, r25
     e9c:	0e 94 0f 03 	call	0x61e	; 0x61e <disp_int>
	disp_char('%');
     ea0:	85 e2       	ldi	r24, 0x25	; 37
     ea2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <disp_char>
	//controlling planets irrigation 
	if (soil<=30)//turn on pump
     ea6:	6f 97       	sbiw	r28, 0x1f	; 31
     ea8:	28 f4       	brcc	.+10     	; 0xeb4 <AnalogSensors+0xaa>
	{
		writePin(SOIL_PUMP,HIGH);
     eaa:	61 e0       	ldi	r22, 0x01	; 1
     eac:	8c e1       	ldi	r24, 0x1C	; 28
     eae:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     eb2:	04 c0       	rjmp	.+8      	; 0xebc <AnalogSensors+0xb2>
	}
	else
	{
		writePin(SOIL_PUMP,LOW);
     eb4:	60 e0       	ldi	r22, 0x00	; 0
     eb6:	8c e1       	ldi	r24, 0x1C	; 28
     eb8:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
	}
	//controlling outer lights
	if (LDR<30)//turn on lights
     ebc:	0e 31       	cpi	r16, 0x1E	; 30
     ebe:	11 05       	cpc	r17, r1
     ec0:	28 f4       	brcc	.+10     	; 0xecc <AnalogSensors+0xc2>
	{
		writePin(OUTERLIGHT,HIGH);
     ec2:	61 e0       	ldi	r22, 0x01	; 1
     ec4:	8d e1       	ldi	r24, 0x1D	; 29
     ec6:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
     eca:	04 c0       	rjmp	.+8      	; 0xed4 <AnalogSensors+0xca>
	}
	else
	{
		writePin(OUTERLIGHT,LOW);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	8d e1       	ldi	r24, 0x1D	; 29
     ed0:	0e 94 8c 03 	call	0x718	; 0x718 <writePin>
	}
	 	
	temp();
     ed4:	0e 94 9c 06 	call	0xd38	; 0xd38 <temp>
// 		itoa(LDR,tempstr,10);
// 	 	MQTT_Publish("G/light",tempstr,strlen(tempstr));
// 	 	_delay_ms(1000);
// 	
}
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	1f 91       	pop	r17
     ede:	0f 91       	pop	r16
     ee0:	ff 90       	pop	r15
     ee2:	ef 90       	pop	r14
     ee4:	df 90       	pop	r13
     ee6:	cf 90       	pop	r12
     ee8:	08 95       	ret

00000eea <__udivmodsi4>:
     eea:	a1 e2       	ldi	r26, 0x21	; 33
     eec:	1a 2e       	mov	r1, r26
     eee:	aa 1b       	sub	r26, r26
     ef0:	bb 1b       	sub	r27, r27
     ef2:	fd 01       	movw	r30, r26
     ef4:	0d c0       	rjmp	.+26     	; 0xf10 <__udivmodsi4_ep>

00000ef6 <__udivmodsi4_loop>:
     ef6:	aa 1f       	adc	r26, r26
     ef8:	bb 1f       	adc	r27, r27
     efa:	ee 1f       	adc	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	a2 17       	cp	r26, r18
     f00:	b3 07       	cpc	r27, r19
     f02:	e4 07       	cpc	r30, r20
     f04:	f5 07       	cpc	r31, r21
     f06:	20 f0       	brcs	.+8      	; 0xf10 <__udivmodsi4_ep>
     f08:	a2 1b       	sub	r26, r18
     f0a:	b3 0b       	sbc	r27, r19
     f0c:	e4 0b       	sbc	r30, r20
     f0e:	f5 0b       	sbc	r31, r21

00000f10 <__udivmodsi4_ep>:
     f10:	66 1f       	adc	r22, r22
     f12:	77 1f       	adc	r23, r23
     f14:	88 1f       	adc	r24, r24
     f16:	99 1f       	adc	r25, r25
     f18:	1a 94       	dec	r1
     f1a:	69 f7       	brne	.-38     	; 0xef6 <__udivmodsi4_loop>
     f1c:	60 95       	com	r22
     f1e:	70 95       	com	r23
     f20:	80 95       	com	r24
     f22:	90 95       	com	r25
     f24:	9b 01       	movw	r18, r22
     f26:	ac 01       	movw	r20, r24
     f28:	bd 01       	movw	r22, r26
     f2a:	cf 01       	movw	r24, r30
     f2c:	08 95       	ret

00000f2e <__umulhisi3>:
     f2e:	a2 9f       	mul	r26, r18
     f30:	b0 01       	movw	r22, r0
     f32:	b3 9f       	mul	r27, r19
     f34:	c0 01       	movw	r24, r0
     f36:	a3 9f       	mul	r26, r19
     f38:	70 0d       	add	r23, r0
     f3a:	81 1d       	adc	r24, r1
     f3c:	11 24       	eor	r1, r1
     f3e:	91 1d       	adc	r25, r1
     f40:	b2 9f       	mul	r27, r18
     f42:	70 0d       	add	r23, r0
     f44:	81 1d       	adc	r24, r1
     f46:	11 24       	eor	r1, r1
     f48:	91 1d       	adc	r25, r1
     f4a:	08 95       	ret

00000f4c <strcat>:
     f4c:	fb 01       	movw	r30, r22
     f4e:	dc 01       	movw	r26, r24
     f50:	0d 90       	ld	r0, X+
     f52:	00 20       	and	r0, r0
     f54:	e9 f7       	brne	.-6      	; 0xf50 <strcat+0x4>
     f56:	11 97       	sbiw	r26, 0x01	; 1
     f58:	01 90       	ld	r0, Z+
     f5a:	0d 92       	st	X+, r0
     f5c:	00 20       	and	r0, r0
     f5e:	e1 f7       	brne	.-8      	; 0xf58 <strcat+0xc>
     f60:	08 95       	ret

00000f62 <sprintf>:
     f62:	ae e0       	ldi	r26, 0x0E	; 14
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	e7 eb       	ldi	r30, 0xB7	; 183
     f68:	f7 e0       	ldi	r31, 0x07	; 7
     f6a:	0c 94 72 0a 	jmp	0x14e4	; 0x14e4 <__prologue_saves__+0x1c>
     f6e:	0d 89       	ldd	r16, Y+21	; 0x15
     f70:	1e 89       	ldd	r17, Y+22	; 0x16
     f72:	86 e0       	ldi	r24, 0x06	; 6
     f74:	8c 83       	std	Y+4, r24	; 0x04
     f76:	1a 83       	std	Y+2, r17	; 0x02
     f78:	09 83       	std	Y+1, r16	; 0x01
     f7a:	8f ef       	ldi	r24, 0xFF	; 255
     f7c:	9f e7       	ldi	r25, 0x7F	; 127
     f7e:	9e 83       	std	Y+6, r25	; 0x06
     f80:	8d 83       	std	Y+5, r24	; 0x05
     f82:	ae 01       	movw	r20, r28
     f84:	47 5e       	subi	r20, 0xE7	; 231
     f86:	5f 4f       	sbci	r21, 0xFF	; 255
     f88:	6f 89       	ldd	r22, Y+23	; 0x17
     f8a:	78 8d       	ldd	r23, Y+24	; 0x18
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <vfprintf>
     f94:	ef 81       	ldd	r30, Y+7	; 0x07
     f96:	f8 85       	ldd	r31, Y+8	; 0x08
     f98:	e0 0f       	add	r30, r16
     f9a:	f1 1f       	adc	r31, r17
     f9c:	10 82       	st	Z, r1
     f9e:	2e 96       	adiw	r28, 0x0e	; 14
     fa0:	e4 e0       	ldi	r30, 0x04	; 4
     fa2:	0c 94 8e 0a 	jmp	0x151c	; 0x151c <__epilogue_restores__+0x1c>

00000fa6 <vfprintf>:
     fa6:	ab e0       	ldi	r26, 0x0B	; 11
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	e9 ed       	ldi	r30, 0xD9	; 217
     fac:	f7 e0       	ldi	r31, 0x07	; 7
     fae:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__prologue_saves__>
     fb2:	6c 01       	movw	r12, r24
     fb4:	7b 01       	movw	r14, r22
     fb6:	8a 01       	movw	r16, r20
     fb8:	fc 01       	movw	r30, r24
     fba:	17 82       	std	Z+7, r1	; 0x07
     fbc:	16 82       	std	Z+6, r1	; 0x06
     fbe:	83 81       	ldd	r24, Z+3	; 0x03
     fc0:	81 ff       	sbrs	r24, 1
     fc2:	cc c1       	rjmp	.+920    	; 0x135c <vfprintf+0x3b6>
     fc4:	ce 01       	movw	r24, r28
     fc6:	01 96       	adiw	r24, 0x01	; 1
     fc8:	3c 01       	movw	r6, r24
     fca:	f6 01       	movw	r30, r12
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	f7 01       	movw	r30, r14
     fd0:	93 fd       	sbrc	r25, 3
     fd2:	85 91       	lpm	r24, Z+
     fd4:	93 ff       	sbrs	r25, 3
     fd6:	81 91       	ld	r24, Z+
     fd8:	7f 01       	movw	r14, r30
     fda:	88 23       	and	r24, r24
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <vfprintf+0x3a>
     fde:	ba c1       	rjmp	.+884    	; 0x1354 <vfprintf+0x3ae>
     fe0:	85 32       	cpi	r24, 0x25	; 37
     fe2:	39 f4       	brne	.+14     	; 0xff2 <vfprintf+0x4c>
     fe4:	93 fd       	sbrc	r25, 3
     fe6:	85 91       	lpm	r24, Z+
     fe8:	93 ff       	sbrs	r25, 3
     fea:	81 91       	ld	r24, Z+
     fec:	7f 01       	movw	r14, r30
     fee:	85 32       	cpi	r24, 0x25	; 37
     ff0:	29 f4       	brne	.+10     	; 0xffc <vfprintf+0x56>
     ff2:	b6 01       	movw	r22, r12
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
     ffa:	e7 cf       	rjmp	.-50     	; 0xfca <vfprintf+0x24>
     ffc:	91 2c       	mov	r9, r1
     ffe:	21 2c       	mov	r2, r1
    1000:	31 2c       	mov	r3, r1
    1002:	ff e1       	ldi	r31, 0x1F	; 31
    1004:	f3 15       	cp	r31, r3
    1006:	d8 f0       	brcs	.+54     	; 0x103e <vfprintf+0x98>
    1008:	8b 32       	cpi	r24, 0x2B	; 43
    100a:	79 f0       	breq	.+30     	; 0x102a <vfprintf+0x84>
    100c:	38 f4       	brcc	.+14     	; 0x101c <vfprintf+0x76>
    100e:	80 32       	cpi	r24, 0x20	; 32
    1010:	79 f0       	breq	.+30     	; 0x1030 <vfprintf+0x8a>
    1012:	83 32       	cpi	r24, 0x23	; 35
    1014:	a1 f4       	brne	.+40     	; 0x103e <vfprintf+0x98>
    1016:	23 2d       	mov	r18, r3
    1018:	20 61       	ori	r18, 0x10	; 16
    101a:	1d c0       	rjmp	.+58     	; 0x1056 <vfprintf+0xb0>
    101c:	8d 32       	cpi	r24, 0x2D	; 45
    101e:	61 f0       	breq	.+24     	; 0x1038 <vfprintf+0x92>
    1020:	80 33       	cpi	r24, 0x30	; 48
    1022:	69 f4       	brne	.+26     	; 0x103e <vfprintf+0x98>
    1024:	23 2d       	mov	r18, r3
    1026:	21 60       	ori	r18, 0x01	; 1
    1028:	16 c0       	rjmp	.+44     	; 0x1056 <vfprintf+0xb0>
    102a:	83 2d       	mov	r24, r3
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	38 2e       	mov	r3, r24
    1030:	e3 2d       	mov	r30, r3
    1032:	e4 60       	ori	r30, 0x04	; 4
    1034:	3e 2e       	mov	r3, r30
    1036:	2a c0       	rjmp	.+84     	; 0x108c <vfprintf+0xe6>
    1038:	f3 2d       	mov	r31, r3
    103a:	f8 60       	ori	r31, 0x08	; 8
    103c:	1d c0       	rjmp	.+58     	; 0x1078 <vfprintf+0xd2>
    103e:	37 fc       	sbrc	r3, 7
    1040:	2d c0       	rjmp	.+90     	; 0x109c <vfprintf+0xf6>
    1042:	20 ed       	ldi	r18, 0xD0	; 208
    1044:	28 0f       	add	r18, r24
    1046:	2a 30       	cpi	r18, 0x0A	; 10
    1048:	40 f0       	brcs	.+16     	; 0x105a <vfprintf+0xb4>
    104a:	8e 32       	cpi	r24, 0x2E	; 46
    104c:	b9 f4       	brne	.+46     	; 0x107c <vfprintf+0xd6>
    104e:	36 fc       	sbrc	r3, 6
    1050:	81 c1       	rjmp	.+770    	; 0x1354 <vfprintf+0x3ae>
    1052:	23 2d       	mov	r18, r3
    1054:	20 64       	ori	r18, 0x40	; 64
    1056:	32 2e       	mov	r3, r18
    1058:	19 c0       	rjmp	.+50     	; 0x108c <vfprintf+0xe6>
    105a:	36 fe       	sbrs	r3, 6
    105c:	06 c0       	rjmp	.+12     	; 0x106a <vfprintf+0xc4>
    105e:	8a e0       	ldi	r24, 0x0A	; 10
    1060:	98 9e       	mul	r9, r24
    1062:	20 0d       	add	r18, r0
    1064:	11 24       	eor	r1, r1
    1066:	92 2e       	mov	r9, r18
    1068:	11 c0       	rjmp	.+34     	; 0x108c <vfprintf+0xe6>
    106a:	ea e0       	ldi	r30, 0x0A	; 10
    106c:	2e 9e       	mul	r2, r30
    106e:	20 0d       	add	r18, r0
    1070:	11 24       	eor	r1, r1
    1072:	22 2e       	mov	r2, r18
    1074:	f3 2d       	mov	r31, r3
    1076:	f0 62       	ori	r31, 0x20	; 32
    1078:	3f 2e       	mov	r3, r31
    107a:	08 c0       	rjmp	.+16     	; 0x108c <vfprintf+0xe6>
    107c:	8c 36       	cpi	r24, 0x6C	; 108
    107e:	21 f4       	brne	.+8      	; 0x1088 <vfprintf+0xe2>
    1080:	83 2d       	mov	r24, r3
    1082:	80 68       	ori	r24, 0x80	; 128
    1084:	38 2e       	mov	r3, r24
    1086:	02 c0       	rjmp	.+4      	; 0x108c <vfprintf+0xe6>
    1088:	88 36       	cpi	r24, 0x68	; 104
    108a:	41 f4       	brne	.+16     	; 0x109c <vfprintf+0xf6>
    108c:	f7 01       	movw	r30, r14
    108e:	93 fd       	sbrc	r25, 3
    1090:	85 91       	lpm	r24, Z+
    1092:	93 ff       	sbrs	r25, 3
    1094:	81 91       	ld	r24, Z+
    1096:	7f 01       	movw	r14, r30
    1098:	81 11       	cpse	r24, r1
    109a:	b3 cf       	rjmp	.-154    	; 0x1002 <vfprintf+0x5c>
    109c:	98 2f       	mov	r25, r24
    109e:	9f 7d       	andi	r25, 0xDF	; 223
    10a0:	95 54       	subi	r25, 0x45	; 69
    10a2:	93 30       	cpi	r25, 0x03	; 3
    10a4:	28 f4       	brcc	.+10     	; 0x10b0 <vfprintf+0x10a>
    10a6:	0c 5f       	subi	r16, 0xFC	; 252
    10a8:	1f 4f       	sbci	r17, 0xFF	; 255
    10aa:	9f e3       	ldi	r25, 0x3F	; 63
    10ac:	99 83       	std	Y+1, r25	; 0x01
    10ae:	0d c0       	rjmp	.+26     	; 0x10ca <vfprintf+0x124>
    10b0:	83 36       	cpi	r24, 0x63	; 99
    10b2:	31 f0       	breq	.+12     	; 0x10c0 <vfprintf+0x11a>
    10b4:	83 37       	cpi	r24, 0x73	; 115
    10b6:	71 f0       	breq	.+28     	; 0x10d4 <vfprintf+0x12e>
    10b8:	83 35       	cpi	r24, 0x53	; 83
    10ba:	09 f0       	breq	.+2      	; 0x10be <vfprintf+0x118>
    10bc:	59 c0       	rjmp	.+178    	; 0x1170 <vfprintf+0x1ca>
    10be:	21 c0       	rjmp	.+66     	; 0x1102 <vfprintf+0x15c>
    10c0:	f8 01       	movw	r30, r16
    10c2:	80 81       	ld	r24, Z
    10c4:	89 83       	std	Y+1, r24	; 0x01
    10c6:	0e 5f       	subi	r16, 0xFE	; 254
    10c8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ca:	88 24       	eor	r8, r8
    10cc:	83 94       	inc	r8
    10ce:	91 2c       	mov	r9, r1
    10d0:	53 01       	movw	r10, r6
    10d2:	13 c0       	rjmp	.+38     	; 0x10fa <vfprintf+0x154>
    10d4:	28 01       	movw	r4, r16
    10d6:	f2 e0       	ldi	r31, 0x02	; 2
    10d8:	4f 0e       	add	r4, r31
    10da:	51 1c       	adc	r5, r1
    10dc:	f8 01       	movw	r30, r16
    10de:	a0 80       	ld	r10, Z
    10e0:	b1 80       	ldd	r11, Z+1	; 0x01
    10e2:	36 fe       	sbrs	r3, 6
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <vfprintf+0x146>
    10e6:	69 2d       	mov	r22, r9
    10e8:	70 e0       	ldi	r23, 0x00	; 0
    10ea:	02 c0       	rjmp	.+4      	; 0x10f0 <vfprintf+0x14a>
    10ec:	6f ef       	ldi	r22, 0xFF	; 255
    10ee:	7f ef       	ldi	r23, 0xFF	; 255
    10f0:	c5 01       	movw	r24, r10
    10f2:	0e 94 bf 09 	call	0x137e	; 0x137e <strnlen>
    10f6:	4c 01       	movw	r8, r24
    10f8:	82 01       	movw	r16, r4
    10fa:	f3 2d       	mov	r31, r3
    10fc:	ff 77       	andi	r31, 0x7F	; 127
    10fe:	3f 2e       	mov	r3, r31
    1100:	16 c0       	rjmp	.+44     	; 0x112e <vfprintf+0x188>
    1102:	28 01       	movw	r4, r16
    1104:	22 e0       	ldi	r18, 0x02	; 2
    1106:	42 0e       	add	r4, r18
    1108:	51 1c       	adc	r5, r1
    110a:	f8 01       	movw	r30, r16
    110c:	a0 80       	ld	r10, Z
    110e:	b1 80       	ldd	r11, Z+1	; 0x01
    1110:	36 fe       	sbrs	r3, 6
    1112:	03 c0       	rjmp	.+6      	; 0x111a <vfprintf+0x174>
    1114:	69 2d       	mov	r22, r9
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	02 c0       	rjmp	.+4      	; 0x111e <vfprintf+0x178>
    111a:	6f ef       	ldi	r22, 0xFF	; 255
    111c:	7f ef       	ldi	r23, 0xFF	; 255
    111e:	c5 01       	movw	r24, r10
    1120:	0e 94 b4 09 	call	0x1368	; 0x1368 <strnlen_P>
    1124:	4c 01       	movw	r8, r24
    1126:	f3 2d       	mov	r31, r3
    1128:	f0 68       	ori	r31, 0x80	; 128
    112a:	3f 2e       	mov	r3, r31
    112c:	82 01       	movw	r16, r4
    112e:	33 fc       	sbrc	r3, 3
    1130:	1b c0       	rjmp	.+54     	; 0x1168 <vfprintf+0x1c2>
    1132:	82 2d       	mov	r24, r2
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	88 16       	cp	r8, r24
    1138:	99 06       	cpc	r9, r25
    113a:	b0 f4       	brcc	.+44     	; 0x1168 <vfprintf+0x1c2>
    113c:	b6 01       	movw	r22, r12
    113e:	80 e2       	ldi	r24, 0x20	; 32
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1146:	2a 94       	dec	r2
    1148:	f4 cf       	rjmp	.-24     	; 0x1132 <vfprintf+0x18c>
    114a:	f5 01       	movw	r30, r10
    114c:	37 fc       	sbrc	r3, 7
    114e:	85 91       	lpm	r24, Z+
    1150:	37 fe       	sbrs	r3, 7
    1152:	81 91       	ld	r24, Z+
    1154:	5f 01       	movw	r10, r30
    1156:	b6 01       	movw	r22, r12
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    115e:	21 10       	cpse	r2, r1
    1160:	2a 94       	dec	r2
    1162:	21 e0       	ldi	r18, 0x01	; 1
    1164:	82 1a       	sub	r8, r18
    1166:	91 08       	sbc	r9, r1
    1168:	81 14       	cp	r8, r1
    116a:	91 04       	cpc	r9, r1
    116c:	71 f7       	brne	.-36     	; 0x114a <vfprintf+0x1a4>
    116e:	e8 c0       	rjmp	.+464    	; 0x1340 <vfprintf+0x39a>
    1170:	84 36       	cpi	r24, 0x64	; 100
    1172:	11 f0       	breq	.+4      	; 0x1178 <vfprintf+0x1d2>
    1174:	89 36       	cpi	r24, 0x69	; 105
    1176:	41 f5       	brne	.+80     	; 0x11c8 <vfprintf+0x222>
    1178:	f8 01       	movw	r30, r16
    117a:	37 fe       	sbrs	r3, 7
    117c:	07 c0       	rjmp	.+14     	; 0x118c <vfprintf+0x1e6>
    117e:	60 81       	ld	r22, Z
    1180:	71 81       	ldd	r23, Z+1	; 0x01
    1182:	82 81       	ldd	r24, Z+2	; 0x02
    1184:	93 81       	ldd	r25, Z+3	; 0x03
    1186:	0c 5f       	subi	r16, 0xFC	; 252
    1188:	1f 4f       	sbci	r17, 0xFF	; 255
    118a:	08 c0       	rjmp	.+16     	; 0x119c <vfprintf+0x1f6>
    118c:	60 81       	ld	r22, Z
    118e:	71 81       	ldd	r23, Z+1	; 0x01
    1190:	07 2e       	mov	r0, r23
    1192:	00 0c       	add	r0, r0
    1194:	88 0b       	sbc	r24, r24
    1196:	99 0b       	sbc	r25, r25
    1198:	0e 5f       	subi	r16, 0xFE	; 254
    119a:	1f 4f       	sbci	r17, 0xFF	; 255
    119c:	f3 2d       	mov	r31, r3
    119e:	ff 76       	andi	r31, 0x6F	; 111
    11a0:	3f 2e       	mov	r3, r31
    11a2:	97 ff       	sbrs	r25, 7
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <vfprintf+0x212>
    11a6:	90 95       	com	r25
    11a8:	80 95       	com	r24
    11aa:	70 95       	com	r23
    11ac:	61 95       	neg	r22
    11ae:	7f 4f       	sbci	r23, 0xFF	; 255
    11b0:	8f 4f       	sbci	r24, 0xFF	; 255
    11b2:	9f 4f       	sbci	r25, 0xFF	; 255
    11b4:	f0 68       	ori	r31, 0x80	; 128
    11b6:	3f 2e       	mov	r3, r31
    11b8:	2a e0       	ldi	r18, 0x0A	; 10
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	a3 01       	movw	r20, r6
    11be:	0e 94 06 0a 	call	0x140c	; 0x140c <__ultoa_invert>
    11c2:	88 2e       	mov	r8, r24
    11c4:	86 18       	sub	r8, r6
    11c6:	45 c0       	rjmp	.+138    	; 0x1252 <vfprintf+0x2ac>
    11c8:	85 37       	cpi	r24, 0x75	; 117
    11ca:	31 f4       	brne	.+12     	; 0x11d8 <vfprintf+0x232>
    11cc:	23 2d       	mov	r18, r3
    11ce:	2f 7e       	andi	r18, 0xEF	; 239
    11d0:	b2 2e       	mov	r11, r18
    11d2:	2a e0       	ldi	r18, 0x0A	; 10
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	25 c0       	rjmp	.+74     	; 0x1222 <vfprintf+0x27c>
    11d8:	93 2d       	mov	r25, r3
    11da:	99 7f       	andi	r25, 0xF9	; 249
    11dc:	b9 2e       	mov	r11, r25
    11de:	8f 36       	cpi	r24, 0x6F	; 111
    11e0:	c1 f0       	breq	.+48     	; 0x1212 <vfprintf+0x26c>
    11e2:	18 f4       	brcc	.+6      	; 0x11ea <vfprintf+0x244>
    11e4:	88 35       	cpi	r24, 0x58	; 88
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0x260>
    11e8:	b5 c0       	rjmp	.+362    	; 0x1354 <vfprintf+0x3ae>
    11ea:	80 37       	cpi	r24, 0x70	; 112
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <vfprintf+0x24e>
    11ee:	88 37       	cpi	r24, 0x78	; 120
    11f0:	21 f0       	breq	.+8      	; 0x11fa <vfprintf+0x254>
    11f2:	b0 c0       	rjmp	.+352    	; 0x1354 <vfprintf+0x3ae>
    11f4:	e9 2f       	mov	r30, r25
    11f6:	e0 61       	ori	r30, 0x10	; 16
    11f8:	be 2e       	mov	r11, r30
    11fa:	b4 fe       	sbrs	r11, 4
    11fc:	0d c0       	rjmp	.+26     	; 0x1218 <vfprintf+0x272>
    11fe:	fb 2d       	mov	r31, r11
    1200:	f4 60       	ori	r31, 0x04	; 4
    1202:	bf 2e       	mov	r11, r31
    1204:	09 c0       	rjmp	.+18     	; 0x1218 <vfprintf+0x272>
    1206:	34 fe       	sbrs	r3, 4
    1208:	0a c0       	rjmp	.+20     	; 0x121e <vfprintf+0x278>
    120a:	29 2f       	mov	r18, r25
    120c:	26 60       	ori	r18, 0x06	; 6
    120e:	b2 2e       	mov	r11, r18
    1210:	06 c0       	rjmp	.+12     	; 0x121e <vfprintf+0x278>
    1212:	28 e0       	ldi	r18, 0x08	; 8
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	05 c0       	rjmp	.+10     	; 0x1222 <vfprintf+0x27c>
    1218:	20 e1       	ldi	r18, 0x10	; 16
    121a:	30 e0       	ldi	r19, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <vfprintf+0x27c>
    121e:	20 e1       	ldi	r18, 0x10	; 16
    1220:	32 e0       	ldi	r19, 0x02	; 2
    1222:	f8 01       	movw	r30, r16
    1224:	b7 fe       	sbrs	r11, 7
    1226:	07 c0       	rjmp	.+14     	; 0x1236 <vfprintf+0x290>
    1228:	60 81       	ld	r22, Z
    122a:	71 81       	ldd	r23, Z+1	; 0x01
    122c:	82 81       	ldd	r24, Z+2	; 0x02
    122e:	93 81       	ldd	r25, Z+3	; 0x03
    1230:	0c 5f       	subi	r16, 0xFC	; 252
    1232:	1f 4f       	sbci	r17, 0xFF	; 255
    1234:	06 c0       	rjmp	.+12     	; 0x1242 <vfprintf+0x29c>
    1236:	60 81       	ld	r22, Z
    1238:	71 81       	ldd	r23, Z+1	; 0x01
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 5f       	subi	r16, 0xFE	; 254
    1240:	1f 4f       	sbci	r17, 0xFF	; 255
    1242:	a3 01       	movw	r20, r6
    1244:	0e 94 06 0a 	call	0x140c	; 0x140c <__ultoa_invert>
    1248:	88 2e       	mov	r8, r24
    124a:	86 18       	sub	r8, r6
    124c:	fb 2d       	mov	r31, r11
    124e:	ff 77       	andi	r31, 0x7F	; 127
    1250:	3f 2e       	mov	r3, r31
    1252:	36 fe       	sbrs	r3, 6
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <vfprintf+0x2ca>
    1256:	23 2d       	mov	r18, r3
    1258:	2e 7f       	andi	r18, 0xFE	; 254
    125a:	a2 2e       	mov	r10, r18
    125c:	89 14       	cp	r8, r9
    125e:	58 f4       	brcc	.+22     	; 0x1276 <vfprintf+0x2d0>
    1260:	34 fe       	sbrs	r3, 4
    1262:	0b c0       	rjmp	.+22     	; 0x127a <vfprintf+0x2d4>
    1264:	32 fc       	sbrc	r3, 2
    1266:	09 c0       	rjmp	.+18     	; 0x127a <vfprintf+0x2d4>
    1268:	83 2d       	mov	r24, r3
    126a:	8e 7e       	andi	r24, 0xEE	; 238
    126c:	a8 2e       	mov	r10, r24
    126e:	05 c0       	rjmp	.+10     	; 0x127a <vfprintf+0x2d4>
    1270:	b8 2c       	mov	r11, r8
    1272:	a3 2c       	mov	r10, r3
    1274:	03 c0       	rjmp	.+6      	; 0x127c <vfprintf+0x2d6>
    1276:	b8 2c       	mov	r11, r8
    1278:	01 c0       	rjmp	.+2      	; 0x127c <vfprintf+0x2d6>
    127a:	b9 2c       	mov	r11, r9
    127c:	a4 fe       	sbrs	r10, 4
    127e:	0f c0       	rjmp	.+30     	; 0x129e <vfprintf+0x2f8>
    1280:	fe 01       	movw	r30, r28
    1282:	e8 0d       	add	r30, r8
    1284:	f1 1d       	adc	r31, r1
    1286:	80 81       	ld	r24, Z
    1288:	80 33       	cpi	r24, 0x30	; 48
    128a:	21 f4       	brne	.+8      	; 0x1294 <vfprintf+0x2ee>
    128c:	9a 2d       	mov	r25, r10
    128e:	99 7e       	andi	r25, 0xE9	; 233
    1290:	a9 2e       	mov	r10, r25
    1292:	09 c0       	rjmp	.+18     	; 0x12a6 <vfprintf+0x300>
    1294:	a2 fe       	sbrs	r10, 2
    1296:	06 c0       	rjmp	.+12     	; 0x12a4 <vfprintf+0x2fe>
    1298:	b3 94       	inc	r11
    129a:	b3 94       	inc	r11
    129c:	04 c0       	rjmp	.+8      	; 0x12a6 <vfprintf+0x300>
    129e:	8a 2d       	mov	r24, r10
    12a0:	86 78       	andi	r24, 0x86	; 134
    12a2:	09 f0       	breq	.+2      	; 0x12a6 <vfprintf+0x300>
    12a4:	b3 94       	inc	r11
    12a6:	a3 fc       	sbrc	r10, 3
    12a8:	11 c0       	rjmp	.+34     	; 0x12cc <vfprintf+0x326>
    12aa:	a0 fe       	sbrs	r10, 0
    12ac:	06 c0       	rjmp	.+12     	; 0x12ba <vfprintf+0x314>
    12ae:	b2 14       	cp	r11, r2
    12b0:	88 f4       	brcc	.+34     	; 0x12d4 <vfprintf+0x32e>
    12b2:	28 0c       	add	r2, r8
    12b4:	92 2c       	mov	r9, r2
    12b6:	9b 18       	sub	r9, r11
    12b8:	0e c0       	rjmp	.+28     	; 0x12d6 <vfprintf+0x330>
    12ba:	b2 14       	cp	r11, r2
    12bc:	60 f4       	brcc	.+24     	; 0x12d6 <vfprintf+0x330>
    12be:	b6 01       	movw	r22, r12
    12c0:	80 e2       	ldi	r24, 0x20	; 32
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    12c8:	b3 94       	inc	r11
    12ca:	f7 cf       	rjmp	.-18     	; 0x12ba <vfprintf+0x314>
    12cc:	b2 14       	cp	r11, r2
    12ce:	18 f4       	brcc	.+6      	; 0x12d6 <vfprintf+0x330>
    12d0:	2b 18       	sub	r2, r11
    12d2:	02 c0       	rjmp	.+4      	; 0x12d8 <vfprintf+0x332>
    12d4:	98 2c       	mov	r9, r8
    12d6:	21 2c       	mov	r2, r1
    12d8:	a4 fe       	sbrs	r10, 4
    12da:	10 c0       	rjmp	.+32     	; 0x12fc <vfprintf+0x356>
    12dc:	b6 01       	movw	r22, r12
    12de:	80 e3       	ldi	r24, 0x30	; 48
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    12e6:	a2 fe       	sbrs	r10, 2
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <vfprintf+0x372>
    12ea:	a1 fc       	sbrc	r10, 1
    12ec:	03 c0       	rjmp	.+6      	; 0x12f4 <vfprintf+0x34e>
    12ee:	88 e7       	ldi	r24, 0x78	; 120
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	02 c0       	rjmp	.+4      	; 0x12f8 <vfprintf+0x352>
    12f4:	88 e5       	ldi	r24, 0x58	; 88
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	b6 01       	movw	r22, r12
    12fa:	0c c0       	rjmp	.+24     	; 0x1314 <vfprintf+0x36e>
    12fc:	8a 2d       	mov	r24, r10
    12fe:	86 78       	andi	r24, 0x86	; 134
    1300:	59 f0       	breq	.+22     	; 0x1318 <vfprintf+0x372>
    1302:	a1 fe       	sbrs	r10, 1
    1304:	02 c0       	rjmp	.+4      	; 0x130a <vfprintf+0x364>
    1306:	8b e2       	ldi	r24, 0x2B	; 43
    1308:	01 c0       	rjmp	.+2      	; 0x130c <vfprintf+0x366>
    130a:	80 e2       	ldi	r24, 0x20	; 32
    130c:	a7 fc       	sbrc	r10, 7
    130e:	8d e2       	ldi	r24, 0x2D	; 45
    1310:	b6 01       	movw	r22, r12
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1318:	89 14       	cp	r8, r9
    131a:	38 f4       	brcc	.+14     	; 0x132a <vfprintf+0x384>
    131c:	b6 01       	movw	r22, r12
    131e:	80 e3       	ldi	r24, 0x30	; 48
    1320:	90 e0       	ldi	r25, 0x00	; 0
    1322:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1326:	9a 94       	dec	r9
    1328:	f7 cf       	rjmp	.-18     	; 0x1318 <vfprintf+0x372>
    132a:	8a 94       	dec	r8
    132c:	f3 01       	movw	r30, r6
    132e:	e8 0d       	add	r30, r8
    1330:	f1 1d       	adc	r31, r1
    1332:	80 81       	ld	r24, Z
    1334:	b6 01       	movw	r22, r12
    1336:	90 e0       	ldi	r25, 0x00	; 0
    1338:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    133c:	81 10       	cpse	r8, r1
    133e:	f5 cf       	rjmp	.-22     	; 0x132a <vfprintf+0x384>
    1340:	22 20       	and	r2, r2
    1342:	09 f4       	brne	.+2      	; 0x1346 <vfprintf+0x3a0>
    1344:	42 ce       	rjmp	.-892    	; 0xfca <vfprintf+0x24>
    1346:	b6 01       	movw	r22, r12
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	0e 94 ca 09 	call	0x1394	; 0x1394 <fputc>
    1350:	2a 94       	dec	r2
    1352:	f6 cf       	rjmp	.-20     	; 0x1340 <vfprintf+0x39a>
    1354:	f6 01       	movw	r30, r12
    1356:	86 81       	ldd	r24, Z+6	; 0x06
    1358:	97 81       	ldd	r25, Z+7	; 0x07
    135a:	02 c0       	rjmp	.+4      	; 0x1360 <vfprintf+0x3ba>
    135c:	8f ef       	ldi	r24, 0xFF	; 255
    135e:	9f ef       	ldi	r25, 0xFF	; 255
    1360:	2b 96       	adiw	r28, 0x0b	; 11
    1362:	e2 e1       	ldi	r30, 0x12	; 18
    1364:	0c 94 80 0a 	jmp	0x1500	; 0x1500 <__epilogue_restores__>

00001368 <strnlen_P>:
    1368:	fc 01       	movw	r30, r24
    136a:	05 90       	lpm	r0, Z+
    136c:	61 50       	subi	r22, 0x01	; 1
    136e:	70 40       	sbci	r23, 0x00	; 0
    1370:	01 10       	cpse	r0, r1
    1372:	d8 f7       	brcc	.-10     	; 0x136a <strnlen_P+0x2>
    1374:	80 95       	com	r24
    1376:	90 95       	com	r25
    1378:	8e 0f       	add	r24, r30
    137a:	9f 1f       	adc	r25, r31
    137c:	08 95       	ret

0000137e <strnlen>:
    137e:	fc 01       	movw	r30, r24
    1380:	61 50       	subi	r22, 0x01	; 1
    1382:	70 40       	sbci	r23, 0x00	; 0
    1384:	01 90       	ld	r0, Z+
    1386:	01 10       	cpse	r0, r1
    1388:	d8 f7       	brcc	.-10     	; 0x1380 <strnlen+0x2>
    138a:	80 95       	com	r24
    138c:	90 95       	com	r25
    138e:	8e 0f       	add	r24, r30
    1390:	9f 1f       	adc	r25, r31
    1392:	08 95       	ret

00001394 <fputc>:
    1394:	0f 93       	push	r16
    1396:	1f 93       	push	r17
    1398:	cf 93       	push	r28
    139a:	df 93       	push	r29
    139c:	fb 01       	movw	r30, r22
    139e:	23 81       	ldd	r18, Z+3	; 0x03
    13a0:	21 fd       	sbrc	r18, 1
    13a2:	03 c0       	rjmp	.+6      	; 0x13aa <fputc+0x16>
    13a4:	8f ef       	ldi	r24, 0xFF	; 255
    13a6:	9f ef       	ldi	r25, 0xFF	; 255
    13a8:	2c c0       	rjmp	.+88     	; 0x1402 <fputc+0x6e>
    13aa:	22 ff       	sbrs	r18, 2
    13ac:	16 c0       	rjmp	.+44     	; 0x13da <fputc+0x46>
    13ae:	46 81       	ldd	r20, Z+6	; 0x06
    13b0:	57 81       	ldd	r21, Z+7	; 0x07
    13b2:	24 81       	ldd	r18, Z+4	; 0x04
    13b4:	35 81       	ldd	r19, Z+5	; 0x05
    13b6:	42 17       	cp	r20, r18
    13b8:	53 07       	cpc	r21, r19
    13ba:	44 f4       	brge	.+16     	; 0x13cc <fputc+0x38>
    13bc:	a0 81       	ld	r26, Z
    13be:	b1 81       	ldd	r27, Z+1	; 0x01
    13c0:	9d 01       	movw	r18, r26
    13c2:	2f 5f       	subi	r18, 0xFF	; 255
    13c4:	3f 4f       	sbci	r19, 0xFF	; 255
    13c6:	31 83       	std	Z+1, r19	; 0x01
    13c8:	20 83       	st	Z, r18
    13ca:	8c 93       	st	X, r24
    13cc:	26 81       	ldd	r18, Z+6	; 0x06
    13ce:	37 81       	ldd	r19, Z+7	; 0x07
    13d0:	2f 5f       	subi	r18, 0xFF	; 255
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	37 83       	std	Z+7, r19	; 0x07
    13d6:	26 83       	std	Z+6, r18	; 0x06
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <fputc+0x6e>
    13da:	8b 01       	movw	r16, r22
    13dc:	ec 01       	movw	r28, r24
    13de:	fb 01       	movw	r30, r22
    13e0:	00 84       	ldd	r0, Z+8	; 0x08
    13e2:	f1 85       	ldd	r31, Z+9	; 0x09
    13e4:	e0 2d       	mov	r30, r0
    13e6:	09 95       	icall
    13e8:	89 2b       	or	r24, r25
    13ea:	e1 f6       	brne	.-72     	; 0x13a4 <fputc+0x10>
    13ec:	d8 01       	movw	r26, r16
    13ee:	16 96       	adiw	r26, 0x06	; 6
    13f0:	8d 91       	ld	r24, X+
    13f2:	9c 91       	ld	r25, X
    13f4:	17 97       	sbiw	r26, 0x07	; 7
    13f6:	01 96       	adiw	r24, 0x01	; 1
    13f8:	17 96       	adiw	r26, 0x07	; 7
    13fa:	9c 93       	st	X, r25
    13fc:	8e 93       	st	-X, r24
    13fe:	16 97       	sbiw	r26, 0x06	; 6
    1400:	ce 01       	movw	r24, r28
    1402:	df 91       	pop	r29
    1404:	cf 91       	pop	r28
    1406:	1f 91       	pop	r17
    1408:	0f 91       	pop	r16
    140a:	08 95       	ret

0000140c <__ultoa_invert>:
    140c:	fa 01       	movw	r30, r20
    140e:	aa 27       	eor	r26, r26
    1410:	28 30       	cpi	r18, 0x08	; 8
    1412:	51 f1       	breq	.+84     	; 0x1468 <__ultoa_invert+0x5c>
    1414:	20 31       	cpi	r18, 0x10	; 16
    1416:	81 f1       	breq	.+96     	; 0x1478 <__ultoa_invert+0x6c>
    1418:	e8 94       	clt
    141a:	6f 93       	push	r22
    141c:	6e 7f       	andi	r22, 0xFE	; 254
    141e:	6e 5f       	subi	r22, 0xFE	; 254
    1420:	7f 4f       	sbci	r23, 0xFF	; 255
    1422:	8f 4f       	sbci	r24, 0xFF	; 255
    1424:	9f 4f       	sbci	r25, 0xFF	; 255
    1426:	af 4f       	sbci	r26, 0xFF	; 255
    1428:	b1 e0       	ldi	r27, 0x01	; 1
    142a:	3e d0       	rcall	.+124    	; 0x14a8 <__ultoa_invert+0x9c>
    142c:	b4 e0       	ldi	r27, 0x04	; 4
    142e:	3c d0       	rcall	.+120    	; 0x14a8 <__ultoa_invert+0x9c>
    1430:	67 0f       	add	r22, r23
    1432:	78 1f       	adc	r23, r24
    1434:	89 1f       	adc	r24, r25
    1436:	9a 1f       	adc	r25, r26
    1438:	a1 1d       	adc	r26, r1
    143a:	68 0f       	add	r22, r24
    143c:	79 1f       	adc	r23, r25
    143e:	8a 1f       	adc	r24, r26
    1440:	91 1d       	adc	r25, r1
    1442:	a1 1d       	adc	r26, r1
    1444:	6a 0f       	add	r22, r26
    1446:	71 1d       	adc	r23, r1
    1448:	81 1d       	adc	r24, r1
    144a:	91 1d       	adc	r25, r1
    144c:	a1 1d       	adc	r26, r1
    144e:	20 d0       	rcall	.+64     	; 0x1490 <__ultoa_invert+0x84>
    1450:	09 f4       	brne	.+2      	; 0x1454 <__ultoa_invert+0x48>
    1452:	68 94       	set
    1454:	3f 91       	pop	r19
    1456:	2a e0       	ldi	r18, 0x0A	; 10
    1458:	26 9f       	mul	r18, r22
    145a:	11 24       	eor	r1, r1
    145c:	30 19       	sub	r19, r0
    145e:	30 5d       	subi	r19, 0xD0	; 208
    1460:	31 93       	st	Z+, r19
    1462:	de f6       	brtc	.-74     	; 0x141a <__ultoa_invert+0xe>
    1464:	cf 01       	movw	r24, r30
    1466:	08 95       	ret
    1468:	46 2f       	mov	r20, r22
    146a:	47 70       	andi	r20, 0x07	; 7
    146c:	40 5d       	subi	r20, 0xD0	; 208
    146e:	41 93       	st	Z+, r20
    1470:	b3 e0       	ldi	r27, 0x03	; 3
    1472:	0f d0       	rcall	.+30     	; 0x1492 <__ultoa_invert+0x86>
    1474:	c9 f7       	brne	.-14     	; 0x1468 <__ultoa_invert+0x5c>
    1476:	f6 cf       	rjmp	.-20     	; 0x1464 <__ultoa_invert+0x58>
    1478:	46 2f       	mov	r20, r22
    147a:	4f 70       	andi	r20, 0x0F	; 15
    147c:	40 5d       	subi	r20, 0xD0	; 208
    147e:	4a 33       	cpi	r20, 0x3A	; 58
    1480:	18 f0       	brcs	.+6      	; 0x1488 <__ultoa_invert+0x7c>
    1482:	49 5d       	subi	r20, 0xD9	; 217
    1484:	31 fd       	sbrc	r19, 1
    1486:	40 52       	subi	r20, 0x20	; 32
    1488:	41 93       	st	Z+, r20
    148a:	02 d0       	rcall	.+4      	; 0x1490 <__ultoa_invert+0x84>
    148c:	a9 f7       	brne	.-22     	; 0x1478 <__ultoa_invert+0x6c>
    148e:	ea cf       	rjmp	.-44     	; 0x1464 <__ultoa_invert+0x58>
    1490:	b4 e0       	ldi	r27, 0x04	; 4
    1492:	a6 95       	lsr	r26
    1494:	97 95       	ror	r25
    1496:	87 95       	ror	r24
    1498:	77 95       	ror	r23
    149a:	67 95       	ror	r22
    149c:	ba 95       	dec	r27
    149e:	c9 f7       	brne	.-14     	; 0x1492 <__ultoa_invert+0x86>
    14a0:	00 97       	sbiw	r24, 0x00	; 0
    14a2:	61 05       	cpc	r22, r1
    14a4:	71 05       	cpc	r23, r1
    14a6:	08 95       	ret
    14a8:	9b 01       	movw	r18, r22
    14aa:	ac 01       	movw	r20, r24
    14ac:	0a 2e       	mov	r0, r26
    14ae:	06 94       	lsr	r0
    14b0:	57 95       	ror	r21
    14b2:	47 95       	ror	r20
    14b4:	37 95       	ror	r19
    14b6:	27 95       	ror	r18
    14b8:	ba 95       	dec	r27
    14ba:	c9 f7       	brne	.-14     	; 0x14ae <__ultoa_invert+0xa2>
    14bc:	62 0f       	add	r22, r18
    14be:	73 1f       	adc	r23, r19
    14c0:	84 1f       	adc	r24, r20
    14c2:	95 1f       	adc	r25, r21
    14c4:	a0 1d       	adc	r26, r0
    14c6:	08 95       	ret

000014c8 <__prologue_saves__>:
    14c8:	2f 92       	push	r2
    14ca:	3f 92       	push	r3
    14cc:	4f 92       	push	r4
    14ce:	5f 92       	push	r5
    14d0:	6f 92       	push	r6
    14d2:	7f 92       	push	r7
    14d4:	8f 92       	push	r8
    14d6:	9f 92       	push	r9
    14d8:	af 92       	push	r10
    14da:	bf 92       	push	r11
    14dc:	cf 92       	push	r12
    14de:	df 92       	push	r13
    14e0:	ef 92       	push	r14
    14e2:	ff 92       	push	r15
    14e4:	0f 93       	push	r16
    14e6:	1f 93       	push	r17
    14e8:	cf 93       	push	r28
    14ea:	df 93       	push	r29
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	ca 1b       	sub	r28, r26
    14f2:	db 0b       	sbc	r29, r27
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	09 94       	ijmp

00001500 <__epilogue_restores__>:
    1500:	2a 88       	ldd	r2, Y+18	; 0x12
    1502:	39 88       	ldd	r3, Y+17	; 0x11
    1504:	48 88       	ldd	r4, Y+16	; 0x10
    1506:	5f 84       	ldd	r5, Y+15	; 0x0f
    1508:	6e 84       	ldd	r6, Y+14	; 0x0e
    150a:	7d 84       	ldd	r7, Y+13	; 0x0d
    150c:	8c 84       	ldd	r8, Y+12	; 0x0c
    150e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1510:	aa 84       	ldd	r10, Y+10	; 0x0a
    1512:	b9 84       	ldd	r11, Y+9	; 0x09
    1514:	c8 84       	ldd	r12, Y+8	; 0x08
    1516:	df 80       	ldd	r13, Y+7	; 0x07
    1518:	ee 80       	ldd	r14, Y+6	; 0x06
    151a:	fd 80       	ldd	r15, Y+5	; 0x05
    151c:	0c 81       	ldd	r16, Y+4	; 0x04
    151e:	1b 81       	ldd	r17, Y+3	; 0x03
    1520:	aa 81       	ldd	r26, Y+2	; 0x02
    1522:	b9 81       	ldd	r27, Y+1	; 0x01
    1524:	ce 0f       	add	r28, r30
    1526:	d1 1d       	adc	r29, r1
    1528:	0f b6       	in	r0, 0x3f	; 63
    152a:	f8 94       	cli
    152c:	de bf       	out	0x3e, r29	; 62
    152e:	0f be       	out	0x3f, r0	; 63
    1530:	cd bf       	out	0x3d, r28	; 61
    1532:	ed 01       	movw	r28, r26
    1534:	08 95       	ret

00001536 <_exit>:
    1536:	f8 94       	cli

00001538 <__stop_program>:
    1538:	ff cf       	rjmp	.-2      	; 0x1538 <__stop_program>
