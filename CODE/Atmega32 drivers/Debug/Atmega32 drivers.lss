
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000062  00800060  000011de  00001272  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  008000c2  008000c2  000012d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001330  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002b0  00000000  00000000  0000136c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003f07  00000000  00000000  0000161c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000115f  00000000  00000000  00005523  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015c2  00000000  00000000  00006682  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000638  00000000  00000000  00007c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000940  00000000  00000000  0000827c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000017c5  00000000  00000000  00008bbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000210  00000000  00000000  0000a381  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 32       	cpi	r26, 0x2D	; 45
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 ed 08 	jmp	0x11da	; 0x11da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#ifndef INCLUDES_H_
#error define includes.h file
#endif

int main(){
	Project_Init();
      92:	0e 94 f5 04 	call	0x9ea	; 0x9ea <Project_Init>
	sei();
      96:	78 94       	sei
	u8 password[5]={0};
	turnOnFireAlarm();	
      98:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <turnOnFireAlarm>
	while(1)
	{
		//Get_Password(password);
		AnalogSensors();
      9c:	0e 94 57 05 	call	0xaae	; 0xaae <AnalogSensors>
      a0:	fd cf       	rjmp	.-6      	; 0x9c <main+0xa>

000000a2 <__vector_1>:
	}
}


ISR(INT0_vect)
{
      a2:	1f 92       	push	r1
      a4:	0f 92       	push	r0
      a6:	0f b6       	in	r0, 0x3f	; 63
      a8:	0f 92       	push	r0
      aa:	11 24       	eor	r1, r1
      ac:	2f 93       	push	r18
      ae:	3f 93       	push	r19
      b0:	4f 93       	push	r20
      b2:	5f 93       	push	r21
      b4:	6f 93       	push	r22
      b6:	7f 93       	push	r23
      b8:	8f 93       	push	r24
      ba:	9f 93       	push	r25
      bc:	af 93       	push	r26
      be:	bf 93       	push	r27
      c0:	ef 93       	push	r30
      c2:	ff 93       	push	r31
	ptrINT();
      c4:	e0 91 c2 00 	lds	r30, 0x00C2	; 0x8000c2 <__data_end>
      c8:	f0 91 c3 00 	lds	r31, 0x00C3	; 0x8000c3 <__data_end+0x1>
      cc:	09 95       	icall
}
      ce:	ff 91       	pop	r31
      d0:	ef 91       	pop	r30
      d2:	bf 91       	pop	r27
      d4:	af 91       	pop	r26
      d6:	9f 91       	pop	r25
      d8:	8f 91       	pop	r24
      da:	7f 91       	pop	r23
      dc:	6f 91       	pop	r22
      de:	5f 91       	pop	r21
      e0:	4f 91       	pop	r20
      e2:	3f 91       	pop	r19
      e4:	2f 91       	pop	r18
      e6:	0f 90       	pop	r0
      e8:	0f be       	out	0x3f, r0	; 63
      ea:	0f 90       	pop	r0
      ec:	1f 90       	pop	r1
      ee:	18 95       	reti

000000f0 <DHT_start>:
 */ 
#include "DHT.h"
#include <string.h>
void DHT_start(void)
{
	pinDirection(DHT_PIN,OUTPUT);		
      f0:	61 e0       	ldi	r22, 0x01	; 1
      f2:	82 e1       	ldi	r24, 0x12	; 18
      f4:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
      f8:	60 e0       	ldi	r22, 0x00	; 0
      fa:	82 e1       	ldi	r24, 0x12	; 18
      fc:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     100:	8f e3       	ldi	r24, 0x3F	; 63
     102:	9c e9       	ldi	r25, 0x9C	; 156
     104:	01 97       	sbiw	r24, 0x01	; 1
     106:	f1 f7       	brne	.-4      	; 0x104 <DHT_start+0x14>
     108:	00 c0       	rjmp	.+0      	; 0x10a <DHT_start+0x1a>
     10a:	00 00       	nop
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
     10c:	61 e0       	ldi	r22, 0x01	; 1
     10e:	82 e1       	ldi	r24, 0x12	; 18
     110:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     114:	08 95       	ret

00000116 <DHT_read>:
}

u8 DHT_read(void)
{
     116:	cf 93       	push	r28
     118:	df 93       	push	r29
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     11a:	d0 e0       	ldi	r29, 0x00	; 0
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
     11c:	c0 e0       	ldi	r28, 0x00	; 0
	for (i=0;i<8;i++)
     11e:	1b c0       	rjmp	.+54     	; 0x156 <DHT_read+0x40>
	{
		while (readPin(DHT_PIN)==0);
     120:	82 e1       	ldi	r24, 0x12	; 18
     122:	0e 94 3e 04 	call	0x87c	; 0x87c <readPin>
     126:	88 23       	and	r24, r24
     128:	d9 f3       	breq	.-10     	; 0x120 <DHT_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     12a:	80 e5       	ldi	r24, 0x50	; 80
     12c:	8a 95       	dec	r24
     12e:	f1 f7       	brne	.-4      	; 0x12c <DHT_read+0x16>
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     130:	82 e1       	ldi	r24, 0x12	; 18
     132:	0e 94 3e 04 	call	0x87c	; 0x87c <readPin>
     136:	81 11       	cpse	r24, r1
     138:	02 c0       	rjmp	.+4      	; 0x13e <DHT_read+0x28>
		{
			bitLogic=bitLogic<<1;
     13a:	cc 0f       	add	r28, r28
     13c:	06 c0       	rjmp	.+12     	; 0x14a <DHT_read+0x34>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     13e:	8c 2f       	mov	r24, r28
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	88 0f       	add	r24, r24
     144:	99 1f       	adc	r25, r25
     146:	c8 2f       	mov	r28, r24
     148:	c1 60       	ori	r28, 0x01	; 1
		}
		
		while(readPin(DHT_PIN));
     14a:	82 e1       	ldi	r24, 0x12	; 18
     14c:	0e 94 3e 04 	call	0x87c	; 0x87c <readPin>
     150:	81 11       	cpse	r24, r1
     152:	fb cf       	rjmp	.-10     	; 0x14a <DHT_read+0x34>
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     154:	df 5f       	subi	r29, 0xFF	; 255
     156:	d8 30       	cpi	r29, 0x08	; 8
     158:	18 f3       	brcs	.-58     	; 0x120 <DHT_read+0xa>
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
}
     15a:	8c 2f       	mov	r24, r28
     15c:	df 91       	pop	r29
     15e:	cf 91       	pop	r28
     160:	08 95       	ret

00000162 <DHT_Response>:

void DHT_Response(void)
{
	pinDirection(DHT_PIN,INPUT);
     162:	60 e0       	ldi	r22, 0x00	; 0
     164:	82 e1       	ldi	r24, 0x12	; 18
     166:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
	while(readPin(DHT_PIN));
     16a:	82 e1       	ldi	r24, 0x12	; 18
     16c:	0e 94 3e 04 	call	0x87c	; 0x87c <readPin>
     170:	81 11       	cpse	r24, r1
     172:	fb cf       	rjmp	.-10     	; 0x16a <DHT_Response+0x8>
	while(!readPin(DHT_PIN));
     174:	82 e1       	ldi	r24, 0x12	; 18
     176:	0e 94 3e 04 	call	0x87c	; 0x87c <readPin>
     17a:	88 23       	and	r24, r24
     17c:	d9 f3       	breq	.-10     	; 0x174 <DHT_Response+0x12>
	while(readPin(DHT_PIN));
     17e:	82 e1       	ldi	r24, 0x12	; 18
     180:	0e 94 3e 04 	call	0x87c	; 0x87c <readPin>
     184:	81 11       	cpse	r24, r1
     186:	fb cf       	rjmp	.-10     	; 0x17e <DHT_Response+0x1c>
}
     188:	08 95       	ret

0000018a <intTostring>:
	
}


void intTostring(u16 hum_1,u16 temp_1,u8* temp,u8* hum )
{
     18a:	4f 92       	push	r4
     18c:	5f 92       	push	r5
     18e:	6f 92       	push	r6
     190:	7f 92       	push	r7
     192:	8f 92       	push	r8
     194:	9f 92       	push	r9
     196:	af 92       	push	r10
     198:	bf 92       	push	r11
     19a:	cf 92       	push	r12
     19c:	df 92       	push	r13
     19e:	ef 92       	push	r14
     1a0:	ff 92       	push	r15
     1a2:	0f 93       	push	r16
     1a4:	1f 93       	push	r17
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
     1aa:	cd b7       	in	r28, 0x3d	; 61
     1ac:	de b7       	in	r29, 0x3e	; 62
     1ae:	66 97       	sbiw	r28, 0x16	; 22
     1b0:	0f b6       	in	r0, 0x3f	; 63
     1b2:	f8 94       	cli
     1b4:	de bf       	out	0x3e, r29	; 62
     1b6:	0f be       	out	0x3f, r0	; 63
     1b8:	cd bf       	out	0x3d, r28	; 61
     1ba:	3c 01       	movw	r6, r24
     1bc:	5b 01       	movw	r10, r22
     1be:	4a 01       	movw	r8, r20
     1c0:	42 2e       	mov	r4, r18
     1c2:	53 2e       	mov	r5, r19
	u8 dot[]=".";
     1c4:	8e e2       	ldi	r24, 0x2E	; 46
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	9a 83       	std	Y+2, r25	; 0x02
     1ca:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_2[10]={0},hum_2[10]={0};
     1cc:	8a e0       	ldi	r24, 0x0A	; 10
     1ce:	fe 01       	movw	r30, r28
     1d0:	33 96       	adiw	r30, 0x03	; 3
     1d2:	df 01       	movw	r26, r30
     1d4:	98 2f       	mov	r25, r24
     1d6:	1d 92       	st	X+, r1
     1d8:	9a 95       	dec	r25
     1da:	e9 f7       	brne	.-6      	; 0x1d6 <intTostring+0x4c>
     1dc:	3a 96       	adiw	r30, 0x0a	; 10
     1de:	df 01       	movw	r26, r30
     1e0:	1d 92       	st	X+, r1
     1e2:	8a 95       	dec	r24
     1e4:	e9 f7       	brne	.-6      	; 0x1e0 <intTostring+0x56>
			if (GETBit(temp_1,15)==1)
     1e6:	77 23       	and	r23, r23
     1e8:	34 f4       	brge	.+12     	; 0x1f6 <intTostring+0x6c>
			{
				CLRBit(temp_1,15);
     1ea:	e8 94       	clt
     1ec:	b7 f8       	bld	r11, 7
				temp[0]='-';
     1ee:	8d e2       	ldi	r24, 0x2D	; 45
     1f0:	fa 01       	movw	r30, r20
     1f2:	81 93       	st	Z+, r24
     1f4:	4f 01       	movw	r8, r30
				temp++;
			}
			sprintf(temp,"%u",(temp_1)/10);
     1f6:	95 01       	movw	r18, r10
     1f8:	ad ec       	ldi	r26, 0xCD	; 205
     1fa:	bc ec       	ldi	r27, 0xCC	; 204
     1fc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__umulhisi3>
     200:	6c 01       	movw	r12, r24
     202:	d6 94       	lsr	r13
     204:	c7 94       	ror	r12
     206:	d6 94       	lsr	r13
     208:	c7 94       	ror	r12
     20a:	d6 94       	lsr	r13
     20c:	c7 94       	ror	r12
     20e:	df 92       	push	r13
     210:	cf 92       	push	r12
     212:	00 e6       	ldi	r16, 0x60	; 96
     214:	10 e0       	ldi	r17, 0x00	; 0
     216:	1f 93       	push	r17
     218:	0f 93       	push	r16
     21a:	9f 92       	push	r9
     21c:	8f 92       	push	r8
     21e:	0e 94 03 06 	call	0xc06	; 0xc06 <sprintf>
			sprintf(hum,"%u",(hum_1)/10);
     222:	93 01       	movw	r18, r6
     224:	ad ec       	ldi	r26, 0xCD	; 205
     226:	bc ec       	ldi	r27, 0xCC	; 204
     228:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__umulhisi3>
     22c:	7c 01       	movw	r14, r24
     22e:	f6 94       	lsr	r15
     230:	e7 94       	ror	r14
     232:	f6 94       	lsr	r15
     234:	e7 94       	ror	r14
     236:	f6 94       	lsr	r15
     238:	e7 94       	ror	r14
     23a:	ff 92       	push	r15
     23c:	ef 92       	push	r14
     23e:	1f 93       	push	r17
     240:	0f 93       	push	r16
     242:	5f 92       	push	r5
     244:	4f 92       	push	r4
     246:	0e 94 03 06 	call	0xc06	; 0xc06 <sprintf>
			
			sprintf(temp_2,"%u",((temp_1)%10));
     24a:	c6 01       	movw	r24, r12
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	cc 0c       	add	r12, r12
     252:	dd 1c       	adc	r13, r13
     254:	cc 0c       	add	r12, r12
     256:	dd 1c       	adc	r13, r13
     258:	cc 0c       	add	r12, r12
     25a:	dd 1c       	adc	r13, r13
     25c:	c8 0e       	add	r12, r24
     25e:	d9 1e       	adc	r13, r25
     260:	ac 18       	sub	r10, r12
     262:	bd 08       	sbc	r11, r13
     264:	bf 92       	push	r11
     266:	af 92       	push	r10
     268:	1f 93       	push	r17
     26a:	0f 93       	push	r16
     26c:	6e 01       	movw	r12, r28
     26e:	f3 e0       	ldi	r31, 0x03	; 3
     270:	cf 0e       	add	r12, r31
     272:	d1 1c       	adc	r13, r1
     274:	df 92       	push	r13
     276:	cf 92       	push	r12
     278:	0e 94 03 06 	call	0xc06	; 0xc06 <sprintf>
			sprintf(hum_2,"%u",((hum_1)%10));
     27c:	c7 01       	movw	r24, r14
     27e:	88 0f       	add	r24, r24
     280:	99 1f       	adc	r25, r25
     282:	ee 0c       	add	r14, r14
     284:	ff 1c       	adc	r15, r15
     286:	ee 0c       	add	r14, r14
     288:	ff 1c       	adc	r15, r15
     28a:	ee 0c       	add	r14, r14
     28c:	ff 1c       	adc	r15, r15
     28e:	e8 0e       	add	r14, r24
     290:	f9 1e       	adc	r15, r25
     292:	6e 18       	sub	r6, r14
     294:	7f 08       	sbc	r7, r15
     296:	7f 92       	push	r7
     298:	6f 92       	push	r6
     29a:	1f 93       	push	r17
     29c:	0f 93       	push	r16
     29e:	8e 01       	movw	r16, r28
     2a0:	03 5f       	subi	r16, 0xF3	; 243
     2a2:	1f 4f       	sbci	r17, 0xFF	; 255
     2a4:	1f 93       	push	r17
     2a6:	0f 93       	push	r16
     2a8:	0e 94 03 06 	call	0xc06	; 0xc06 <sprintf>
			
			strcat(hum,dot);
     2ac:	be 01       	movw	r22, r28
     2ae:	6f 5f       	subi	r22, 0xFF	; 255
     2b0:	7f 4f       	sbci	r23, 0xFF	; 255
     2b2:	84 2d       	mov	r24, r4
     2b4:	95 2d       	mov	r25, r5
     2b6:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcat>
			strcat(temp,dot);
     2ba:	be 01       	movw	r22, r28
     2bc:	6f 5f       	subi	r22, 0xFF	; 255
     2be:	7f 4f       	sbci	r23, 0xFF	; 255
     2c0:	c4 01       	movw	r24, r8
     2c2:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcat>
			strcat(hum,hum_2);
     2c6:	b8 01       	movw	r22, r16
     2c8:	84 2d       	mov	r24, r4
     2ca:	95 2d       	mov	r25, r5
     2cc:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcat>
			strcat(temp,temp_2);
     2d0:	b6 01       	movw	r22, r12
     2d2:	c4 01       	movw	r24, r8
     2d4:	0e 94 f8 05 	call	0xbf0	; 0xbf0 <strcat>
     2d8:	0f b6       	in	r0, 0x3f	; 63
     2da:	f8 94       	cli
     2dc:	de bf       	out	0x3e, r29	; 62
     2de:	0f be       	out	0x3f, r0	; 63
     2e0:	cd bf       	out	0x3d, r28	; 61
     2e2:	66 96       	adiw	r28, 0x16	; 22
     2e4:	0f b6       	in	r0, 0x3f	; 63
     2e6:	f8 94       	cli
     2e8:	de bf       	out	0x3e, r29	; 62
     2ea:	0f be       	out	0x3f, r0	; 63
     2ec:	cd bf       	out	0x3d, r28	; 61
     2ee:	df 91       	pop	r29
     2f0:	cf 91       	pop	r28
     2f2:	1f 91       	pop	r17
     2f4:	0f 91       	pop	r16
     2f6:	ff 90       	pop	r15
     2f8:	ef 90       	pop	r14
     2fa:	df 90       	pop	r13
     2fc:	cf 90       	pop	r12
     2fe:	bf 90       	pop	r11
     300:	af 90       	pop	r10
     302:	9f 90       	pop	r9
     304:	8f 90       	pop	r8
     306:	7f 90       	pop	r7
     308:	6f 90       	pop	r6
     30a:	5f 90       	pop	r5
     30c:	4f 90       	pop	r4
     30e:	08 95       	ret

00000310 <DHT_Represent>:
	while(!readPin(DHT_PIN));
	while(readPin(DHT_PIN));
}

BOOL DHT_Represent(u8* hum,u8* temp)
{
     310:	df 92       	push	r13
     312:	ef 92       	push	r14
     314:	ff 92       	push	r15
     316:	0f 93       	push	r16
     318:	1f 93       	push	r17
     31a:	cf 93       	push	r28
     31c:	df 93       	push	r29
     31e:	7c 01       	movw	r14, r24
     320:	8b 01       	movw	r16, r22
	u16 temp_1=0,hum_1=0;
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
	DHT_start();
     322:	0e 94 78 00 	call	0xf0	; 0xf0 <DHT_start>
	DHT_Response();
     326:	0e 94 b1 00 	call	0x162	; 0x162 <DHT_Response>
	humidity_I=DHT_read();
     32a:	0e 94 8b 00 	call	0x116	; 0x116 <DHT_read>
     32e:	d8 2f       	mov	r29, r24
	humidity_D=DHT_read();
     330:	0e 94 8b 00 	call	0x116	; 0x116 <DHT_read>
     334:	d8 2e       	mov	r13, r24
	temp_I=DHT_read();
     336:	0e 94 8b 00 	call	0x116	; 0x116 <DHT_read>
     33a:	c8 2f       	mov	r28, r24
	temp_D=DHT_read();
     33c:	0e 94 8b 00 	call	0x116	; 0x116 <DHT_read>
	
		hum_1=((humidity_I<<8)|humidity_D);
     340:	ed 2f       	mov	r30, r29
     342:	f0 e0       	ldi	r31, 0x00	; 0
     344:	fe 2f       	mov	r31, r30
     346:	ee 27       	eor	r30, r30
		temp_1=((temp_I<<8)|temp_D);
     348:	6c 2f       	mov	r22, r28
     34a:	70 e0       	ldi	r23, 0x00	; 0
     34c:	76 2f       	mov	r23, r22
     34e:	66 27       	eor	r22, r22
     350:	68 2b       	or	r22, r24
		
		intTostring(hum_1,temp_1,temp,hum);
     352:	97 01       	movw	r18, r14
     354:	a8 01       	movw	r20, r16
     356:	cf 01       	movw	r24, r30
     358:	8d 29       	or	r24, r13
     35a:	0e 94 c5 00 	call	0x18a	; 0x18a <intTostring>
		return TRUE;
	
}
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	df 91       	pop	r29
     362:	cf 91       	pop	r28
     364:	1f 91       	pop	r17
     366:	0f 91       	pop	r16
     368:	ff 90       	pop	r15
     36a:	ef 90       	pop	r14
     36c:	df 90       	pop	r13
     36e:	08 95       	ret

00000370 <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
     370:	41 e0       	ldi	r20, 0x01	; 1
     372:	6f e0       	ldi	r22, 0x0F	; 15
     374:	87 e3       	ldi	r24, 0x37	; 55
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	0e 94 92 04 	call	0x924	; 0x924 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	6f e0       	ldi	r22, 0x0F	; 15
     380:	88 e3       	ldi	r24, 0x38	; 56
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 83 04 	call	0x906	; 0x906 <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
     388:	40 e0       	ldi	r20, 0x00	; 0
     38a:	60 e7       	ldi	r22, 0x70	; 112
     38c:	87 e3       	ldi	r24, 0x37	; 55
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 92 04 	call	0x924	; 0x924 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
     394:	41 e0       	ldi	r20, 0x01	; 1
     396:	60 e7       	ldi	r22, 0x70	; 112
     398:	88 e3       	ldi	r24, 0x38	; 56
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 83 04 	call	0x906	; 0x906 <writePins>
     3a0:	08 95       	ret

000003a2 <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     3a2:	61 e0       	ldi	r22, 0x01	; 1
     3a4:	83 e0       	ldi	r24, 0x03	; 3
     3a6:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     3aa:	85 e8       	ldi	r24, 0x85	; 133
     3ac:	8a 95       	dec	r24
     3ae:	f1 f7       	brne	.-4      	; 0x3ac <LCD_latch+0xa>
     3b0:	00 00       	nop
     3b2:	60 e0       	ldi	r22, 0x00	; 0
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     3ba:	85 e8       	ldi	r24, 0x85	; 133
     3bc:	8a 95       	dec	r24
     3be:	f1 f7       	brne	.-4      	; 0x3bc <LCD_latch+0x1a>
     3c0:	00 00       	nop
     3c2:	08 95       	ret

000003c4 <SendToLCD>:
     3c4:	cf 93       	push	r28
     3c6:	c8 2f       	mov	r28, r24
     3c8:	40 e0       	ldi	r20, 0x00	; 0
     3ca:	60 ef       	ldi	r22, 0xF0	; 240
     3cc:	8b e3       	ldi	r24, 0x3B	; 59
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	0e 94 83 04 	call	0x906	; 0x906 <writePins>
     3d4:	6c 2f       	mov	r22, r28
     3d6:	60 7f       	andi	r22, 0xF0	; 240
     3d8:	41 e0       	ldi	r20, 0x01	; 1
     3da:	8b e3       	ldi	r24, 0x3B	; 59
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 83 04 	call	0x906	; 0x906 <writePins>
     3e2:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_latch>
     3e6:	40 e0       	ldi	r20, 0x00	; 0
     3e8:	60 ef       	ldi	r22, 0xF0	; 240
     3ea:	8b e3       	ldi	r24, 0x3B	; 59
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 83 04 	call	0x906	; 0x906 <writePins>
     3f2:	80 e1       	ldi	r24, 0x10	; 16
     3f4:	c8 9f       	mul	r28, r24
     3f6:	b0 01       	movw	r22, r0
     3f8:	11 24       	eor	r1, r1
     3fa:	41 e0       	ldi	r20, 0x01	; 1
     3fc:	8b e3       	ldi	r24, 0x3B	; 59
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 83 04 	call	0x906	; 0x906 <writePins>
     404:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <LCD_latch>
     408:	85 e8       	ldi	r24, 0x85	; 133
     40a:	8a 95       	dec	r24
     40c:	f1 f7       	brne	.-4      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     40e:	00 00       	nop
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <LCD_send_cmd>:
     414:	cf 93       	push	r28
     416:	c8 2f       	mov	r28, r24
     418:	60 e0       	ldi	r22, 0x00	; 0
     41a:	82 e0       	ldi	r24, 0x02	; 2
     41c:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     420:	8c 2f       	mov	r24, r28
     422:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <SendToLCD>
     426:	cf 91       	pop	r28
     428:	08 95       	ret

0000042a <LCD_CLEAR>:
     42a:	81 e0       	ldi	r24, 0x01	; 1
     42c:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     430:	8f e9       	ldi	r24, 0x9F	; 159
     432:	9f e0       	ldi	r25, 0x0F	; 15
     434:	01 97       	sbiw	r24, 0x01	; 1
     436:	f1 f7       	brne	.-4      	; 0x434 <LCD_CLEAR+0xa>
     438:	00 c0       	rjmp	.+0      	; 0x43a <LCD_CLEAR+0x10>
     43a:	00 00       	nop
     43c:	08 95       	ret

0000043e <LCD_ret_Home>:
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     444:	8f e9       	ldi	r24, 0x9F	; 159
     446:	9f e0       	ldi	r25, 0x0F	; 15
     448:	01 97       	sbiw	r24, 0x01	; 1
     44a:	f1 f7       	brne	.-4      	; 0x448 <LCD_ret_Home+0xa>
     44c:	00 c0       	rjmp	.+0      	; 0x44e <LCD_ret_Home+0x10>
     44e:	00 00       	nop
     450:	08 95       	ret

00000452 <LCD_init>:
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	60 ef       	ldi	r22, 0xF0	; 240
     456:	8a e3       	ldi	r24, 0x3A	; 58
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 92 04 	call	0x924	; 0x924 <pinsDirection>
     45e:	41 e0       	ldi	r20, 0x01	; 1
     460:	6c e0       	ldi	r22, 0x0C	; 12
     462:	8a e3       	ldi	r24, 0x3A	; 58
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 92 04 	call	0x924	; 0x924 <pinsDirection>
     46a:	2f ef       	ldi	r18, 0xFF	; 255
     46c:	89 ef       	ldi	r24, 0xF9	; 249
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	21 50       	subi	r18, 0x01	; 1
     472:	80 40       	sbci	r24, 0x00	; 0
     474:	90 40       	sbci	r25, 0x00	; 0
     476:	e1 f7       	brne	.-8      	; 0x470 <LCD_init+0x1e>
     478:	00 c0       	rjmp	.+0      	; 0x47a <LCD_init+0x28>
     47a:	00 00       	nop
     47c:	0e 94 1f 02 	call	0x43e	; 0x43e <LCD_ret_Home>
     480:	86 e0       	ldi	r24, 0x06	; 6
     482:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     486:	8c e0       	ldi	r24, 0x0C	; 12
     488:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     48c:	80 e1       	ldi	r24, 0x10	; 16
     48e:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     492:	88 e2       	ldi	r24, 0x28	; 40
     494:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     498:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_CLEAR>
     49c:	08 95       	ret

0000049e <LCD_send_data>:
     49e:	cf 93       	push	r28
     4a0:	c8 2f       	mov	r28, r24
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	82 e0       	ldi	r24, 0x02	; 2
     4a6:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     4aa:	8c 2f       	mov	r24, r28
     4ac:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <SendToLCD>
     4b0:	cf 91       	pop	r28
     4b2:	08 95       	ret

000004b4 <disp_char>:
     4b4:	0e 94 4f 02 	call	0x49e	; 0x49e <LCD_send_data>
     4b8:	08 95       	ret

000004ba <disp_str>:
     4ba:	0f 93       	push	r16
     4bc:	1f 93       	push	r17
     4be:	cf 93       	push	r28
     4c0:	8c 01       	movw	r16, r24
     4c2:	c0 e0       	ldi	r28, 0x00	; 0
     4c4:	03 c0       	rjmp	.+6      	; 0x4cc <disp_str+0x12>
     4c6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <disp_char>
     4ca:	cf 5f       	subi	r28, 0xFF	; 255
     4cc:	f8 01       	movw	r30, r16
     4ce:	ec 0f       	add	r30, r28
     4d0:	f1 1d       	adc	r31, r1
     4d2:	80 81       	ld	r24, Z
     4d4:	81 11       	cpse	r24, r1
     4d6:	f7 cf       	rjmp	.-18     	; 0x4c6 <disp_str+0xc>
     4d8:	cf 91       	pop	r28
     4da:	1f 91       	pop	r17
     4dc:	0f 91       	pop	r16
     4de:	08 95       	ret

000004e0 <LCD_GOTXY>:
     4e0:	81 30       	cpi	r24, 0x01	; 1
     4e2:	29 f4       	brne	.+10     	; 0x4ee <LCD_GOTXY+0xe>
     4e4:	8f e7       	ldi	r24, 0x7F	; 127
     4e6:	86 0f       	add	r24, r22
     4e8:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     4ec:	08 95       	ret
     4ee:	82 30       	cpi	r24, 0x02	; 2
     4f0:	29 f4       	brne	.+10     	; 0x4fc <LCD_GOTXY+0x1c>
     4f2:	8f eb       	ldi	r24, 0xBF	; 191
     4f4:	86 0f       	add	r24, r22
     4f6:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     4fa:	08 95       	ret
     4fc:	83 30       	cpi	r24, 0x03	; 3
     4fe:	29 f4       	brne	.+10     	; 0x50a <LCD_GOTXY+0x2a>
     500:	8f e8       	ldi	r24, 0x8F	; 143
     502:	86 0f       	add	r24, r22
     504:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     508:	08 95       	ret
     50a:	84 30       	cpi	r24, 0x04	; 4
     50c:	21 f4       	brne	.+8      	; 0x516 <LCD_GOTXY+0x36>
     50e:	8f ec       	ldi	r24, 0xCF	; 207
     510:	86 0f       	add	r24, r22
     512:	0e 94 0a 02 	call	0x414	; 0x414 <LCD_send_cmd>
     516:	08 95       	ret

00000518 <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     518:	cf 93       	push	r28
     51a:	df 93       	push	r29
     51c:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     51e:	0e 94 70 02 	call	0x4e0	; 0x4e0 <LCD_GOTXY>
	disp_str(str);
     522:	ce 01       	movw	r24, r28
     524:	0e 94 5d 02 	call	0x4ba	; 0x4ba <disp_str>
}
     528:	df 91       	pop	r29
     52a:	cf 91       	pop	r28
     52c:	08 95       	ret

0000052e <disp_int>:


void disp_int(u32 intvalue)
{
     52e:	0f 93       	push	r16
     530:	1f 93       	push	r17
     532:	cf 93       	push	r28
     534:	df 93       	push	r29
     536:	cd b7       	in	r28, 0x3d	; 61
     538:	de b7       	in	r29, 0x3e	; 62
     53a:	2b 97       	sbiw	r28, 0x0b	; 11
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	f8 94       	cli
     540:	de bf       	out	0x3e, r29	; 62
     542:	0f be       	out	0x3f, r0	; 63
     544:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     546:	8e 01       	movw	r16, r28
     548:	0f 5f       	subi	r16, 0xFF	; 255
     54a:	1f 4f       	sbci	r17, 0xFF	; 255
     54c:	2b e0       	ldi	r18, 0x0B	; 11
     54e:	f8 01       	movw	r30, r16
     550:	11 92       	st	Z+, r1
     552:	2a 95       	dec	r18
     554:	e9 f7       	brne	.-6      	; 0x550 <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     556:	9f 93       	push	r25
     558:	8f 93       	push	r24
     55a:	7f 93       	push	r23
     55c:	6f 93       	push	r22
     55e:	80 e6       	ldi	r24, 0x60	; 96
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	9f 93       	push	r25
     564:	8f 93       	push	r24
     566:	1f 93       	push	r17
     568:	0f 93       	push	r16
     56a:	0e 94 03 06 	call	0xc06	; 0xc06 <sprintf>
		disp_str(string);
     56e:	c8 01       	movw	r24, r16
     570:	0e 94 5d 02 	call	0x4ba	; 0x4ba <disp_str>
}
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	de bf       	out	0x3e, r29	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	cd bf       	out	0x3d, r28	; 61
     57e:	2b 96       	adiw	r28, 0x0b	; 11
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	08 95       	ret

00000594 <Callback>:


void (*ptrINT)(void)=0;
void Callback(void (*ptr)(void))
{
	ptrINT=ptr;
     594:	90 93 c3 00 	sts	0x00C3, r25	; 0x8000c3 <__data_end+0x1>
     598:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__data_end>
     59c:	08 95       	ret

0000059e <INT_init>:



void INT_init(u8 int_num , u8 sense_control)
{
	GICR|=(1<<int_num);
     59e:	9b b7       	in	r25, 0x3b	; 59
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	30 e0       	ldi	r19, 0x00	; 0
     5a4:	08 2e       	mov	r0, r24
     5a6:	02 c0       	rjmp	.+4      	; 0x5ac <INT_init+0xe>
     5a8:	22 0f       	add	r18, r18
     5aa:	33 1f       	adc	r19, r19
     5ac:	0a 94       	dec	r0
     5ae:	e2 f7       	brpl	.-8      	; 0x5a8 <INT_init+0xa>
     5b0:	29 2b       	or	r18, r25
     5b2:	2b bf       	out	0x3b, r18	; 59
	switch(int_num)
     5b4:	86 30       	cpi	r24, 0x06	; 6
     5b6:	a1 f0       	breq	.+40     	; 0x5e0 <INT_init+0x42>
     5b8:	87 30       	cpi	r24, 0x07	; 7
     5ba:	b1 f0       	breq	.+44     	; 0x5e8 <INT_init+0x4a>
     5bc:	85 30       	cpi	r24, 0x05	; 5
     5be:	e1 f4       	brne	.+56     	; 0x5f8 <INT_init+0x5a>
	{
		case INT_2:
		MCUCSR|=((sense_control & 0x01)<<6);
     5c0:	84 b7       	in	r24, 0x34	; 52
     5c2:	46 2f       	mov	r20, r22
     5c4:	41 70       	andi	r20, 0x01	; 1
     5c6:	50 e0       	ldi	r21, 0x00	; 0
     5c8:	00 24       	eor	r0, r0
     5ca:	56 95       	lsr	r21
     5cc:	47 95       	ror	r20
     5ce:	07 94       	ror	r0
     5d0:	56 95       	lsr	r21
     5d2:	47 95       	ror	r20
     5d4:	07 94       	ror	r0
     5d6:	54 2f       	mov	r21, r20
     5d8:	40 2d       	mov	r20, r0
     5da:	48 2b       	or	r20, r24
     5dc:	44 bf       	out	0x34, r20	; 52
		break;
     5de:	08 95       	ret
		
		case INT_0:
		MCUCR|=sense_control;
     5e0:	85 b7       	in	r24, 0x35	; 53
     5e2:	68 2b       	or	r22, r24
     5e4:	65 bf       	out	0x35, r22	; 53
		break;
     5e6:	08 95       	ret
		case INT_1:
		MCUCR|=(sense_control<<2);
     5e8:	85 b7       	in	r24, 0x35	; 53
     5ea:	70 e0       	ldi	r23, 0x00	; 0
     5ec:	66 0f       	add	r22, r22
     5ee:	77 1f       	adc	r23, r23
     5f0:	66 0f       	add	r22, r22
     5f2:	77 1f       	adc	r23, r23
     5f4:	68 2b       	or	r22, r24
     5f6:	65 bf       	out	0x35, r22	; 53
     5f8:	08 95       	ret

000005fa <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
     5fa:	87 b1       	in	r24, 0x07	; 7
     5fc:	80 64       	ori	r24, 0x40	; 64
     5fe:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
     600:	86 b1       	in	r24, 0x06	; 6
     602:	87 68       	ori	r24, 0x87	; 135
     604:	86 b9       	out	0x06, r24	; 6
     606:	08 95       	ret

00000608 <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
     608:	97 b1       	in	r25, 0x07	; 7
     60a:	90 7e       	andi	r25, 0xE0	; 224
     60c:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
     60e:	97 b1       	in	r25, 0x07	; 7
     610:	89 2b       	or	r24, r25
     612:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
     614:	86 b1       	in	r24, 0x06	; 6
     616:	80 64       	ori	r24, 0x40	; 64
     618:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
     61a:	36 99       	sbic	0x06, 6	; 6
     61c:	fe cf       	rjmp	.-4      	; 0x61a <read_analog+0x12>
	return (ADC);		
     61e:	84 b1       	in	r24, 0x04	; 4
     620:	95 b1       	in	r25, 0x05	; 5
}
     622:	08 95       	ret

00000624 <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
     624:	88 30       	cpi	r24, 0x08	; 8
     626:	f8 f4       	brcc	.+62     	; 0x666 <writePin+0x42>
		if(logic==HIGH)
     628:	61 30       	cpi	r22, 0x01	; 1
     62a:	69 f4       	brne	.+26     	; 0x646 <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
     62c:	4b b3       	in	r20, 0x1b	; 27
     62e:	21 e0       	ldi	r18, 0x01	; 1
     630:	30 e0       	ldi	r19, 0x00	; 0
     632:	b9 01       	movw	r22, r18
     634:	02 c0       	rjmp	.+4      	; 0x63a <writePin+0x16>
     636:	66 0f       	add	r22, r22
     638:	77 1f       	adc	r23, r23
     63a:	8a 95       	dec	r24
     63c:	e2 f7       	brpl	.-8      	; 0x636 <writePin+0x12>
     63e:	cb 01       	movw	r24, r22
     640:	84 2b       	or	r24, r20
     642:	8b bb       	out	0x1b, r24	; 27
     644:	08 95       	ret
		else if(logic==LOW)
     646:	61 11       	cpse	r22, r1
     648:	82 c0       	rjmp	.+260    	; 0x74e <writePin+0x12a>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
     64a:	4b b3       	in	r20, 0x1b	; 27
     64c:	21 e0       	ldi	r18, 0x01	; 1
     64e:	30 e0       	ldi	r19, 0x00	; 0
     650:	b9 01       	movw	r22, r18
     652:	02 c0       	rjmp	.+4      	; 0x658 <writePin+0x34>
     654:	66 0f       	add	r22, r22
     656:	77 1f       	adc	r23, r23
     658:	8a 95       	dec	r24
     65a:	e2 f7       	brpl	.-8      	; 0x654 <writePin+0x30>
     65c:	cb 01       	movw	r24, r22
     65e:	80 95       	com	r24
     660:	84 23       	and	r24, r20
     662:	8b bb       	out	0x1b, r24	; 27
     664:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
     666:	98 ef       	ldi	r25, 0xF8	; 248
     668:	98 0f       	add	r25, r24
     66a:	98 30       	cpi	r25, 0x08	; 8
     66c:	18 f5       	brcc	.+70     	; 0x6b4 <writePin+0x90>
		if(logic==HIGH)
     66e:	61 30       	cpi	r22, 0x01	; 1
     670:	79 f4       	brne	.+30     	; 0x690 <writePin+0x6c>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
     672:	48 b3       	in	r20, 0x18	; 24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	08 97       	sbiw	r24, 0x08	; 8
     678:	21 e0       	ldi	r18, 0x01	; 1
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	b9 01       	movw	r22, r18
     67e:	02 c0       	rjmp	.+4      	; 0x684 <writePin+0x60>
     680:	66 0f       	add	r22, r22
     682:	77 1f       	adc	r23, r23
     684:	8a 95       	dec	r24
     686:	e2 f7       	brpl	.-8      	; 0x680 <writePin+0x5c>
     688:	cb 01       	movw	r24, r22
     68a:	84 2b       	or	r24, r20
     68c:	88 bb       	out	0x18, r24	; 24
     68e:	08 95       	ret
		else if(logic==LOW)
     690:	61 11       	cpse	r22, r1
     692:	5d c0       	rjmp	.+186    	; 0x74e <writePin+0x12a>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
     694:	48 b3       	in	r20, 0x18	; 24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	08 97       	sbiw	r24, 0x08	; 8
     69a:	21 e0       	ldi	r18, 0x01	; 1
     69c:	30 e0       	ldi	r19, 0x00	; 0
     69e:	b9 01       	movw	r22, r18
     6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <writePin+0x82>
     6a2:	66 0f       	add	r22, r22
     6a4:	77 1f       	adc	r23, r23
     6a6:	8a 95       	dec	r24
     6a8:	e2 f7       	brpl	.-8      	; 0x6a2 <writePin+0x7e>
     6aa:	cb 01       	movw	r24, r22
     6ac:	80 95       	com	r24
     6ae:	84 23       	and	r24, r20
     6b0:	88 bb       	out	0x18, r24	; 24
     6b2:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
     6b4:	90 ef       	ldi	r25, 0xF0	; 240
     6b6:	98 0f       	add	r25, r24
     6b8:	98 30       	cpi	r25, 0x08	; 8
     6ba:	18 f5       	brcc	.+70     	; 0x702 <writePin+0xde>
		if(logic==HIGH)
     6bc:	61 30       	cpi	r22, 0x01	; 1
     6be:	79 f4       	brne	.+30     	; 0x6de <writePin+0xba>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
     6c0:	45 b3       	in	r20, 0x15	; 21
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	40 97       	sbiw	r24, 0x10	; 16
     6c6:	21 e0       	ldi	r18, 0x01	; 1
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	b9 01       	movw	r22, r18
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <writePin+0xae>
     6ce:	66 0f       	add	r22, r22
     6d0:	77 1f       	adc	r23, r23
     6d2:	8a 95       	dec	r24
     6d4:	e2 f7       	brpl	.-8      	; 0x6ce <writePin+0xaa>
     6d6:	cb 01       	movw	r24, r22
     6d8:	84 2b       	or	r24, r20
     6da:	85 bb       	out	0x15, r24	; 21
     6dc:	08 95       	ret
		else if(logic==LOW)
     6de:	61 11       	cpse	r22, r1
     6e0:	36 c0       	rjmp	.+108    	; 0x74e <writePin+0x12a>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
     6e2:	45 b3       	in	r20, 0x15	; 21
     6e4:	90 e0       	ldi	r25, 0x00	; 0
     6e6:	40 97       	sbiw	r24, 0x10	; 16
     6e8:	21 e0       	ldi	r18, 0x01	; 1
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	b9 01       	movw	r22, r18
     6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <writePin+0xd0>
     6f0:	66 0f       	add	r22, r22
     6f2:	77 1f       	adc	r23, r23
     6f4:	8a 95       	dec	r24
     6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <writePin+0xcc>
     6f8:	cb 01       	movw	r24, r22
     6fa:	80 95       	com	r24
     6fc:	84 23       	and	r24, r20
     6fe:	85 bb       	out	0x15, r24	; 21
     700:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
     702:	98 ee       	ldi	r25, 0xE8	; 232
     704:	98 0f       	add	r25, r24
     706:	98 30       	cpi	r25, 0x08	; 8
     708:	10 f5       	brcc	.+68     	; 0x74e <writePin+0x12a>
		if(logic==HIGH)
     70a:	61 30       	cpi	r22, 0x01	; 1
     70c:	79 f4       	brne	.+30     	; 0x72c <writePin+0x108>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
     70e:	42 b3       	in	r20, 0x12	; 18
     710:	90 e0       	ldi	r25, 0x00	; 0
     712:	48 97       	sbiw	r24, 0x18	; 24
     714:	21 e0       	ldi	r18, 0x01	; 1
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	b9 01       	movw	r22, r18
     71a:	02 c0       	rjmp	.+4      	; 0x720 <writePin+0xfc>
     71c:	66 0f       	add	r22, r22
     71e:	77 1f       	adc	r23, r23
     720:	8a 95       	dec	r24
     722:	e2 f7       	brpl	.-8      	; 0x71c <writePin+0xf8>
     724:	cb 01       	movw	r24, r22
     726:	84 2b       	or	r24, r20
     728:	82 bb       	out	0x12, r24	; 18
     72a:	08 95       	ret
		else if(logic==LOW)
     72c:	61 11       	cpse	r22, r1
     72e:	0f c0       	rjmp	.+30     	; 0x74e <writePin+0x12a>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
     730:	42 b3       	in	r20, 0x12	; 18
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	48 97       	sbiw	r24, 0x18	; 24
     736:	21 e0       	ldi	r18, 0x01	; 1
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	b9 01       	movw	r22, r18
     73c:	02 c0       	rjmp	.+4      	; 0x742 <writePin+0x11e>
     73e:	66 0f       	add	r22, r22
     740:	77 1f       	adc	r23, r23
     742:	8a 95       	dec	r24
     744:	e2 f7       	brpl	.-8      	; 0x73e <writePin+0x11a>
     746:	cb 01       	movw	r24, r22
     748:	80 95       	com	r24
     74a:	84 23       	and	r24, r20
     74c:	82 bb       	out	0x12, r24	; 18
     74e:	08 95       	ret

00000750 <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
     750:	88 30       	cpi	r24, 0x08	; 8
     752:	f8 f4       	brcc	.+62     	; 0x792 <pinDirection+0x42>
		if(direction == OUTPUT)
     754:	61 30       	cpi	r22, 0x01	; 1
     756:	69 f4       	brne	.+26     	; 0x772 <pinDirection+0x22>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
     758:	4a b3       	in	r20, 0x1a	; 26
     75a:	21 e0       	ldi	r18, 0x01	; 1
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	b9 01       	movw	r22, r18
     760:	02 c0       	rjmp	.+4      	; 0x766 <pinDirection+0x16>
     762:	66 0f       	add	r22, r22
     764:	77 1f       	adc	r23, r23
     766:	8a 95       	dec	r24
     768:	e2 f7       	brpl	.-8      	; 0x762 <pinDirection+0x12>
     76a:	cb 01       	movw	r24, r22
     76c:	84 2b       	or	r24, r20
     76e:	8a bb       	out	0x1a, r24	; 26
     770:	08 95       	ret
		else if(direction == INPUT)
     772:	61 11       	cpse	r22, r1
     774:	82 c0       	rjmp	.+260    	; 0x87a <__stack+0x1b>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
     776:	4a b3       	in	r20, 0x1a	; 26
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	b9 01       	movw	r22, r18
     77e:	02 c0       	rjmp	.+4      	; 0x784 <pinDirection+0x34>
     780:	66 0f       	add	r22, r22
     782:	77 1f       	adc	r23, r23
     784:	8a 95       	dec	r24
     786:	e2 f7       	brpl	.-8      	; 0x780 <pinDirection+0x30>
     788:	cb 01       	movw	r24, r22
     78a:	80 95       	com	r24
     78c:	84 23       	and	r24, r20
     78e:	8a bb       	out	0x1a, r24	; 26
     790:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
     792:	98 ef       	ldi	r25, 0xF8	; 248
     794:	98 0f       	add	r25, r24
     796:	98 30       	cpi	r25, 0x08	; 8
     798:	18 f5       	brcc	.+70     	; 0x7e0 <pinDirection+0x90>
		if(direction == OUTPUT)
     79a:	61 30       	cpi	r22, 0x01	; 1
     79c:	79 f4       	brne	.+30     	; 0x7bc <pinDirection+0x6c>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
     79e:	47 b3       	in	r20, 0x17	; 23
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	08 97       	sbiw	r24, 0x08	; 8
     7a4:	21 e0       	ldi	r18, 0x01	; 1
     7a6:	30 e0       	ldi	r19, 0x00	; 0
     7a8:	b9 01       	movw	r22, r18
     7aa:	02 c0       	rjmp	.+4      	; 0x7b0 <pinDirection+0x60>
     7ac:	66 0f       	add	r22, r22
     7ae:	77 1f       	adc	r23, r23
     7b0:	8a 95       	dec	r24
     7b2:	e2 f7       	brpl	.-8      	; 0x7ac <pinDirection+0x5c>
     7b4:	cb 01       	movw	r24, r22
     7b6:	84 2b       	or	r24, r20
     7b8:	87 bb       	out	0x17, r24	; 23
     7ba:	08 95       	ret
		else if(direction == LOW)
     7bc:	61 11       	cpse	r22, r1
     7be:	5d c0       	rjmp	.+186    	; 0x87a <__stack+0x1b>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
     7c0:	47 b3       	in	r20, 0x17	; 23
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	08 97       	sbiw	r24, 0x08	; 8
     7c6:	21 e0       	ldi	r18, 0x01	; 1
     7c8:	30 e0       	ldi	r19, 0x00	; 0
     7ca:	b9 01       	movw	r22, r18
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <pinDirection+0x82>
     7ce:	66 0f       	add	r22, r22
     7d0:	77 1f       	adc	r23, r23
     7d2:	8a 95       	dec	r24
     7d4:	e2 f7       	brpl	.-8      	; 0x7ce <pinDirection+0x7e>
     7d6:	cb 01       	movw	r24, r22
     7d8:	80 95       	com	r24
     7da:	84 23       	and	r24, r20
     7dc:	87 bb       	out	0x17, r24	; 23
     7de:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
     7e0:	90 ef       	ldi	r25, 0xF0	; 240
     7e2:	98 0f       	add	r25, r24
     7e4:	98 30       	cpi	r25, 0x08	; 8
     7e6:	18 f5       	brcc	.+70     	; 0x82e <pinDirection+0xde>
		if(direction == OUTPUT)
     7e8:	61 30       	cpi	r22, 0x01	; 1
     7ea:	79 f4       	brne	.+30     	; 0x80a <pinDirection+0xba>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
     7ec:	44 b3       	in	r20, 0x14	; 20
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	40 97       	sbiw	r24, 0x10	; 16
     7f2:	21 e0       	ldi	r18, 0x01	; 1
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	b9 01       	movw	r22, r18
     7f8:	02 c0       	rjmp	.+4      	; 0x7fe <pinDirection+0xae>
     7fa:	66 0f       	add	r22, r22
     7fc:	77 1f       	adc	r23, r23
     7fe:	8a 95       	dec	r24
     800:	e2 f7       	brpl	.-8      	; 0x7fa <pinDirection+0xaa>
     802:	cb 01       	movw	r24, r22
     804:	84 2b       	or	r24, r20
     806:	84 bb       	out	0x14, r24	; 20
     808:	08 95       	ret
		else if(direction==INPUT)
     80a:	61 11       	cpse	r22, r1
     80c:	36 c0       	rjmp	.+108    	; 0x87a <__stack+0x1b>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
     80e:	44 b3       	in	r20, 0x14	; 20
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	40 97       	sbiw	r24, 0x10	; 16
     814:	21 e0       	ldi	r18, 0x01	; 1
     816:	30 e0       	ldi	r19, 0x00	; 0
     818:	b9 01       	movw	r22, r18
     81a:	02 c0       	rjmp	.+4      	; 0x820 <pinDirection+0xd0>
     81c:	66 0f       	add	r22, r22
     81e:	77 1f       	adc	r23, r23
     820:	8a 95       	dec	r24
     822:	e2 f7       	brpl	.-8      	; 0x81c <pinDirection+0xcc>
     824:	cb 01       	movw	r24, r22
     826:	80 95       	com	r24
     828:	84 23       	and	r24, r20
     82a:	84 bb       	out	0x14, r24	; 20
     82c:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
     82e:	98 ee       	ldi	r25, 0xE8	; 232
     830:	98 0f       	add	r25, r24
     832:	98 30       	cpi	r25, 0x08	; 8
     834:	10 f5       	brcc	.+68     	; 0x87a <__stack+0x1b>
		if(direction == OUTPUT)
     836:	61 30       	cpi	r22, 0x01	; 1
     838:	79 f4       	brne	.+30     	; 0x858 <pinDirection+0x108>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
     83a:	41 b3       	in	r20, 0x11	; 17
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	48 97       	sbiw	r24, 0x18	; 24
     840:	21 e0       	ldi	r18, 0x01	; 1
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	b9 01       	movw	r22, r18
     846:	02 c0       	rjmp	.+4      	; 0x84c <pinDirection+0xfc>
     848:	66 0f       	add	r22, r22
     84a:	77 1f       	adc	r23, r23
     84c:	8a 95       	dec	r24
     84e:	e2 f7       	brpl	.-8      	; 0x848 <pinDirection+0xf8>
     850:	cb 01       	movw	r24, r22
     852:	84 2b       	or	r24, r20
     854:	81 bb       	out	0x11, r24	; 17
     856:	08 95       	ret
		else if(direction == INPUT)
     858:	61 11       	cpse	r22, r1
     85a:	0f c0       	rjmp	.+30     	; 0x87a <__stack+0x1b>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
     85c:	41 b3       	in	r20, 0x11	; 17
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	48 97       	sbiw	r24, 0x18	; 24
     862:	21 e0       	ldi	r18, 0x01	; 1
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	b9 01       	movw	r22, r18
     868:	02 c0       	rjmp	.+4      	; 0x86e <__stack+0xf>
     86a:	66 0f       	add	r22, r22
     86c:	77 1f       	adc	r23, r23
     86e:	8a 95       	dec	r24
     870:	e2 f7       	brpl	.-8      	; 0x86a <__stack+0xb>
     872:	cb 01       	movw	r24, r22
     874:	80 95       	com	r24
     876:	84 23       	and	r24, r20
     878:	81 bb       	out	0x11, r24	; 17
     87a:	08 95       	ret

0000087c <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
     87c:	88 30       	cpi	r24, 0x08	; 8
     87e:	58 f4       	brcc	.+22     	; 0x896 <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
     880:	29 b3       	in	r18, 0x19	; 25
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	a9 01       	movw	r20, r18
     886:	02 c0       	rjmp	.+4      	; 0x88c <readPin+0x10>
     888:	55 95       	asr	r21
     88a:	47 95       	ror	r20
     88c:	8a 95       	dec	r24
     88e:	e2 f7       	brpl	.-8      	; 0x888 <readPin+0xc>
     890:	ca 01       	movw	r24, r20
     892:	81 70       	andi	r24, 0x01	; 1
     894:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
     896:	98 ef       	ldi	r25, 0xF8	; 248
     898:	98 0f       	add	r25, r24
     89a:	98 30       	cpi	r25, 0x08	; 8
     89c:	70 f4       	brcc	.+28     	; 0x8ba <readPin+0x3e>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
     89e:	96 b3       	in	r25, 0x16	; 22
     8a0:	28 2f       	mov	r18, r24
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	28 50       	subi	r18, 0x08	; 8
     8a6:	31 09       	sbc	r19, r1
     8a8:	89 2f       	mov	r24, r25
     8aa:	90 e0       	ldi	r25, 0x00	; 0
     8ac:	02 c0       	rjmp	.+4      	; 0x8b2 <readPin+0x36>
     8ae:	95 95       	asr	r25
     8b0:	87 95       	ror	r24
     8b2:	2a 95       	dec	r18
     8b4:	e2 f7       	brpl	.-8      	; 0x8ae <readPin+0x32>
     8b6:	81 70       	andi	r24, 0x01	; 1
     8b8:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
     8ba:	90 ef       	ldi	r25, 0xF0	; 240
     8bc:	98 0f       	add	r25, r24
     8be:	98 30       	cpi	r25, 0x08	; 8
     8c0:	70 f4       	brcc	.+28     	; 0x8de <readPin+0x62>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
     8c2:	93 b3       	in	r25, 0x13	; 19
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	20 51       	subi	r18, 0x10	; 16
     8ca:	31 09       	sbc	r19, r1
     8cc:	89 2f       	mov	r24, r25
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <readPin+0x5a>
     8d2:	95 95       	asr	r25
     8d4:	87 95       	ror	r24
     8d6:	2a 95       	dec	r18
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <readPin+0x56>
     8da:	81 70       	andi	r24, 0x01	; 1
     8dc:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
     8de:	98 ee       	ldi	r25, 0xE8	; 232
     8e0:	98 0f       	add	r25, r24
     8e2:	98 30       	cpi	r25, 0x08	; 8
     8e4:	70 f4       	brcc	.+28     	; 0x902 <readPin+0x86>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
     8e6:	90 b3       	in	r25, 0x10	; 16
     8e8:	28 2f       	mov	r18, r24
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	28 51       	subi	r18, 0x18	; 24
     8ee:	31 09       	sbc	r19, r1
     8f0:	89 2f       	mov	r24, r25
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	02 c0       	rjmp	.+4      	; 0x8fa <readPin+0x7e>
     8f6:	95 95       	asr	r25
     8f8:	87 95       	ror	r24
     8fa:	2a 95       	dec	r18
     8fc:	e2 f7       	brpl	.-8      	; 0x8f6 <readPin+0x7a>
     8fe:	81 70       	andi	r24, 0x01	; 1
     900:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     902:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
     904:	08 95       	ret

00000906 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     906:	41 30       	cpi	r20, 0x01	; 1
     908:	29 f4       	brne	.+10     	; 0x914 <writePins+0xe>
		SETBits(*port,mask);
     90a:	fc 01       	movw	r30, r24
     90c:	20 81       	ld	r18, Z
     90e:	62 2b       	or	r22, r18
     910:	60 83       	st	Z, r22
     912:	08 95       	ret
	else if(logic==LOW)
     914:	41 11       	cpse	r20, r1
     916:	05 c0       	rjmp	.+10     	; 0x922 <writePins+0x1c>
		CLRBits(*port,mask);
     918:	fc 01       	movw	r30, r24
     91a:	20 81       	ld	r18, Z
     91c:	60 95       	com	r22
     91e:	62 23       	and	r22, r18
     920:	60 83       	st	Z, r22
     922:	08 95       	ret

00000924 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     924:	41 30       	cpi	r20, 0x01	; 1
     926:	29 f4       	brne	.+10     	; 0x932 <pinsDirection+0xe>
		SETBits(*ddr,mask);
     928:	fc 01       	movw	r30, r24
     92a:	20 81       	ld	r18, Z
     92c:	62 2b       	or	r22, r18
     92e:	60 83       	st	Z, r22
     930:	08 95       	ret
	else if(direction == INPUT)
     932:	41 11       	cpse	r20, r1
     934:	05 c0       	rjmp	.+10     	; 0x940 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     936:	fc 01       	movw	r30, r24
     938:	20 81       	ld	r18, Z
     93a:	60 95       	com	r22
     93c:	62 23       	and	r22, r18
     93e:	60 83       	st	Z, r22
     940:	08 95       	ret

00000942 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
     942:	1f 92       	push	r1
     944:	0f 92       	push	r0
     946:	0f b6       	in	r0, 0x3f	; 63
     948:	0f 92       	push	r0
     94a:	11 24       	eor	r1, r1
     94c:	8f 93       	push	r24
     94e:	9f 93       	push	r25
     950:	af 93       	push	r26
     952:	bf 93       	push	r27
	overflow++;	
     954:	80 91 c4 00 	lds	r24, 0x00C4	; 0x8000c4 <overflow>
     958:	90 91 c5 00 	lds	r25, 0x00C5	; 0x8000c5 <overflow+0x1>
     95c:	a0 91 c6 00 	lds	r26, 0x00C6	; 0x8000c6 <overflow+0x2>
     960:	b0 91 c7 00 	lds	r27, 0x00C7	; 0x8000c7 <overflow+0x3>
     964:	01 96       	adiw	r24, 0x01	; 1
     966:	a1 1d       	adc	r26, r1
     968:	b1 1d       	adc	r27, r1
     96a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <overflow>
     96e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <overflow+0x1>
     972:	a0 93 c6 00 	sts	0x00C6, r26	; 0x8000c6 <overflow+0x2>
     976:	b0 93 c7 00 	sts	0x00C7, r27	; 0x8000c7 <overflow+0x3>
}
     97a:	bf 91       	pop	r27
     97c:	af 91       	pop	r26
     97e:	9f 91       	pop	r25
     980:	8f 91       	pop	r24
     982:	0f 90       	pop	r0
     984:	0f be       	out	0x3f, r0	; 63
     986:	0f 90       	pop	r0
     988:	1f 90       	pop	r1
     98a:	18 95       	reti

0000098c <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	8f 93       	push	r24
     998:	9f 93       	push	r25
     99a:	ef 93       	push	r30
     99c:	ff 93       	push	r31
	gps[i]=UDR;
     99e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <i>
     9a2:	e8 2f       	mov	r30, r24
     9a4:	f0 e0       	ldi	r31, 0x00	; 0
     9a6:	9c b1       	in	r25, 0x0c	; 12
     9a8:	e7 53       	subi	r30, 0x37	; 55
     9aa:	ff 4f       	sbci	r31, 0xFF	; 255
     9ac:	90 83       	st	Z, r25
	i++;
     9ae:	8f 5f       	subi	r24, 0xFF	; 255
     9b0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <i>
	if (i==5)
     9b4:	85 30       	cpi	r24, 0x05	; 5
     9b6:	19 f4       	brne	.+6      	; 0x9be <__vector_13+0x32>
	{
		gps[6]='\0';
     9b8:	10 92 cf 00 	sts	0x00CF, r1	; 0x8000cf <gps+0x6>
		cli();
     9bc:	f8 94       	cli
	}
}
     9be:	ff 91       	pop	r31
     9c0:	ef 91       	pop	r30
     9c2:	9f 91       	pop	r25
     9c4:	8f 91       	pop	r24
     9c6:	0f 90       	pop	r0
     9c8:	0f be       	out	0x3f, r0	; 63
     9ca:	0f 90       	pop	r0
     9cc:	1f 90       	pop	r1
     9ce:	18 95       	reti

000009d0 <FireAlarm>:
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
}
     9d0:	92 b3       	in	r25, 0x12	; 18
     9d2:	88 e0       	ldi	r24, 0x08	; 8
     9d4:	89 27       	eor	r24, r25
     9d6:	82 bb       	out	0x12, r24	; 18
     9d8:	88 b3       	in	r24, 0x18	; 24
     9da:	80 58       	subi	r24, 0x80	; 128
     9dc:	88 bb       	out	0x18, r24	; 24
     9de:	08 95       	ret

000009e0 <turnOnFireAlarm>:
     9e0:	88 ee       	ldi	r24, 0xE8	; 232
     9e2:	94 e0       	ldi	r25, 0x04	; 4
     9e4:	0e 94 ca 02 	call	0x594	; 0x594 <Callback>
     9e8:	08 95       	ret

000009ea <Project_Init>:
     9ea:	0e 94 b8 01 	call	0x370	; 0x370 <KEYPAD_Init>
     9ee:	0e 94 29 02 	call	0x452	; 0x452 <LCD_init>
     9f2:	0e 94 fd 02 	call	0x5fa	; 0x5fa <ADC_init>
     9f6:	61 e0       	ldi	r22, 0x01	; 1
     9f8:	86 e0       	ldi	r24, 0x06	; 6
     9fa:	0e 94 cf 02 	call	0x59e	; 0x59e <INT_init>
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	84 e1       	ldi	r24, 0x14	; 20
     a02:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	8f e0       	ldi	r24, 0x0F	; 15
     a0a:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
     a0e:	61 e0       	ldi	r22, 0x01	; 1
     a10:	8c e1       	ldi	r24, 0x1C	; 28
     a12:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
     a16:	61 e0       	ldi	r22, 0x01	; 1
     a18:	8d e1       	ldi	r24, 0x1D	; 29
     a1a:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
     a1e:	61 e0       	ldi	r22, 0x01	; 1
     a20:	8b e1       	ldi	r24, 0x1B	; 27
     a22:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
     a26:	60 e0       	ldi	r22, 0x00	; 0
     a28:	8a e1       	ldi	r24, 0x1A	; 26
     a2a:	0e 94 a8 03 	call	0x750	; 0x750 <pinDirection>
     a2e:	08 95       	ret

00000a30 <temp>:
	
	temp();
}

void temp(void)
{
     a30:	cf 93       	push	r28
     a32:	df 93       	push	r29
     a34:	cd b7       	in	r28, 0x3d	; 61
     a36:	de b7       	in	r29, 0x3e	; 62
     a38:	c8 57       	subi	r28, 0x78	; 120
     a3a:	d1 09       	sbc	r29, r1
     a3c:	0f b6       	in	r0, 0x3f	; 63
     a3e:	f8 94       	cli
     a40:	de bf       	out	0x3e, r29	; 62
     a42:	0f be       	out	0x3f, r0	; 63
     a44:	cd bf       	out	0x3d, r28	; 61
	u8 temp[60];
	u8 hum[60];
	disp_strXY(3,1,"Humid=     %RH");
     a46:	4d e8       	ldi	r20, 0x8D	; 141
     a48:	50 e0       	ldi	r21, 0x00	; 0
     a4a:	61 e0       	ldi	r22, 0x01	; 1
     a4c:	83 e0       	ldi	r24, 0x03	; 3
     a4e:	0e 94 8c 02 	call	0x518	; 0x518 <disp_strXY>
	disp_strXY(4,1,"temp=      Deg.c");
     a52:	4c e9       	ldi	r20, 0x9C	; 156
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	61 e0       	ldi	r22, 0x01	; 1
     a58:	84 e0       	ldi	r24, 0x04	; 4
     a5a:	0e 94 8c 02 	call	0x518	; 0x518 <disp_strXY>
	DHT_Represent(hum,temp);
     a5e:	be 01       	movw	r22, r28
     a60:	6f 5f       	subi	r22, 0xFF	; 255
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	ce 01       	movw	r24, r28
     a66:	cd 96       	adiw	r24, 0x3d	; 61
     a68:	0e 94 88 01 	call	0x310	; 0x310 <DHT_Represent>
	disp_strXY(3,7,hum);
     a6c:	ae 01       	movw	r20, r28
     a6e:	43 5c       	subi	r20, 0xC3	; 195
     a70:	5f 4f       	sbci	r21, 0xFF	; 255
     a72:	67 e0       	ldi	r22, 0x07	; 7
     a74:	83 e0       	ldi	r24, 0x03	; 3
     a76:	0e 94 8c 02 	call	0x518	; 0x518 <disp_strXY>
	disp_strXY(4,6,temp);
     a7a:	ae 01       	movw	r20, r28
     a7c:	4f 5f       	subi	r20, 0xFF	; 255
     a7e:	5f 4f       	sbci	r21, 0xFF	; 255
     a80:	66 e0       	ldi	r22, 0x06	; 6
     a82:	84 e0       	ldi	r24, 0x04	; 4
     a84:	0e 94 8c 02 	call	0x518	; 0x518 <disp_strXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a88:	2f ef       	ldi	r18, 0xFF	; 255
     a8a:	89 e6       	ldi	r24, 0x69	; 105
     a8c:	98 e1       	ldi	r25, 0x18	; 24
     a8e:	21 50       	subi	r18, 0x01	; 1
     a90:	80 40       	sbci	r24, 0x00	; 0
     a92:	90 40       	sbci	r25, 0x00	; 0
     a94:	e1 f7       	brne	.-8      	; 0xa8e <temp+0x5e>
     a96:	00 c0       	rjmp	.+0      	; 0xa98 <temp+0x68>
     a98:	00 00       	nop
	_delay_ms(500);
}
     a9a:	c8 58       	subi	r28, 0x88	; 136
     a9c:	df 4f       	sbci	r29, 0xFF	; 255
     a9e:	0f b6       	in	r0, 0x3f	; 63
     aa0:	f8 94       	cli
     aa2:	de bf       	out	0x3e, r29	; 62
     aa4:	0f be       	out	0x3f, r0	; 63
     aa6:	cd bf       	out	0x3d, r28	; 61
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	08 95       	ret

00000aae <AnalogSensors>:
	disp_intXY(2,6,trials);
	Get_Password(password);	
}

void AnalogSensors(void)
{
     aae:	cf 92       	push	r12
     ab0:	df 92       	push	r13
     ab2:	ef 92       	push	r14
     ab4:	ff 92       	push	r15
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
	LCD_CLEAR();
     abe:	0e 94 15 02 	call	0x42a	; 0x42a <LCD_CLEAR>
	u16 LDR=0;
	u16 soil=0;
	soil=read_analog(SOILSENSOR);
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	90 e0       	ldi	r25, 0x00	; 0
     ac6:	0e 94 04 03 	call	0x608	; 0x608 <read_analog>
     aca:	ec 01       	movw	r28, r24
	LDR=read_analog(LDRSENSOR);
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 04 03 	call	0x608	; 0x608 <read_analog>
     ad4:	8c 01       	movw	r16, r24
	soil=(100-(soil*100UL)/1019UL);
     ad6:	9e 01       	movw	r18, r28
     ad8:	a4 e6       	ldi	r26, 0x64	; 100
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__umulhisi3>
     ae0:	2b ef       	ldi	r18, 0xFB	; 251
     ae2:	33 e0       	ldi	r19, 0x03	; 3
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodsi4>
     aec:	c4 e6       	ldi	r28, 0x64	; 100
     aee:	d0 e0       	ldi	r29, 0x00	; 0
     af0:	c2 1b       	sub	r28, r18
     af2:	d3 0b       	sbc	r29, r19
	LDR=((LDR*100UL)/407UL);
     af4:	98 01       	movw	r18, r16
     af6:	a4 e6       	ldi	r26, 0x64	; 100
     af8:	b0 e0       	ldi	r27, 0x00	; 0
     afa:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <__umulhisi3>
     afe:	27 e9       	ldi	r18, 0x97	; 151
     b00:	31 e0       	ldi	r19, 0x01	; 1
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	50 e0       	ldi	r21, 0x00	; 0
     b06:	0e 94 c7 05 	call	0xb8e	; 0xb8e <__udivmodsi4>
     b0a:	69 01       	movw	r12, r18
     b0c:	7a 01       	movw	r14, r20
     b0e:	89 01       	movw	r16, r18
	disp_strXY(1,1,"soil water=");
     b10:	4d ea       	ldi	r20, 0xAD	; 173
     b12:	50 e0       	ldi	r21, 0x00	; 0
     b14:	61 e0       	ldi	r22, 0x01	; 1
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 8c 02 	call	0x518	; 0x518 <disp_strXY>
	disp_int(soil);
     b1c:	be 01       	movw	r22, r28
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	0e 94 97 02 	call	0x52e	; 0x52e <disp_int>
	disp_char('%');
     b26:	85 e2       	ldi	r24, 0x25	; 37
     b28:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <disp_char>
	disp_strXY(2,1,"Light = ");
     b2c:	49 eb       	ldi	r20, 0xB9	; 185
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	82 e0       	ldi	r24, 0x02	; 2
     b34:	0e 94 8c 02 	call	0x518	; 0x518 <disp_strXY>
	disp_int(LDR);
     b38:	c7 01       	movw	r24, r14
     b3a:	b6 01       	movw	r22, r12
     b3c:	88 27       	eor	r24, r24
     b3e:	99 27       	eor	r25, r25
     b40:	0e 94 97 02 	call	0x52e	; 0x52e <disp_int>
	disp_char('%');
     b44:	85 e2       	ldi	r24, 0x25	; 37
     b46:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <disp_char>
	//controlling planets irrigation 
	if (soil<=30)//turn on pump
     b4a:	6f 97       	sbiw	r28, 0x1f	; 31
     b4c:	28 f4       	brcc	.+10     	; 0xb58 <AnalogSensors+0xaa>
	{
		writePin(SOIL_PUMP,HIGH);
     b4e:	61 e0       	ldi	r22, 0x01	; 1
     b50:	8c e1       	ldi	r24, 0x1C	; 28
     b52:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     b56:	04 c0       	rjmp	.+8      	; 0xb60 <AnalogSensors+0xb2>
	}
	else
	{
		writePin(SOIL_PUMP,LOW);
     b58:	60 e0       	ldi	r22, 0x00	; 0
     b5a:	8c e1       	ldi	r24, 0x1C	; 28
     b5c:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
	}
	//controlling outer lights
	if (LDR<30)//turn on lights
     b60:	0e 31       	cpi	r16, 0x1E	; 30
     b62:	11 05       	cpc	r17, r1
     b64:	28 f4       	brcc	.+10     	; 0xb70 <AnalogSensors+0xc2>
	{
		writePin(OUTERLIGHT,HIGH);
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	8d e1       	ldi	r24, 0x1D	; 29
     b6a:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
     b6e:	04 c0       	rjmp	.+8      	; 0xb78 <AnalogSensors+0xca>
	}
	else
	{
		writePin(OUTERLIGHT,LOW);
     b70:	60 e0       	ldi	r22, 0x00	; 0
     b72:	8d e1       	ldi	r24, 0x1D	; 29
     b74:	0e 94 12 03 	call	0x624	; 0x624 <writePin>
	}
	
	temp();
     b78:	0e 94 18 05 	call	0xa30	; 0xa30 <temp>
}
     b7c:	df 91       	pop	r29
     b7e:	cf 91       	pop	r28
     b80:	1f 91       	pop	r17
     b82:	0f 91       	pop	r16
     b84:	ff 90       	pop	r15
     b86:	ef 90       	pop	r14
     b88:	df 90       	pop	r13
     b8a:	cf 90       	pop	r12
     b8c:	08 95       	ret

00000b8e <__udivmodsi4>:
     b8e:	a1 e2       	ldi	r26, 0x21	; 33
     b90:	1a 2e       	mov	r1, r26
     b92:	aa 1b       	sub	r26, r26
     b94:	bb 1b       	sub	r27, r27
     b96:	fd 01       	movw	r30, r26
     b98:	0d c0       	rjmp	.+26     	; 0xbb4 <__udivmodsi4_ep>

00000b9a <__udivmodsi4_loop>:
     b9a:	aa 1f       	adc	r26, r26
     b9c:	bb 1f       	adc	r27, r27
     b9e:	ee 1f       	adc	r30, r30
     ba0:	ff 1f       	adc	r31, r31
     ba2:	a2 17       	cp	r26, r18
     ba4:	b3 07       	cpc	r27, r19
     ba6:	e4 07       	cpc	r30, r20
     ba8:	f5 07       	cpc	r31, r21
     baa:	20 f0       	brcs	.+8      	; 0xbb4 <__udivmodsi4_ep>
     bac:	a2 1b       	sub	r26, r18
     bae:	b3 0b       	sbc	r27, r19
     bb0:	e4 0b       	sbc	r30, r20
     bb2:	f5 0b       	sbc	r31, r21

00000bb4 <__udivmodsi4_ep>:
     bb4:	66 1f       	adc	r22, r22
     bb6:	77 1f       	adc	r23, r23
     bb8:	88 1f       	adc	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	1a 94       	dec	r1
     bbe:	69 f7       	brne	.-38     	; 0xb9a <__udivmodsi4_loop>
     bc0:	60 95       	com	r22
     bc2:	70 95       	com	r23
     bc4:	80 95       	com	r24
     bc6:	90 95       	com	r25
     bc8:	9b 01       	movw	r18, r22
     bca:	ac 01       	movw	r20, r24
     bcc:	bd 01       	movw	r22, r26
     bce:	cf 01       	movw	r24, r30
     bd0:	08 95       	ret

00000bd2 <__umulhisi3>:
     bd2:	a2 9f       	mul	r26, r18
     bd4:	b0 01       	movw	r22, r0
     bd6:	b3 9f       	mul	r27, r19
     bd8:	c0 01       	movw	r24, r0
     bda:	a3 9f       	mul	r26, r19
     bdc:	70 0d       	add	r23, r0
     bde:	81 1d       	adc	r24, r1
     be0:	11 24       	eor	r1, r1
     be2:	91 1d       	adc	r25, r1
     be4:	b2 9f       	mul	r27, r18
     be6:	70 0d       	add	r23, r0
     be8:	81 1d       	adc	r24, r1
     bea:	11 24       	eor	r1, r1
     bec:	91 1d       	adc	r25, r1
     bee:	08 95       	ret

00000bf0 <strcat>:
     bf0:	fb 01       	movw	r30, r22
     bf2:	dc 01       	movw	r26, r24
     bf4:	0d 90       	ld	r0, X+
     bf6:	00 20       	and	r0, r0
     bf8:	e9 f7       	brne	.-6      	; 0xbf4 <strcat+0x4>
     bfa:	11 97       	sbiw	r26, 0x01	; 1
     bfc:	01 90       	ld	r0, Z+
     bfe:	0d 92       	st	X+, r0
     c00:	00 20       	and	r0, r0
     c02:	e1 f7       	brne	.-8      	; 0xbfc <strcat+0xc>
     c04:	08 95       	ret

00000c06 <sprintf>:
     c06:	ae e0       	ldi	r26, 0x0E	; 14
     c08:	b0 e0       	ldi	r27, 0x00	; 0
     c0a:	e9 e0       	ldi	r30, 0x09	; 9
     c0c:	f6 e0       	ldi	r31, 0x06	; 6
     c0e:	0c 94 c4 08 	jmp	0x1188	; 0x1188 <__prologue_saves__+0x1c>
     c12:	0d 89       	ldd	r16, Y+21	; 0x15
     c14:	1e 89       	ldd	r17, Y+22	; 0x16
     c16:	86 e0       	ldi	r24, 0x06	; 6
     c18:	8c 83       	std	Y+4, r24	; 0x04
     c1a:	1a 83       	std	Y+2, r17	; 0x02
     c1c:	09 83       	std	Y+1, r16	; 0x01
     c1e:	8f ef       	ldi	r24, 0xFF	; 255
     c20:	9f e7       	ldi	r25, 0x7F	; 127
     c22:	9e 83       	std	Y+6, r25	; 0x06
     c24:	8d 83       	std	Y+5, r24	; 0x05
     c26:	ae 01       	movw	r20, r28
     c28:	47 5e       	subi	r20, 0xE7	; 231
     c2a:	5f 4f       	sbci	r21, 0xFF	; 255
     c2c:	6f 89       	ldd	r22, Y+23	; 0x17
     c2e:	78 8d       	ldd	r23, Y+24	; 0x18
     c30:	ce 01       	movw	r24, r28
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	0e 94 25 06 	call	0xc4a	; 0xc4a <vfprintf>
     c38:	ef 81       	ldd	r30, Y+7	; 0x07
     c3a:	f8 85       	ldd	r31, Y+8	; 0x08
     c3c:	e0 0f       	add	r30, r16
     c3e:	f1 1f       	adc	r31, r17
     c40:	10 82       	st	Z, r1
     c42:	2e 96       	adiw	r28, 0x0e	; 14
     c44:	e4 e0       	ldi	r30, 0x04	; 4
     c46:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__epilogue_restores__+0x1c>

00000c4a <vfprintf>:
     c4a:	ab e0       	ldi	r26, 0x0B	; 11
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	eb e2       	ldi	r30, 0x2B	; 43
     c50:	f6 e0       	ldi	r31, 0x06	; 6
     c52:	0c 94 b6 08 	jmp	0x116c	; 0x116c <__prologue_saves__>
     c56:	6c 01       	movw	r12, r24
     c58:	7b 01       	movw	r14, r22
     c5a:	8a 01       	movw	r16, r20
     c5c:	fc 01       	movw	r30, r24
     c5e:	17 82       	std	Z+7, r1	; 0x07
     c60:	16 82       	std	Z+6, r1	; 0x06
     c62:	83 81       	ldd	r24, Z+3	; 0x03
     c64:	81 ff       	sbrs	r24, 1
     c66:	cc c1       	rjmp	.+920    	; 0x1000 <vfprintf+0x3b6>
     c68:	ce 01       	movw	r24, r28
     c6a:	01 96       	adiw	r24, 0x01	; 1
     c6c:	3c 01       	movw	r6, r24
     c6e:	f6 01       	movw	r30, r12
     c70:	93 81       	ldd	r25, Z+3	; 0x03
     c72:	f7 01       	movw	r30, r14
     c74:	93 fd       	sbrc	r25, 3
     c76:	85 91       	lpm	r24, Z+
     c78:	93 ff       	sbrs	r25, 3
     c7a:	81 91       	ld	r24, Z+
     c7c:	7f 01       	movw	r14, r30
     c7e:	88 23       	and	r24, r24
     c80:	09 f4       	brne	.+2      	; 0xc84 <vfprintf+0x3a>
     c82:	ba c1       	rjmp	.+884    	; 0xff8 <vfprintf+0x3ae>
     c84:	85 32       	cpi	r24, 0x25	; 37
     c86:	39 f4       	brne	.+14     	; 0xc96 <vfprintf+0x4c>
     c88:	93 fd       	sbrc	r25, 3
     c8a:	85 91       	lpm	r24, Z+
     c8c:	93 ff       	sbrs	r25, 3
     c8e:	81 91       	ld	r24, Z+
     c90:	7f 01       	movw	r14, r30
     c92:	85 32       	cpi	r24, 0x25	; 37
     c94:	29 f4       	brne	.+10     	; 0xca0 <vfprintf+0x56>
     c96:	b6 01       	movw	r22, r12
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     c9e:	e7 cf       	rjmp	.-50     	; 0xc6e <vfprintf+0x24>
     ca0:	91 2c       	mov	r9, r1
     ca2:	21 2c       	mov	r2, r1
     ca4:	31 2c       	mov	r3, r1
     ca6:	ff e1       	ldi	r31, 0x1F	; 31
     ca8:	f3 15       	cp	r31, r3
     caa:	d8 f0       	brcs	.+54     	; 0xce2 <vfprintf+0x98>
     cac:	8b 32       	cpi	r24, 0x2B	; 43
     cae:	79 f0       	breq	.+30     	; 0xcce <vfprintf+0x84>
     cb0:	38 f4       	brcc	.+14     	; 0xcc0 <vfprintf+0x76>
     cb2:	80 32       	cpi	r24, 0x20	; 32
     cb4:	79 f0       	breq	.+30     	; 0xcd4 <vfprintf+0x8a>
     cb6:	83 32       	cpi	r24, 0x23	; 35
     cb8:	a1 f4       	brne	.+40     	; 0xce2 <vfprintf+0x98>
     cba:	23 2d       	mov	r18, r3
     cbc:	20 61       	ori	r18, 0x10	; 16
     cbe:	1d c0       	rjmp	.+58     	; 0xcfa <vfprintf+0xb0>
     cc0:	8d 32       	cpi	r24, 0x2D	; 45
     cc2:	61 f0       	breq	.+24     	; 0xcdc <vfprintf+0x92>
     cc4:	80 33       	cpi	r24, 0x30	; 48
     cc6:	69 f4       	brne	.+26     	; 0xce2 <vfprintf+0x98>
     cc8:	23 2d       	mov	r18, r3
     cca:	21 60       	ori	r18, 0x01	; 1
     ccc:	16 c0       	rjmp	.+44     	; 0xcfa <vfprintf+0xb0>
     cce:	83 2d       	mov	r24, r3
     cd0:	82 60       	ori	r24, 0x02	; 2
     cd2:	38 2e       	mov	r3, r24
     cd4:	e3 2d       	mov	r30, r3
     cd6:	e4 60       	ori	r30, 0x04	; 4
     cd8:	3e 2e       	mov	r3, r30
     cda:	2a c0       	rjmp	.+84     	; 0xd30 <vfprintf+0xe6>
     cdc:	f3 2d       	mov	r31, r3
     cde:	f8 60       	ori	r31, 0x08	; 8
     ce0:	1d c0       	rjmp	.+58     	; 0xd1c <vfprintf+0xd2>
     ce2:	37 fc       	sbrc	r3, 7
     ce4:	2d c0       	rjmp	.+90     	; 0xd40 <vfprintf+0xf6>
     ce6:	20 ed       	ldi	r18, 0xD0	; 208
     ce8:	28 0f       	add	r18, r24
     cea:	2a 30       	cpi	r18, 0x0A	; 10
     cec:	40 f0       	brcs	.+16     	; 0xcfe <vfprintf+0xb4>
     cee:	8e 32       	cpi	r24, 0x2E	; 46
     cf0:	b9 f4       	brne	.+46     	; 0xd20 <vfprintf+0xd6>
     cf2:	36 fc       	sbrc	r3, 6
     cf4:	81 c1       	rjmp	.+770    	; 0xff8 <vfprintf+0x3ae>
     cf6:	23 2d       	mov	r18, r3
     cf8:	20 64       	ori	r18, 0x40	; 64
     cfa:	32 2e       	mov	r3, r18
     cfc:	19 c0       	rjmp	.+50     	; 0xd30 <vfprintf+0xe6>
     cfe:	36 fe       	sbrs	r3, 6
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <vfprintf+0xc4>
     d02:	8a e0       	ldi	r24, 0x0A	; 10
     d04:	98 9e       	mul	r9, r24
     d06:	20 0d       	add	r18, r0
     d08:	11 24       	eor	r1, r1
     d0a:	92 2e       	mov	r9, r18
     d0c:	11 c0       	rjmp	.+34     	; 0xd30 <vfprintf+0xe6>
     d0e:	ea e0       	ldi	r30, 0x0A	; 10
     d10:	2e 9e       	mul	r2, r30
     d12:	20 0d       	add	r18, r0
     d14:	11 24       	eor	r1, r1
     d16:	22 2e       	mov	r2, r18
     d18:	f3 2d       	mov	r31, r3
     d1a:	f0 62       	ori	r31, 0x20	; 32
     d1c:	3f 2e       	mov	r3, r31
     d1e:	08 c0       	rjmp	.+16     	; 0xd30 <vfprintf+0xe6>
     d20:	8c 36       	cpi	r24, 0x6C	; 108
     d22:	21 f4       	brne	.+8      	; 0xd2c <vfprintf+0xe2>
     d24:	83 2d       	mov	r24, r3
     d26:	80 68       	ori	r24, 0x80	; 128
     d28:	38 2e       	mov	r3, r24
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <vfprintf+0xe6>
     d2c:	88 36       	cpi	r24, 0x68	; 104
     d2e:	41 f4       	brne	.+16     	; 0xd40 <vfprintf+0xf6>
     d30:	f7 01       	movw	r30, r14
     d32:	93 fd       	sbrc	r25, 3
     d34:	85 91       	lpm	r24, Z+
     d36:	93 ff       	sbrs	r25, 3
     d38:	81 91       	ld	r24, Z+
     d3a:	7f 01       	movw	r14, r30
     d3c:	81 11       	cpse	r24, r1
     d3e:	b3 cf       	rjmp	.-154    	; 0xca6 <vfprintf+0x5c>
     d40:	98 2f       	mov	r25, r24
     d42:	9f 7d       	andi	r25, 0xDF	; 223
     d44:	95 54       	subi	r25, 0x45	; 69
     d46:	93 30       	cpi	r25, 0x03	; 3
     d48:	28 f4       	brcc	.+10     	; 0xd54 <vfprintf+0x10a>
     d4a:	0c 5f       	subi	r16, 0xFC	; 252
     d4c:	1f 4f       	sbci	r17, 0xFF	; 255
     d4e:	9f e3       	ldi	r25, 0x3F	; 63
     d50:	99 83       	std	Y+1, r25	; 0x01
     d52:	0d c0       	rjmp	.+26     	; 0xd6e <vfprintf+0x124>
     d54:	83 36       	cpi	r24, 0x63	; 99
     d56:	31 f0       	breq	.+12     	; 0xd64 <vfprintf+0x11a>
     d58:	83 37       	cpi	r24, 0x73	; 115
     d5a:	71 f0       	breq	.+28     	; 0xd78 <vfprintf+0x12e>
     d5c:	83 35       	cpi	r24, 0x53	; 83
     d5e:	09 f0       	breq	.+2      	; 0xd62 <vfprintf+0x118>
     d60:	59 c0       	rjmp	.+178    	; 0xe14 <vfprintf+0x1ca>
     d62:	21 c0       	rjmp	.+66     	; 0xda6 <vfprintf+0x15c>
     d64:	f8 01       	movw	r30, r16
     d66:	80 81       	ld	r24, Z
     d68:	89 83       	std	Y+1, r24	; 0x01
     d6a:	0e 5f       	subi	r16, 0xFE	; 254
     d6c:	1f 4f       	sbci	r17, 0xFF	; 255
     d6e:	88 24       	eor	r8, r8
     d70:	83 94       	inc	r8
     d72:	91 2c       	mov	r9, r1
     d74:	53 01       	movw	r10, r6
     d76:	13 c0       	rjmp	.+38     	; 0xd9e <vfprintf+0x154>
     d78:	28 01       	movw	r4, r16
     d7a:	f2 e0       	ldi	r31, 0x02	; 2
     d7c:	4f 0e       	add	r4, r31
     d7e:	51 1c       	adc	r5, r1
     d80:	f8 01       	movw	r30, r16
     d82:	a0 80       	ld	r10, Z
     d84:	b1 80       	ldd	r11, Z+1	; 0x01
     d86:	36 fe       	sbrs	r3, 6
     d88:	03 c0       	rjmp	.+6      	; 0xd90 <vfprintf+0x146>
     d8a:	69 2d       	mov	r22, r9
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	02 c0       	rjmp	.+4      	; 0xd94 <vfprintf+0x14a>
     d90:	6f ef       	ldi	r22, 0xFF	; 255
     d92:	7f ef       	ldi	r23, 0xFF	; 255
     d94:	c5 01       	movw	r24, r10
     d96:	0e 94 11 08 	call	0x1022	; 0x1022 <strnlen>
     d9a:	4c 01       	movw	r8, r24
     d9c:	82 01       	movw	r16, r4
     d9e:	f3 2d       	mov	r31, r3
     da0:	ff 77       	andi	r31, 0x7F	; 127
     da2:	3f 2e       	mov	r3, r31
     da4:	16 c0       	rjmp	.+44     	; 0xdd2 <vfprintf+0x188>
     da6:	28 01       	movw	r4, r16
     da8:	22 e0       	ldi	r18, 0x02	; 2
     daa:	42 0e       	add	r4, r18
     dac:	51 1c       	adc	r5, r1
     dae:	f8 01       	movw	r30, r16
     db0:	a0 80       	ld	r10, Z
     db2:	b1 80       	ldd	r11, Z+1	; 0x01
     db4:	36 fe       	sbrs	r3, 6
     db6:	03 c0       	rjmp	.+6      	; 0xdbe <vfprintf+0x174>
     db8:	69 2d       	mov	r22, r9
     dba:	70 e0       	ldi	r23, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <vfprintf+0x178>
     dbe:	6f ef       	ldi	r22, 0xFF	; 255
     dc0:	7f ef       	ldi	r23, 0xFF	; 255
     dc2:	c5 01       	movw	r24, r10
     dc4:	0e 94 06 08 	call	0x100c	; 0x100c <strnlen_P>
     dc8:	4c 01       	movw	r8, r24
     dca:	f3 2d       	mov	r31, r3
     dcc:	f0 68       	ori	r31, 0x80	; 128
     dce:	3f 2e       	mov	r3, r31
     dd0:	82 01       	movw	r16, r4
     dd2:	33 fc       	sbrc	r3, 3
     dd4:	1b c0       	rjmp	.+54     	; 0xe0c <vfprintf+0x1c2>
     dd6:	82 2d       	mov	r24, r2
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	88 16       	cp	r8, r24
     ddc:	99 06       	cpc	r9, r25
     dde:	b0 f4       	brcc	.+44     	; 0xe0c <vfprintf+0x1c2>
     de0:	b6 01       	movw	r22, r12
     de2:	80 e2       	ldi	r24, 0x20	; 32
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     dea:	2a 94       	dec	r2
     dec:	f4 cf       	rjmp	.-24     	; 0xdd6 <vfprintf+0x18c>
     dee:	f5 01       	movw	r30, r10
     df0:	37 fc       	sbrc	r3, 7
     df2:	85 91       	lpm	r24, Z+
     df4:	37 fe       	sbrs	r3, 7
     df6:	81 91       	ld	r24, Z+
     df8:	5f 01       	movw	r10, r30
     dfa:	b6 01       	movw	r22, r12
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     e02:	21 10       	cpse	r2, r1
     e04:	2a 94       	dec	r2
     e06:	21 e0       	ldi	r18, 0x01	; 1
     e08:	82 1a       	sub	r8, r18
     e0a:	91 08       	sbc	r9, r1
     e0c:	81 14       	cp	r8, r1
     e0e:	91 04       	cpc	r9, r1
     e10:	71 f7       	brne	.-36     	; 0xdee <vfprintf+0x1a4>
     e12:	e8 c0       	rjmp	.+464    	; 0xfe4 <vfprintf+0x39a>
     e14:	84 36       	cpi	r24, 0x64	; 100
     e16:	11 f0       	breq	.+4      	; 0xe1c <vfprintf+0x1d2>
     e18:	89 36       	cpi	r24, 0x69	; 105
     e1a:	41 f5       	brne	.+80     	; 0xe6c <vfprintf+0x222>
     e1c:	f8 01       	movw	r30, r16
     e1e:	37 fe       	sbrs	r3, 7
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <vfprintf+0x1e6>
     e22:	60 81       	ld	r22, Z
     e24:	71 81       	ldd	r23, Z+1	; 0x01
     e26:	82 81       	ldd	r24, Z+2	; 0x02
     e28:	93 81       	ldd	r25, Z+3	; 0x03
     e2a:	0c 5f       	subi	r16, 0xFC	; 252
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	08 c0       	rjmp	.+16     	; 0xe40 <vfprintf+0x1f6>
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	07 2e       	mov	r0, r23
     e36:	00 0c       	add	r0, r0
     e38:	88 0b       	sbc	r24, r24
     e3a:	99 0b       	sbc	r25, r25
     e3c:	0e 5f       	subi	r16, 0xFE	; 254
     e3e:	1f 4f       	sbci	r17, 0xFF	; 255
     e40:	f3 2d       	mov	r31, r3
     e42:	ff 76       	andi	r31, 0x6F	; 111
     e44:	3f 2e       	mov	r3, r31
     e46:	97 ff       	sbrs	r25, 7
     e48:	09 c0       	rjmp	.+18     	; 0xe5c <vfprintf+0x212>
     e4a:	90 95       	com	r25
     e4c:	80 95       	com	r24
     e4e:	70 95       	com	r23
     e50:	61 95       	neg	r22
     e52:	7f 4f       	sbci	r23, 0xFF	; 255
     e54:	8f 4f       	sbci	r24, 0xFF	; 255
     e56:	9f 4f       	sbci	r25, 0xFF	; 255
     e58:	f0 68       	ori	r31, 0x80	; 128
     e5a:	3f 2e       	mov	r3, r31
     e5c:	2a e0       	ldi	r18, 0x0A	; 10
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	a3 01       	movw	r20, r6
     e62:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__ultoa_invert>
     e66:	88 2e       	mov	r8, r24
     e68:	86 18       	sub	r8, r6
     e6a:	45 c0       	rjmp	.+138    	; 0xef6 <vfprintf+0x2ac>
     e6c:	85 37       	cpi	r24, 0x75	; 117
     e6e:	31 f4       	brne	.+12     	; 0xe7c <vfprintf+0x232>
     e70:	23 2d       	mov	r18, r3
     e72:	2f 7e       	andi	r18, 0xEF	; 239
     e74:	b2 2e       	mov	r11, r18
     e76:	2a e0       	ldi	r18, 0x0A	; 10
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	25 c0       	rjmp	.+74     	; 0xec6 <vfprintf+0x27c>
     e7c:	93 2d       	mov	r25, r3
     e7e:	99 7f       	andi	r25, 0xF9	; 249
     e80:	b9 2e       	mov	r11, r25
     e82:	8f 36       	cpi	r24, 0x6F	; 111
     e84:	c1 f0       	breq	.+48     	; 0xeb6 <vfprintf+0x26c>
     e86:	18 f4       	brcc	.+6      	; 0xe8e <vfprintf+0x244>
     e88:	88 35       	cpi	r24, 0x58	; 88
     e8a:	79 f0       	breq	.+30     	; 0xeaa <vfprintf+0x260>
     e8c:	b5 c0       	rjmp	.+362    	; 0xff8 <vfprintf+0x3ae>
     e8e:	80 37       	cpi	r24, 0x70	; 112
     e90:	19 f0       	breq	.+6      	; 0xe98 <vfprintf+0x24e>
     e92:	88 37       	cpi	r24, 0x78	; 120
     e94:	21 f0       	breq	.+8      	; 0xe9e <vfprintf+0x254>
     e96:	b0 c0       	rjmp	.+352    	; 0xff8 <vfprintf+0x3ae>
     e98:	e9 2f       	mov	r30, r25
     e9a:	e0 61       	ori	r30, 0x10	; 16
     e9c:	be 2e       	mov	r11, r30
     e9e:	b4 fe       	sbrs	r11, 4
     ea0:	0d c0       	rjmp	.+26     	; 0xebc <vfprintf+0x272>
     ea2:	fb 2d       	mov	r31, r11
     ea4:	f4 60       	ori	r31, 0x04	; 4
     ea6:	bf 2e       	mov	r11, r31
     ea8:	09 c0       	rjmp	.+18     	; 0xebc <vfprintf+0x272>
     eaa:	34 fe       	sbrs	r3, 4
     eac:	0a c0       	rjmp	.+20     	; 0xec2 <vfprintf+0x278>
     eae:	29 2f       	mov	r18, r25
     eb0:	26 60       	ori	r18, 0x06	; 6
     eb2:	b2 2e       	mov	r11, r18
     eb4:	06 c0       	rjmp	.+12     	; 0xec2 <vfprintf+0x278>
     eb6:	28 e0       	ldi	r18, 0x08	; 8
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	05 c0       	rjmp	.+10     	; 0xec6 <vfprintf+0x27c>
     ebc:	20 e1       	ldi	r18, 0x10	; 16
     ebe:	30 e0       	ldi	r19, 0x00	; 0
     ec0:	02 c0       	rjmp	.+4      	; 0xec6 <vfprintf+0x27c>
     ec2:	20 e1       	ldi	r18, 0x10	; 16
     ec4:	32 e0       	ldi	r19, 0x02	; 2
     ec6:	f8 01       	movw	r30, r16
     ec8:	b7 fe       	sbrs	r11, 7
     eca:	07 c0       	rjmp	.+14     	; 0xeda <vfprintf+0x290>
     ecc:	60 81       	ld	r22, Z
     ece:	71 81       	ldd	r23, Z+1	; 0x01
     ed0:	82 81       	ldd	r24, Z+2	; 0x02
     ed2:	93 81       	ldd	r25, Z+3	; 0x03
     ed4:	0c 5f       	subi	r16, 0xFC	; 252
     ed6:	1f 4f       	sbci	r17, 0xFF	; 255
     ed8:	06 c0       	rjmp	.+12     	; 0xee6 <vfprintf+0x29c>
     eda:	60 81       	ld	r22, Z
     edc:	71 81       	ldd	r23, Z+1	; 0x01
     ede:	80 e0       	ldi	r24, 0x00	; 0
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	0e 5f       	subi	r16, 0xFE	; 254
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	a3 01       	movw	r20, r6
     ee8:	0e 94 58 08 	call	0x10b0	; 0x10b0 <__ultoa_invert>
     eec:	88 2e       	mov	r8, r24
     eee:	86 18       	sub	r8, r6
     ef0:	fb 2d       	mov	r31, r11
     ef2:	ff 77       	andi	r31, 0x7F	; 127
     ef4:	3f 2e       	mov	r3, r31
     ef6:	36 fe       	sbrs	r3, 6
     ef8:	0d c0       	rjmp	.+26     	; 0xf14 <vfprintf+0x2ca>
     efa:	23 2d       	mov	r18, r3
     efc:	2e 7f       	andi	r18, 0xFE	; 254
     efe:	a2 2e       	mov	r10, r18
     f00:	89 14       	cp	r8, r9
     f02:	58 f4       	brcc	.+22     	; 0xf1a <vfprintf+0x2d0>
     f04:	34 fe       	sbrs	r3, 4
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <vfprintf+0x2d4>
     f08:	32 fc       	sbrc	r3, 2
     f0a:	09 c0       	rjmp	.+18     	; 0xf1e <vfprintf+0x2d4>
     f0c:	83 2d       	mov	r24, r3
     f0e:	8e 7e       	andi	r24, 0xEE	; 238
     f10:	a8 2e       	mov	r10, r24
     f12:	05 c0       	rjmp	.+10     	; 0xf1e <vfprintf+0x2d4>
     f14:	b8 2c       	mov	r11, r8
     f16:	a3 2c       	mov	r10, r3
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <vfprintf+0x2d6>
     f1a:	b8 2c       	mov	r11, r8
     f1c:	01 c0       	rjmp	.+2      	; 0xf20 <vfprintf+0x2d6>
     f1e:	b9 2c       	mov	r11, r9
     f20:	a4 fe       	sbrs	r10, 4
     f22:	0f c0       	rjmp	.+30     	; 0xf42 <vfprintf+0x2f8>
     f24:	fe 01       	movw	r30, r28
     f26:	e8 0d       	add	r30, r8
     f28:	f1 1d       	adc	r31, r1
     f2a:	80 81       	ld	r24, Z
     f2c:	80 33       	cpi	r24, 0x30	; 48
     f2e:	21 f4       	brne	.+8      	; 0xf38 <vfprintf+0x2ee>
     f30:	9a 2d       	mov	r25, r10
     f32:	99 7e       	andi	r25, 0xE9	; 233
     f34:	a9 2e       	mov	r10, r25
     f36:	09 c0       	rjmp	.+18     	; 0xf4a <vfprintf+0x300>
     f38:	a2 fe       	sbrs	r10, 2
     f3a:	06 c0       	rjmp	.+12     	; 0xf48 <vfprintf+0x2fe>
     f3c:	b3 94       	inc	r11
     f3e:	b3 94       	inc	r11
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <vfprintf+0x300>
     f42:	8a 2d       	mov	r24, r10
     f44:	86 78       	andi	r24, 0x86	; 134
     f46:	09 f0       	breq	.+2      	; 0xf4a <vfprintf+0x300>
     f48:	b3 94       	inc	r11
     f4a:	a3 fc       	sbrc	r10, 3
     f4c:	11 c0       	rjmp	.+34     	; 0xf70 <vfprintf+0x326>
     f4e:	a0 fe       	sbrs	r10, 0
     f50:	06 c0       	rjmp	.+12     	; 0xf5e <vfprintf+0x314>
     f52:	b2 14       	cp	r11, r2
     f54:	88 f4       	brcc	.+34     	; 0xf78 <vfprintf+0x32e>
     f56:	28 0c       	add	r2, r8
     f58:	92 2c       	mov	r9, r2
     f5a:	9b 18       	sub	r9, r11
     f5c:	0e c0       	rjmp	.+28     	; 0xf7a <vfprintf+0x330>
     f5e:	b2 14       	cp	r11, r2
     f60:	60 f4       	brcc	.+24     	; 0xf7a <vfprintf+0x330>
     f62:	b6 01       	movw	r22, r12
     f64:	80 e2       	ldi	r24, 0x20	; 32
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     f6c:	b3 94       	inc	r11
     f6e:	f7 cf       	rjmp	.-18     	; 0xf5e <vfprintf+0x314>
     f70:	b2 14       	cp	r11, r2
     f72:	18 f4       	brcc	.+6      	; 0xf7a <vfprintf+0x330>
     f74:	2b 18       	sub	r2, r11
     f76:	02 c0       	rjmp	.+4      	; 0xf7c <vfprintf+0x332>
     f78:	98 2c       	mov	r9, r8
     f7a:	21 2c       	mov	r2, r1
     f7c:	a4 fe       	sbrs	r10, 4
     f7e:	10 c0       	rjmp	.+32     	; 0xfa0 <vfprintf+0x356>
     f80:	b6 01       	movw	r22, r12
     f82:	80 e3       	ldi	r24, 0x30	; 48
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     f8a:	a2 fe       	sbrs	r10, 2
     f8c:	17 c0       	rjmp	.+46     	; 0xfbc <vfprintf+0x372>
     f8e:	a1 fc       	sbrc	r10, 1
     f90:	03 c0       	rjmp	.+6      	; 0xf98 <vfprintf+0x34e>
     f92:	88 e7       	ldi	r24, 0x78	; 120
     f94:	90 e0       	ldi	r25, 0x00	; 0
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <vfprintf+0x352>
     f98:	88 e5       	ldi	r24, 0x58	; 88
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	b6 01       	movw	r22, r12
     f9e:	0c c0       	rjmp	.+24     	; 0xfb8 <vfprintf+0x36e>
     fa0:	8a 2d       	mov	r24, r10
     fa2:	86 78       	andi	r24, 0x86	; 134
     fa4:	59 f0       	breq	.+22     	; 0xfbc <vfprintf+0x372>
     fa6:	a1 fe       	sbrs	r10, 1
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfprintf+0x364>
     faa:	8b e2       	ldi	r24, 0x2B	; 43
     fac:	01 c0       	rjmp	.+2      	; 0xfb0 <vfprintf+0x366>
     fae:	80 e2       	ldi	r24, 0x20	; 32
     fb0:	a7 fc       	sbrc	r10, 7
     fb2:	8d e2       	ldi	r24, 0x2D	; 45
     fb4:	b6 01       	movw	r22, r12
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     fbc:	89 14       	cp	r8, r9
     fbe:	38 f4       	brcc	.+14     	; 0xfce <vfprintf+0x384>
     fc0:	b6 01       	movw	r22, r12
     fc2:	80 e3       	ldi	r24, 0x30	; 48
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     fca:	9a 94       	dec	r9
     fcc:	f7 cf       	rjmp	.-18     	; 0xfbc <vfprintf+0x372>
     fce:	8a 94       	dec	r8
     fd0:	f3 01       	movw	r30, r6
     fd2:	e8 0d       	add	r30, r8
     fd4:	f1 1d       	adc	r31, r1
     fd6:	80 81       	ld	r24, Z
     fd8:	b6 01       	movw	r22, r12
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     fe0:	81 10       	cpse	r8, r1
     fe2:	f5 cf       	rjmp	.-22     	; 0xfce <vfprintf+0x384>
     fe4:	22 20       	and	r2, r2
     fe6:	09 f4       	brne	.+2      	; 0xfea <vfprintf+0x3a0>
     fe8:	42 ce       	rjmp	.-892    	; 0xc6e <vfprintf+0x24>
     fea:	b6 01       	movw	r22, r12
     fec:	80 e2       	ldi	r24, 0x20	; 32
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	0e 94 1c 08 	call	0x1038	; 0x1038 <fputc>
     ff4:	2a 94       	dec	r2
     ff6:	f6 cf       	rjmp	.-20     	; 0xfe4 <vfprintf+0x39a>
     ff8:	f6 01       	movw	r30, r12
     ffa:	86 81       	ldd	r24, Z+6	; 0x06
     ffc:	97 81       	ldd	r25, Z+7	; 0x07
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <vfprintf+0x3ba>
    1000:	8f ef       	ldi	r24, 0xFF	; 255
    1002:	9f ef       	ldi	r25, 0xFF	; 255
    1004:	2b 96       	adiw	r28, 0x0b	; 11
    1006:	e2 e1       	ldi	r30, 0x12	; 18
    1008:	0c 94 d2 08 	jmp	0x11a4	; 0x11a4 <__epilogue_restores__>

0000100c <strnlen_P>:
    100c:	fc 01       	movw	r30, r24
    100e:	05 90       	lpm	r0, Z+
    1010:	61 50       	subi	r22, 0x01	; 1
    1012:	70 40       	sbci	r23, 0x00	; 0
    1014:	01 10       	cpse	r0, r1
    1016:	d8 f7       	brcc	.-10     	; 0x100e <strnlen_P+0x2>
    1018:	80 95       	com	r24
    101a:	90 95       	com	r25
    101c:	8e 0f       	add	r24, r30
    101e:	9f 1f       	adc	r25, r31
    1020:	08 95       	ret

00001022 <strnlen>:
    1022:	fc 01       	movw	r30, r24
    1024:	61 50       	subi	r22, 0x01	; 1
    1026:	70 40       	sbci	r23, 0x00	; 0
    1028:	01 90       	ld	r0, Z+
    102a:	01 10       	cpse	r0, r1
    102c:	d8 f7       	brcc	.-10     	; 0x1024 <strnlen+0x2>
    102e:	80 95       	com	r24
    1030:	90 95       	com	r25
    1032:	8e 0f       	add	r24, r30
    1034:	9f 1f       	adc	r25, r31
    1036:	08 95       	ret

00001038 <fputc>:
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	fb 01       	movw	r30, r22
    1042:	23 81       	ldd	r18, Z+3	; 0x03
    1044:	21 fd       	sbrc	r18, 1
    1046:	03 c0       	rjmp	.+6      	; 0x104e <fputc+0x16>
    1048:	8f ef       	ldi	r24, 0xFF	; 255
    104a:	9f ef       	ldi	r25, 0xFF	; 255
    104c:	2c c0       	rjmp	.+88     	; 0x10a6 <fputc+0x6e>
    104e:	22 ff       	sbrs	r18, 2
    1050:	16 c0       	rjmp	.+44     	; 0x107e <fputc+0x46>
    1052:	46 81       	ldd	r20, Z+6	; 0x06
    1054:	57 81       	ldd	r21, Z+7	; 0x07
    1056:	24 81       	ldd	r18, Z+4	; 0x04
    1058:	35 81       	ldd	r19, Z+5	; 0x05
    105a:	42 17       	cp	r20, r18
    105c:	53 07       	cpc	r21, r19
    105e:	44 f4       	brge	.+16     	; 0x1070 <fputc+0x38>
    1060:	a0 81       	ld	r26, Z
    1062:	b1 81       	ldd	r27, Z+1	; 0x01
    1064:	9d 01       	movw	r18, r26
    1066:	2f 5f       	subi	r18, 0xFF	; 255
    1068:	3f 4f       	sbci	r19, 0xFF	; 255
    106a:	31 83       	std	Z+1, r19	; 0x01
    106c:	20 83       	st	Z, r18
    106e:	8c 93       	st	X, r24
    1070:	26 81       	ldd	r18, Z+6	; 0x06
    1072:	37 81       	ldd	r19, Z+7	; 0x07
    1074:	2f 5f       	subi	r18, 0xFF	; 255
    1076:	3f 4f       	sbci	r19, 0xFF	; 255
    1078:	37 83       	std	Z+7, r19	; 0x07
    107a:	26 83       	std	Z+6, r18	; 0x06
    107c:	14 c0       	rjmp	.+40     	; 0x10a6 <fputc+0x6e>
    107e:	8b 01       	movw	r16, r22
    1080:	ec 01       	movw	r28, r24
    1082:	fb 01       	movw	r30, r22
    1084:	00 84       	ldd	r0, Z+8	; 0x08
    1086:	f1 85       	ldd	r31, Z+9	; 0x09
    1088:	e0 2d       	mov	r30, r0
    108a:	09 95       	icall
    108c:	89 2b       	or	r24, r25
    108e:	e1 f6       	brne	.-72     	; 0x1048 <fputc+0x10>
    1090:	d8 01       	movw	r26, r16
    1092:	16 96       	adiw	r26, 0x06	; 6
    1094:	8d 91       	ld	r24, X+
    1096:	9c 91       	ld	r25, X
    1098:	17 97       	sbiw	r26, 0x07	; 7
    109a:	01 96       	adiw	r24, 0x01	; 1
    109c:	17 96       	adiw	r26, 0x07	; 7
    109e:	9c 93       	st	X, r25
    10a0:	8e 93       	st	-X, r24
    10a2:	16 97       	sbiw	r26, 0x06	; 6
    10a4:	ce 01       	movw	r24, r28
    10a6:	df 91       	pop	r29
    10a8:	cf 91       	pop	r28
    10aa:	1f 91       	pop	r17
    10ac:	0f 91       	pop	r16
    10ae:	08 95       	ret

000010b0 <__ultoa_invert>:
    10b0:	fa 01       	movw	r30, r20
    10b2:	aa 27       	eor	r26, r26
    10b4:	28 30       	cpi	r18, 0x08	; 8
    10b6:	51 f1       	breq	.+84     	; 0x110c <__ultoa_invert+0x5c>
    10b8:	20 31       	cpi	r18, 0x10	; 16
    10ba:	81 f1       	breq	.+96     	; 0x111c <__ultoa_invert+0x6c>
    10bc:	e8 94       	clt
    10be:	6f 93       	push	r22
    10c0:	6e 7f       	andi	r22, 0xFE	; 254
    10c2:	6e 5f       	subi	r22, 0xFE	; 254
    10c4:	7f 4f       	sbci	r23, 0xFF	; 255
    10c6:	8f 4f       	sbci	r24, 0xFF	; 255
    10c8:	9f 4f       	sbci	r25, 0xFF	; 255
    10ca:	af 4f       	sbci	r26, 0xFF	; 255
    10cc:	b1 e0       	ldi	r27, 0x01	; 1
    10ce:	3e d0       	rcall	.+124    	; 0x114c <__ultoa_invert+0x9c>
    10d0:	b4 e0       	ldi	r27, 0x04	; 4
    10d2:	3c d0       	rcall	.+120    	; 0x114c <__ultoa_invert+0x9c>
    10d4:	67 0f       	add	r22, r23
    10d6:	78 1f       	adc	r23, r24
    10d8:	89 1f       	adc	r24, r25
    10da:	9a 1f       	adc	r25, r26
    10dc:	a1 1d       	adc	r26, r1
    10de:	68 0f       	add	r22, r24
    10e0:	79 1f       	adc	r23, r25
    10e2:	8a 1f       	adc	r24, r26
    10e4:	91 1d       	adc	r25, r1
    10e6:	a1 1d       	adc	r26, r1
    10e8:	6a 0f       	add	r22, r26
    10ea:	71 1d       	adc	r23, r1
    10ec:	81 1d       	adc	r24, r1
    10ee:	91 1d       	adc	r25, r1
    10f0:	a1 1d       	adc	r26, r1
    10f2:	20 d0       	rcall	.+64     	; 0x1134 <__ultoa_invert+0x84>
    10f4:	09 f4       	brne	.+2      	; 0x10f8 <__ultoa_invert+0x48>
    10f6:	68 94       	set
    10f8:	3f 91       	pop	r19
    10fa:	2a e0       	ldi	r18, 0x0A	; 10
    10fc:	26 9f       	mul	r18, r22
    10fe:	11 24       	eor	r1, r1
    1100:	30 19       	sub	r19, r0
    1102:	30 5d       	subi	r19, 0xD0	; 208
    1104:	31 93       	st	Z+, r19
    1106:	de f6       	brtc	.-74     	; 0x10be <__ultoa_invert+0xe>
    1108:	cf 01       	movw	r24, r30
    110a:	08 95       	ret
    110c:	46 2f       	mov	r20, r22
    110e:	47 70       	andi	r20, 0x07	; 7
    1110:	40 5d       	subi	r20, 0xD0	; 208
    1112:	41 93       	st	Z+, r20
    1114:	b3 e0       	ldi	r27, 0x03	; 3
    1116:	0f d0       	rcall	.+30     	; 0x1136 <__ultoa_invert+0x86>
    1118:	c9 f7       	brne	.-14     	; 0x110c <__ultoa_invert+0x5c>
    111a:	f6 cf       	rjmp	.-20     	; 0x1108 <__ultoa_invert+0x58>
    111c:	46 2f       	mov	r20, r22
    111e:	4f 70       	andi	r20, 0x0F	; 15
    1120:	40 5d       	subi	r20, 0xD0	; 208
    1122:	4a 33       	cpi	r20, 0x3A	; 58
    1124:	18 f0       	brcs	.+6      	; 0x112c <__ultoa_invert+0x7c>
    1126:	49 5d       	subi	r20, 0xD9	; 217
    1128:	31 fd       	sbrc	r19, 1
    112a:	40 52       	subi	r20, 0x20	; 32
    112c:	41 93       	st	Z+, r20
    112e:	02 d0       	rcall	.+4      	; 0x1134 <__ultoa_invert+0x84>
    1130:	a9 f7       	brne	.-22     	; 0x111c <__ultoa_invert+0x6c>
    1132:	ea cf       	rjmp	.-44     	; 0x1108 <__ultoa_invert+0x58>
    1134:	b4 e0       	ldi	r27, 0x04	; 4
    1136:	a6 95       	lsr	r26
    1138:	97 95       	ror	r25
    113a:	87 95       	ror	r24
    113c:	77 95       	ror	r23
    113e:	67 95       	ror	r22
    1140:	ba 95       	dec	r27
    1142:	c9 f7       	brne	.-14     	; 0x1136 <__ultoa_invert+0x86>
    1144:	00 97       	sbiw	r24, 0x00	; 0
    1146:	61 05       	cpc	r22, r1
    1148:	71 05       	cpc	r23, r1
    114a:	08 95       	ret
    114c:	9b 01       	movw	r18, r22
    114e:	ac 01       	movw	r20, r24
    1150:	0a 2e       	mov	r0, r26
    1152:	06 94       	lsr	r0
    1154:	57 95       	ror	r21
    1156:	47 95       	ror	r20
    1158:	37 95       	ror	r19
    115a:	27 95       	ror	r18
    115c:	ba 95       	dec	r27
    115e:	c9 f7       	brne	.-14     	; 0x1152 <__ultoa_invert+0xa2>
    1160:	62 0f       	add	r22, r18
    1162:	73 1f       	adc	r23, r19
    1164:	84 1f       	adc	r24, r20
    1166:	95 1f       	adc	r25, r21
    1168:	a0 1d       	adc	r26, r0
    116a:	08 95       	ret

0000116c <__prologue_saves__>:
    116c:	2f 92       	push	r2
    116e:	3f 92       	push	r3
    1170:	4f 92       	push	r4
    1172:	5f 92       	push	r5
    1174:	6f 92       	push	r6
    1176:	7f 92       	push	r7
    1178:	8f 92       	push	r8
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
    1194:	ca 1b       	sub	r28, r26
    1196:	db 0b       	sbc	r29, r27
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	09 94       	ijmp

000011a4 <__epilogue_restores__>:
    11a4:	2a 88       	ldd	r2, Y+18	; 0x12
    11a6:	39 88       	ldd	r3, Y+17	; 0x11
    11a8:	48 88       	ldd	r4, Y+16	; 0x10
    11aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    11ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    11ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    11b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    11b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    11b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    11b6:	b9 84       	ldd	r11, Y+9	; 0x09
    11b8:	c8 84       	ldd	r12, Y+8	; 0x08
    11ba:	df 80       	ldd	r13, Y+7	; 0x07
    11bc:	ee 80       	ldd	r14, Y+6	; 0x06
    11be:	fd 80       	ldd	r15, Y+5	; 0x05
    11c0:	0c 81       	ldd	r16, Y+4	; 0x04
    11c2:	1b 81       	ldd	r17, Y+3	; 0x03
    11c4:	aa 81       	ldd	r26, Y+2	; 0x02
    11c6:	b9 81       	ldd	r27, Y+1	; 0x01
    11c8:	ce 0f       	add	r28, r30
    11ca:	d1 1d       	adc	r29, r1
    11cc:	0f b6       	in	r0, 0x3f	; 63
    11ce:	f8 94       	cli
    11d0:	de bf       	out	0x3e, r29	; 62
    11d2:	0f be       	out	0x3f, r0	; 63
    11d4:	cd bf       	out	0x3d, r28	; 61
    11d6:	ed 01       	movw	r28, r26
    11d8:	08 95       	ret

000011da <_exit>:
    11da:	f8 94       	cli

000011dc <__stop_program>:
    11dc:	ff cf       	rjmp	.-2      	; 0x11dc <__stop_program>
