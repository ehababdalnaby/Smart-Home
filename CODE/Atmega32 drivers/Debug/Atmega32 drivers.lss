
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001578  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  00001578  0000160c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  0080010a  0080010a  000016b6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000016b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001714  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000494d  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001384  00000000  00000000  0000638d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000018ad  00000000  00000000  00007711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000724  00000000  00000000  00008fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a02  00000000  00000000  000096e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d09  00000000  00000000  0000a0e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000bdef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 7e 00 	jmp	0xfc	; 0xfc <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 d0 04 	jmp	0x9a0	; 0x9a0 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e7       	ldi	r30, 0x78	; 120
      68:	f5 e1       	ldi	r31, 0x15	; 21
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 30       	cpi	r26, 0x0A	; 10
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	aa e0       	ldi	r26, 0x0A	; 10
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 ba 0a 	jmp	0x1574	; 0x1574 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
int main()
{
	u8 data = 0;
	
		
	UART_INIT(9600);
      92:	80 e8       	ldi	r24, 0x80	; 128
      94:	95 e2       	ldi	r25, 0x25	; 37
      96:	0e 94 f5 04 	call	0x9ea	; 0x9ea <UART_INIT>
	MQTT_Connect("1111");
      9a:	87 e6       	ldi	r24, 0x67	; 103
      9c:	90 e0       	ldi	r25, 0x00	; 0
      9e:	0e 94 56 05 	call	0xaac	; 0xaac <MQTT_Connect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      a2:	2f ef       	ldi	r18, 0xFF	; 255
      a4:	8d e3       	ldi	r24, 0x3D	; 61
      a6:	99 e4       	ldi	r25, 0x49	; 73
      a8:	21 50       	subi	r18, 0x01	; 1
      aa:	80 40       	sbci	r24, 0x00	; 0
      ac:	90 40       	sbci	r25, 0x00	; 0
      ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x16>
      b0:	00 c0       	rjmp	.+0      	; 0xb2 <main+0x20>
      b2:	00 00       	nop
	_delay_ms(3000);
	MQTT_Subscribe("NTI/Control");
      b4:	8c e6       	ldi	r24, 0x6C	; 108
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	0e 94 ba 05 	call	0xb74	; 0xb74 <MQTT_Subscribe>
	Project_Init();
      bc:	0e 94 27 06 	call	0xc4e	; 0xc4e <Project_Init>
	sei();
      c0:	78 94       	sei
	u8 password[5]={0};
	turnOnFireAlarm();	
      c2:	0e 94 22 06 	call	0xc44	; 0xc44 <turnOnFireAlarm>
	while(1)
	{
		//Get_Password(password);
		AnalogSensors();
      c6:	0e 94 b3 06 	call	0xd66	; 0xd66 <AnalogSensors>
		MQTT_Publish("G/Temp",tempstr,strlen(tempstr));
      ca:	ea e0       	ldi	r30, 0x0A	; 10
      cc:	f1 e0       	ldi	r31, 0x01	; 1
      ce:	01 90       	ld	r0, Z+
      d0:	00 20       	and	r0, r0
      d2:	e9 f7       	brne	.-6      	; 0xce <main+0x3c>
      d4:	31 97       	sbiw	r30, 0x01	; 1
      d6:	af 01       	movw	r20, r30
      d8:	4a 50       	subi	r20, 0x0A	; 10
      da:	51 40       	sbci	r21, 0x01	; 1
      dc:	6a e0       	ldi	r22, 0x0A	; 10
      de:	71 e0       	ldi	r23, 0x01	; 1
      e0:	88 e7       	ldi	r24, 0x78	; 120
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 8c 05 	call	0xb18	; 0xb18 <MQTT_Publish>
      e8:	2f ef       	ldi	r18, 0xFF	; 255
      ea:	89 e6       	ldi	r24, 0x69	; 105
      ec:	98 e1       	ldi	r25, 0x18	; 24
      ee:	21 50       	subi	r18, 0x01	; 1
      f0:	80 40       	sbci	r24, 0x00	; 0
      f2:	90 40       	sbci	r25, 0x00	; 0
      f4:	e1 f7       	brne	.-8      	; 0xee <main+0x5c>
      f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x66>
      f8:	00 00       	nop
      fa:	e5 cf       	rjmp	.-54     	; 0xc6 <main+0x34>

000000fc <__vector_1>:
	}
}


ISR(INT0_vect)
{
      fc:	1f 92       	push	r1
      fe:	0f 92       	push	r0
     100:	0f b6       	in	r0, 0x3f	; 63
     102:	0f 92       	push	r0
     104:	11 24       	eor	r1, r1
     106:	2f 93       	push	r18
     108:	3f 93       	push	r19
     10a:	4f 93       	push	r20
     10c:	5f 93       	push	r21
     10e:	6f 93       	push	r22
     110:	7f 93       	push	r23
     112:	8f 93       	push	r24
     114:	9f 93       	push	r25
     116:	af 93       	push	r26
     118:	bf 93       	push	r27
     11a:	ef 93       	push	r30
     11c:	ff 93       	push	r31
	ptrINT();
     11e:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <ptrINT>
     122:	f0 91 15 01 	lds	r31, 0x0115	; 0x800115 <ptrINT+0x1>
     126:	09 95       	icall
}
     128:	ff 91       	pop	r31
     12a:	ef 91       	pop	r30
     12c:	bf 91       	pop	r27
     12e:	af 91       	pop	r26
     130:	9f 91       	pop	r25
     132:	8f 91       	pop	r24
     134:	7f 91       	pop	r23
     136:	6f 91       	pop	r22
     138:	5f 91       	pop	r21
     13a:	4f 91       	pop	r20
     13c:	3f 91       	pop	r19
     13e:	2f 91       	pop	r18
     140:	0f 90       	pop	r0
     142:	0f be       	out	0x3f, r0	; 63
     144:	0f 90       	pop	r0
     146:	1f 90       	pop	r1
     148:	18 95       	reti

0000014a <DHT_start>:
 */ 
#include "DHT.h"
#include <string.h>
void DHT_start(void)
{
	pinDirection(DHT_PIN,OUTPUT);		
     14a:	61 e0       	ldi	r22, 0x01	; 1
     14c:	82 e1       	ldi	r24, 0x12	; 18
     14e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
     152:	60 e0       	ldi	r22, 0x00	; 0
     154:	82 e1       	ldi	r24, 0x12	; 18
     156:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     15a:	8f e3       	ldi	r24, 0x3F	; 63
     15c:	9c e9       	ldi	r25, 0x9C	; 156
     15e:	01 97       	sbiw	r24, 0x01	; 1
     160:	f1 f7       	brne	.-4      	; 0x15e <DHT_start+0x14>
     162:	00 c0       	rjmp	.+0      	; 0x164 <DHT_start+0x1a>
     164:	00 00       	nop
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
     166:	61 e0       	ldi	r22, 0x01	; 1
     168:	82 e1       	ldi	r24, 0x12	; 18
     16a:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     16e:	08 95       	ret

00000170 <DHT_read>:
}

u8 DHT_read(void)
{
     170:	cf 93       	push	r28
     172:	df 93       	push	r29
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     174:	d0 e0       	ldi	r29, 0x00	; 0
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
     176:	c0 e0       	ldi	r28, 0x00	; 0
	for (i=0;i<8;i++)
     178:	1b c0       	rjmp	.+54     	; 0x1b0 <DHT_read+0x40>
	{
		while (readPin(DHT_PIN)==0);
     17a:	82 e1       	ldi	r24, 0x12	; 18
     17c:	0e 94 6d 04 	call	0x8da	; 0x8da <readPin>
     180:	88 23       	and	r24, r24
     182:	d9 f3       	breq	.-10     	; 0x17a <DHT_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     184:	80 e5       	ldi	r24, 0x50	; 80
     186:	8a 95       	dec	r24
     188:	f1 f7       	brne	.-4      	; 0x186 <DHT_read+0x16>
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     18a:	82 e1       	ldi	r24, 0x12	; 18
     18c:	0e 94 6d 04 	call	0x8da	; 0x8da <readPin>
     190:	81 11       	cpse	r24, r1
     192:	02 c0       	rjmp	.+4      	; 0x198 <DHT_read+0x28>
		{
			bitLogic=bitLogic<<1;
     194:	cc 0f       	add	r28, r28
     196:	06 c0       	rjmp	.+12     	; 0x1a4 <DHT_read+0x34>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     198:	8c 2f       	mov	r24, r28
     19a:	90 e0       	ldi	r25, 0x00	; 0
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	c8 2f       	mov	r28, r24
     1a2:	c1 60       	ori	r28, 0x01	; 1
		}
		
		while(readPin(DHT_PIN));
     1a4:	82 e1       	ldi	r24, 0x12	; 18
     1a6:	0e 94 6d 04 	call	0x8da	; 0x8da <readPin>
     1aa:	81 11       	cpse	r24, r1
     1ac:	fb cf       	rjmp	.-10     	; 0x1a4 <DHT_read+0x34>
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     1ae:	df 5f       	subi	r29, 0xFF	; 255
     1b0:	d8 30       	cpi	r29, 0x08	; 8
     1b2:	18 f3       	brcs	.-58     	; 0x17a <DHT_read+0xa>
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
}
     1b4:	8c 2f       	mov	r24, r28
     1b6:	df 91       	pop	r29
     1b8:	cf 91       	pop	r28
     1ba:	08 95       	ret

000001bc <DHT_Response>:

void DHT_Response(void)
{
	pinDirection(DHT_PIN,INPUT);
     1bc:	60 e0       	ldi	r22, 0x00	; 0
     1be:	82 e1       	ldi	r24, 0x12	; 18
     1c0:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
	while(readPin(DHT_PIN));
     1c4:	82 e1       	ldi	r24, 0x12	; 18
     1c6:	0e 94 6d 04 	call	0x8da	; 0x8da <readPin>
     1ca:	81 11       	cpse	r24, r1
     1cc:	fb cf       	rjmp	.-10     	; 0x1c4 <DHT_Response+0x8>
	while(!readPin(DHT_PIN));
     1ce:	82 e1       	ldi	r24, 0x12	; 18
     1d0:	0e 94 6d 04 	call	0x8da	; 0x8da <readPin>
     1d4:	88 23       	and	r24, r24
     1d6:	d9 f3       	breq	.-10     	; 0x1ce <DHT_Response+0x12>
	while(readPin(DHT_PIN));
     1d8:	82 e1       	ldi	r24, 0x12	; 18
     1da:	0e 94 6d 04 	call	0x8da	; 0x8da <readPin>
     1de:	81 11       	cpse	r24, r1
     1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <DHT_Response+0x1c>
}
     1e2:	08 95       	ret

000001e4 <intTostring>:
	
}


void intTostring(u16 hum_1,u16 temp_1,u8* temp,u8* hum )
{
     1e4:	4f 92       	push	r4
     1e6:	5f 92       	push	r5
     1e8:	6f 92       	push	r6
     1ea:	7f 92       	push	r7
     1ec:	8f 92       	push	r8
     1ee:	9f 92       	push	r9
     1f0:	af 92       	push	r10
     1f2:	bf 92       	push	r11
     1f4:	cf 92       	push	r12
     1f6:	df 92       	push	r13
     1f8:	ef 92       	push	r14
     1fa:	ff 92       	push	r15
     1fc:	0f 93       	push	r16
     1fe:	1f 93       	push	r17
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	cd b7       	in	r28, 0x3d	; 61
     206:	de b7       	in	r29, 0x3e	; 62
     208:	66 97       	sbiw	r28, 0x16	; 22
     20a:	0f b6       	in	r0, 0x3f	; 63
     20c:	f8 94       	cli
     20e:	de bf       	out	0x3e, r29	; 62
     210:	0f be       	out	0x3f, r0	; 63
     212:	cd bf       	out	0x3d, r28	; 61
     214:	3c 01       	movw	r6, r24
     216:	5b 01       	movw	r10, r22
     218:	4a 01       	movw	r8, r20
     21a:	42 2e       	mov	r4, r18
     21c:	53 2e       	mov	r5, r19
	u8 dot[]=".";
     21e:	8e e2       	ldi	r24, 0x2E	; 46
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	9a 83       	std	Y+2, r25	; 0x02
     224:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_2[10]={0},hum_2[10]={0};
     226:	8a e0       	ldi	r24, 0x0A	; 10
     228:	fe 01       	movw	r30, r28
     22a:	33 96       	adiw	r30, 0x03	; 3
     22c:	df 01       	movw	r26, r30
     22e:	98 2f       	mov	r25, r24
     230:	1d 92       	st	X+, r1
     232:	9a 95       	dec	r25
     234:	e9 f7       	brne	.-6      	; 0x230 <intTostring+0x4c>
     236:	3a 96       	adiw	r30, 0x0a	; 10
     238:	df 01       	movw	r26, r30
     23a:	1d 92       	st	X+, r1
     23c:	8a 95       	dec	r24
     23e:	e9 f7       	brne	.-6      	; 0x23a <intTostring+0x56>
			if (GETBit(temp_1,15)==1)
     240:	77 23       	and	r23, r23
     242:	34 f4       	brge	.+12     	; 0x250 <intTostring+0x6c>
			{
				CLRBit(temp_1,15);
     244:	e8 94       	clt
     246:	b7 f8       	bld	r11, 7
				temp[0]='-';
     248:	8d e2       	ldi	r24, 0x2D	; 45
     24a:	fa 01       	movw	r30, r20
     24c:	81 93       	st	Z+, r24
     24e:	4f 01       	movw	r8, r30
				temp++;
			}
			sprintf(temp,"%u",(temp_1)/10);
     250:	95 01       	movw	r18, r10
     252:	ad ec       	ldi	r26, 0xCD	; 205
     254:	bc ec       	ldi	r27, 0xCC	; 204
     256:	0e 94 76 07 	call	0xeec	; 0xeec <__umulhisi3>
     25a:	6c 01       	movw	r12, r24
     25c:	d6 94       	lsr	r13
     25e:	c7 94       	ror	r12
     260:	d6 94       	lsr	r13
     262:	c7 94       	ror	r12
     264:	d6 94       	lsr	r13
     266:	c7 94       	ror	r12
     268:	df 92       	push	r13
     26a:	cf 92       	push	r12
     26c:	0f e7       	ldi	r16, 0x7F	; 127
     26e:	10 e0       	ldi	r17, 0x00	; 0
     270:	1f 93       	push	r17
     272:	0f 93       	push	r16
     274:	9f 92       	push	r9
     276:	8f 92       	push	r8
     278:	0e 94 c0 07 	call	0xf80	; 0xf80 <sprintf>
			sprintf(hum,"%u",(hum_1)/10);
     27c:	93 01       	movw	r18, r6
     27e:	ad ec       	ldi	r26, 0xCD	; 205
     280:	bc ec       	ldi	r27, 0xCC	; 204
     282:	0e 94 76 07 	call	0xeec	; 0xeec <__umulhisi3>
     286:	7c 01       	movw	r14, r24
     288:	f6 94       	lsr	r15
     28a:	e7 94       	ror	r14
     28c:	f6 94       	lsr	r15
     28e:	e7 94       	ror	r14
     290:	f6 94       	lsr	r15
     292:	e7 94       	ror	r14
     294:	ff 92       	push	r15
     296:	ef 92       	push	r14
     298:	1f 93       	push	r17
     29a:	0f 93       	push	r16
     29c:	5f 92       	push	r5
     29e:	4f 92       	push	r4
     2a0:	0e 94 c0 07 	call	0xf80	; 0xf80 <sprintf>
			
			sprintf(temp_2,"%u",((temp_1)%10));
     2a4:	c6 01       	movw	r24, r12
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	cc 0c       	add	r12, r12
     2ac:	dd 1c       	adc	r13, r13
     2ae:	cc 0c       	add	r12, r12
     2b0:	dd 1c       	adc	r13, r13
     2b2:	cc 0c       	add	r12, r12
     2b4:	dd 1c       	adc	r13, r13
     2b6:	c8 0e       	add	r12, r24
     2b8:	d9 1e       	adc	r13, r25
     2ba:	ac 18       	sub	r10, r12
     2bc:	bd 08       	sbc	r11, r13
     2be:	bf 92       	push	r11
     2c0:	af 92       	push	r10
     2c2:	1f 93       	push	r17
     2c4:	0f 93       	push	r16
     2c6:	6e 01       	movw	r12, r28
     2c8:	f3 e0       	ldi	r31, 0x03	; 3
     2ca:	cf 0e       	add	r12, r31
     2cc:	d1 1c       	adc	r13, r1
     2ce:	df 92       	push	r13
     2d0:	cf 92       	push	r12
     2d2:	0e 94 c0 07 	call	0xf80	; 0xf80 <sprintf>
			sprintf(hum_2,"%u",((hum_1)%10));
     2d6:	c7 01       	movw	r24, r14
     2d8:	88 0f       	add	r24, r24
     2da:	99 1f       	adc	r25, r25
     2dc:	ee 0c       	add	r14, r14
     2de:	ff 1c       	adc	r15, r15
     2e0:	ee 0c       	add	r14, r14
     2e2:	ff 1c       	adc	r15, r15
     2e4:	ee 0c       	add	r14, r14
     2e6:	ff 1c       	adc	r15, r15
     2e8:	e8 0e       	add	r14, r24
     2ea:	f9 1e       	adc	r15, r25
     2ec:	6e 18       	sub	r6, r14
     2ee:	7f 08       	sbc	r7, r15
     2f0:	7f 92       	push	r7
     2f2:	6f 92       	push	r6
     2f4:	1f 93       	push	r17
     2f6:	0f 93       	push	r16
     2f8:	8e 01       	movw	r16, r28
     2fa:	03 5f       	subi	r16, 0xF3	; 243
     2fc:	1f 4f       	sbci	r17, 0xFF	; 255
     2fe:	1f 93       	push	r17
     300:	0f 93       	push	r16
     302:	0e 94 c0 07 	call	0xf80	; 0xf80 <sprintf>
			
			strcat(hum,dot);
     306:	be 01       	movw	r22, r28
     308:	6f 5f       	subi	r22, 0xFF	; 255
     30a:	7f 4f       	sbci	r23, 0xFF	; 255
     30c:	84 2d       	mov	r24, r4
     30e:	95 2d       	mov	r25, r5
     310:	0e 94 85 07 	call	0xf0a	; 0xf0a <strcat>
			strcat(temp,dot);
     314:	be 01       	movw	r22, r28
     316:	6f 5f       	subi	r22, 0xFF	; 255
     318:	7f 4f       	sbci	r23, 0xFF	; 255
     31a:	c4 01       	movw	r24, r8
     31c:	0e 94 85 07 	call	0xf0a	; 0xf0a <strcat>
			strcat(hum,hum_2);
     320:	b8 01       	movw	r22, r16
     322:	84 2d       	mov	r24, r4
     324:	95 2d       	mov	r25, r5
     326:	0e 94 85 07 	call	0xf0a	; 0xf0a <strcat>
			strcat(temp,temp_2);
     32a:	b6 01       	movw	r22, r12
     32c:	c4 01       	movw	r24, r8
     32e:	0e 94 85 07 	call	0xf0a	; 0xf0a <strcat>
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	f8 94       	cli
     336:	de bf       	out	0x3e, r29	; 62
     338:	0f be       	out	0x3f, r0	; 63
     33a:	cd bf       	out	0x3d, r28	; 61
     33c:	66 96       	adiw	r28, 0x16	; 22
     33e:	0f b6       	in	r0, 0x3f	; 63
     340:	f8 94       	cli
     342:	de bf       	out	0x3e, r29	; 62
     344:	0f be       	out	0x3f, r0	; 63
     346:	cd bf       	out	0x3d, r28	; 61
     348:	df 91       	pop	r29
     34a:	cf 91       	pop	r28
     34c:	1f 91       	pop	r17
     34e:	0f 91       	pop	r16
     350:	ff 90       	pop	r15
     352:	ef 90       	pop	r14
     354:	df 90       	pop	r13
     356:	cf 90       	pop	r12
     358:	bf 90       	pop	r11
     35a:	af 90       	pop	r10
     35c:	9f 90       	pop	r9
     35e:	8f 90       	pop	r8
     360:	7f 90       	pop	r7
     362:	6f 90       	pop	r6
     364:	5f 90       	pop	r5
     366:	4f 90       	pop	r4
     368:	08 95       	ret

0000036a <DHT_Represent>:
	while(!readPin(DHT_PIN));
	while(readPin(DHT_PIN));
}

BOOL DHT_Represent(u8* hum,u8* temp)
{
     36a:	df 92       	push	r13
     36c:	ef 92       	push	r14
     36e:	ff 92       	push	r15
     370:	0f 93       	push	r16
     372:	1f 93       	push	r17
     374:	cf 93       	push	r28
     376:	df 93       	push	r29
     378:	7c 01       	movw	r14, r24
     37a:	8b 01       	movw	r16, r22
	u16 temp_1=0,hum_1=0;
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
	DHT_start();
     37c:	0e 94 a5 00 	call	0x14a	; 0x14a <DHT_start>
	DHT_Response();
     380:	0e 94 de 00 	call	0x1bc	; 0x1bc <DHT_Response>
	humidity_I=DHT_read();
     384:	0e 94 b8 00 	call	0x170	; 0x170 <DHT_read>
     388:	d8 2f       	mov	r29, r24
	humidity_D=DHT_read();
     38a:	0e 94 b8 00 	call	0x170	; 0x170 <DHT_read>
     38e:	d8 2e       	mov	r13, r24
	temp_I=DHT_read();
     390:	0e 94 b8 00 	call	0x170	; 0x170 <DHT_read>
     394:	c8 2f       	mov	r28, r24
	temp_D=DHT_read();
     396:	0e 94 b8 00 	call	0x170	; 0x170 <DHT_read>
	
		hum_1=((humidity_I<<8)|humidity_D);
     39a:	ed 2f       	mov	r30, r29
     39c:	f0 e0       	ldi	r31, 0x00	; 0
     39e:	fe 2f       	mov	r31, r30
     3a0:	ee 27       	eor	r30, r30
		temp_1=((temp_I<<8)|temp_D);
     3a2:	6c 2f       	mov	r22, r28
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	76 2f       	mov	r23, r22
     3a8:	66 27       	eor	r22, r22
     3aa:	68 2b       	or	r22, r24
		
		intTostring(hum_1,temp_1,temp,hum);
     3ac:	97 01       	movw	r18, r14
     3ae:	a8 01       	movw	r20, r16
     3b0:	cf 01       	movw	r24, r30
     3b2:	8d 29       	or	r24, r13
     3b4:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <intTostring>
		return TRUE;
	
}
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	ff 90       	pop	r15
     3c4:	ef 90       	pop	r14
     3c6:	df 90       	pop	r13
     3c8:	08 95       	ret

000003ca <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
     3ca:	41 e0       	ldi	r20, 0x01	; 1
     3cc:	6f e0       	ldi	r22, 0x0F	; 15
     3ce:	87 e3       	ldi	r24, 0x37	; 55
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	0e 94 c1 04 	call	0x982	; 0x982 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
     3d6:	41 e0       	ldi	r20, 0x01	; 1
     3d8:	6f e0       	ldi	r22, 0x0F	; 15
     3da:	88 e3       	ldi	r24, 0x38	; 56
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
     3e2:	40 e0       	ldi	r20, 0x00	; 0
     3e4:	60 e7       	ldi	r22, 0x70	; 112
     3e6:	87 e3       	ldi	r24, 0x37	; 55
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 c1 04 	call	0x982	; 0x982 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	60 e7       	ldi	r22, 0x70	; 112
     3f2:	88 e3       	ldi	r24, 0x38	; 56
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
     3fa:	08 95       	ret

000003fc <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     3fc:	61 e0       	ldi	r22, 0x01	; 1
     3fe:	83 e0       	ldi	r24, 0x03	; 3
     400:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     404:	85 e8       	ldi	r24, 0x85	; 133
     406:	8a 95       	dec	r24
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 00       	nop
     40c:	60 e0       	ldi	r22, 0x00	; 0
     40e:	83 e0       	ldi	r24, 0x03	; 3
     410:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     414:	85 e8       	ldi	r24, 0x85	; 133
     416:	8a 95       	dec	r24
     418:	f1 f7       	brne	.-4      	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
     41a:	00 00       	nop
     41c:	08 95       	ret

0000041e <SendToLCD>:
     41e:	cf 93       	push	r28
     420:	c8 2f       	mov	r28, r24
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	60 ef       	ldi	r22, 0xF0	; 240
     426:	8b e3       	ldi	r24, 0x3B	; 59
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
     42e:	6c 2f       	mov	r22, r28
     430:	60 7f       	andi	r22, 0xF0	; 240
     432:	41 e0       	ldi	r20, 0x01	; 1
     434:	8b e3       	ldi	r24, 0x3B	; 59
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
     43c:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_latch>
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	60 ef       	ldi	r22, 0xF0	; 240
     444:	8b e3       	ldi	r24, 0x3B	; 59
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
     44c:	80 e1       	ldi	r24, 0x10	; 16
     44e:	c8 9f       	mul	r28, r24
     450:	b0 01       	movw	r22, r0
     452:	11 24       	eor	r1, r1
     454:	41 e0       	ldi	r20, 0x01	; 1
     456:	8b e3       	ldi	r24, 0x3B	; 59
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
     45e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <LCD_latch>
     462:	85 e8       	ldi	r24, 0x85	; 133
     464:	8a 95       	dec	r24
     466:	f1 f7       	brne	.-4      	; 0x464 <SendToLCD+0x46>
     468:	00 00       	nop
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <LCD_send_cmd>:
     46e:	cf 93       	push	r28
     470:	c8 2f       	mov	r28, r24
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	82 e0       	ldi	r24, 0x02	; 2
     476:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     47a:	8c 2f       	mov	r24, r28
     47c:	0e 94 0f 02 	call	0x41e	; 0x41e <SendToLCD>
     480:	cf 91       	pop	r28
     482:	08 95       	ret

00000484 <LCD_CLEAR>:
     484:	81 e0       	ldi	r24, 0x01	; 1
     486:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     48a:	8f e9       	ldi	r24, 0x9F	; 159
     48c:	9f e0       	ldi	r25, 0x0F	; 15
     48e:	01 97       	sbiw	r24, 0x01	; 1
     490:	f1 f7       	brne	.-4      	; 0x48e <LCD_CLEAR+0xa>
     492:	00 c0       	rjmp	.+0      	; 0x494 <LCD_CLEAR+0x10>
     494:	00 00       	nop
     496:	08 95       	ret

00000498 <LCD_ret_Home>:
     498:	82 e0       	ldi	r24, 0x02	; 2
     49a:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     49e:	8f e9       	ldi	r24, 0x9F	; 159
     4a0:	9f e0       	ldi	r25, 0x0F	; 15
     4a2:	01 97       	sbiw	r24, 0x01	; 1
     4a4:	f1 f7       	brne	.-4      	; 0x4a2 <LCD_ret_Home+0xa>
     4a6:	00 c0       	rjmp	.+0      	; 0x4a8 <LCD_ret_Home+0x10>
     4a8:	00 00       	nop
     4aa:	08 95       	ret

000004ac <LCD_init>:
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	60 ef       	ldi	r22, 0xF0	; 240
     4b0:	8a e3       	ldi	r24, 0x3A	; 58
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	0e 94 c1 04 	call	0x982	; 0x982 <pinsDirection>
     4b8:	41 e0       	ldi	r20, 0x01	; 1
     4ba:	6c e0       	ldi	r22, 0x0C	; 12
     4bc:	8a e3       	ldi	r24, 0x3A	; 58
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 c1 04 	call	0x982	; 0x982 <pinsDirection>
     4c4:	2f ef       	ldi	r18, 0xFF	; 255
     4c6:	89 ef       	ldi	r24, 0xF9	; 249
     4c8:	90 e0       	ldi	r25, 0x00	; 0
     4ca:	21 50       	subi	r18, 0x01	; 1
     4cc:	80 40       	sbci	r24, 0x00	; 0
     4ce:	90 40       	sbci	r25, 0x00	; 0
     4d0:	e1 f7       	brne	.-8      	; 0x4ca <LCD_init+0x1e>
     4d2:	00 c0       	rjmp	.+0      	; 0x4d4 <LCD_init+0x28>
     4d4:	00 00       	nop
     4d6:	0e 94 4c 02 	call	0x498	; 0x498 <LCD_ret_Home>
     4da:	86 e0       	ldi	r24, 0x06	; 6
     4dc:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     4e0:	8c e0       	ldi	r24, 0x0C	; 12
     4e2:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     4e6:	80 e1       	ldi	r24, 0x10	; 16
     4e8:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     4ec:	88 e2       	ldi	r24, 0x28	; 40
     4ee:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     4f2:	0e 94 42 02 	call	0x484	; 0x484 <LCD_CLEAR>
     4f6:	08 95       	ret

000004f8 <LCD_send_data>:
     4f8:	cf 93       	push	r28
     4fa:	c8 2f       	mov	r28, r24
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	82 e0       	ldi	r24, 0x02	; 2
     500:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     504:	8c 2f       	mov	r24, r28
     506:	0e 94 0f 02 	call	0x41e	; 0x41e <SendToLCD>
     50a:	cf 91       	pop	r28
     50c:	08 95       	ret

0000050e <disp_char>:
     50e:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_send_data>
     512:	08 95       	ret

00000514 <disp_str>:
     514:	0f 93       	push	r16
     516:	1f 93       	push	r17
     518:	cf 93       	push	r28
     51a:	8c 01       	movw	r16, r24
     51c:	c0 e0       	ldi	r28, 0x00	; 0
     51e:	03 c0       	rjmp	.+6      	; 0x526 <disp_str+0x12>
     520:	0e 94 87 02 	call	0x50e	; 0x50e <disp_char>
     524:	cf 5f       	subi	r28, 0xFF	; 255
     526:	f8 01       	movw	r30, r16
     528:	ec 0f       	add	r30, r28
     52a:	f1 1d       	adc	r31, r1
     52c:	80 81       	ld	r24, Z
     52e:	81 11       	cpse	r24, r1
     530:	f7 cf       	rjmp	.-18     	; 0x520 <disp_str+0xc>
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	08 95       	ret

0000053a <LCD_GOTXY>:
     53a:	81 30       	cpi	r24, 0x01	; 1
     53c:	29 f4       	brne	.+10     	; 0x548 <LCD_GOTXY+0xe>
     53e:	8f e7       	ldi	r24, 0x7F	; 127
     540:	86 0f       	add	r24, r22
     542:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     546:	08 95       	ret
     548:	82 30       	cpi	r24, 0x02	; 2
     54a:	29 f4       	brne	.+10     	; 0x556 <LCD_GOTXY+0x1c>
     54c:	8f eb       	ldi	r24, 0xBF	; 191
     54e:	86 0f       	add	r24, r22
     550:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     554:	08 95       	ret
     556:	83 30       	cpi	r24, 0x03	; 3
     558:	29 f4       	brne	.+10     	; 0x564 <LCD_GOTXY+0x2a>
     55a:	8f e8       	ldi	r24, 0x8F	; 143
     55c:	86 0f       	add	r24, r22
     55e:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     562:	08 95       	ret
     564:	84 30       	cpi	r24, 0x04	; 4
     566:	21 f4       	brne	.+8      	; 0x570 <LCD_GOTXY+0x36>
     568:	8f ec       	ldi	r24, 0xCF	; 207
     56a:	86 0f       	add	r24, r22
     56c:	0e 94 37 02 	call	0x46e	; 0x46e <LCD_send_cmd>
     570:	08 95       	ret

00000572 <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     578:	0e 94 9d 02 	call	0x53a	; 0x53a <LCD_GOTXY>
	disp_str(str);
     57c:	ce 01       	movw	r24, r28
     57e:	0e 94 8a 02 	call	0x514	; 0x514 <disp_str>
}
     582:	df 91       	pop	r29
     584:	cf 91       	pop	r28
     586:	08 95       	ret

00000588 <disp_int>:


void disp_int(u32 intvalue)
{
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	cd b7       	in	r28, 0x3d	; 61
     592:	de b7       	in	r29, 0x3e	; 62
     594:	2b 97       	sbiw	r28, 0x0b	; 11
     596:	0f b6       	in	r0, 0x3f	; 63
     598:	f8 94       	cli
     59a:	de bf       	out	0x3e, r29	; 62
     59c:	0f be       	out	0x3f, r0	; 63
     59e:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     5a0:	8e 01       	movw	r16, r28
     5a2:	0f 5f       	subi	r16, 0xFF	; 255
     5a4:	1f 4f       	sbci	r17, 0xFF	; 255
     5a6:	2b e0       	ldi	r18, 0x0B	; 11
     5a8:	f8 01       	movw	r30, r16
     5aa:	11 92       	st	Z+, r1
     5ac:	2a 95       	dec	r18
     5ae:	e9 f7       	brne	.-6      	; 0x5aa <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	7f 93       	push	r23
     5b6:	6f 93       	push	r22
     5b8:	8f e7       	ldi	r24, 0x7F	; 127
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	9f 93       	push	r25
     5be:	8f 93       	push	r24
     5c0:	1f 93       	push	r17
     5c2:	0f 93       	push	r16
     5c4:	0e 94 c0 07 	call	0xf80	; 0xf80 <sprintf>
		disp_str(string);
     5c8:	c8 01       	movw	r24, r16
     5ca:	0e 94 8a 02 	call	0x514	; 0x514 <disp_str>
}
     5ce:	0f b6       	in	r0, 0x3f	; 63
     5d0:	f8 94       	cli
     5d2:	de bf       	out	0x3e, r29	; 62
     5d4:	0f be       	out	0x3f, r0	; 63
     5d6:	cd bf       	out	0x3d, r28	; 61
     5d8:	2b 96       	adiw	r28, 0x0b	; 11
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	08 95       	ret

000005ee <Callback>:


void (*ptrINT)(void)=0;
void Callback(void (*ptr)(void))
{
	ptrINT=ptr;
     5ee:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <ptrINT+0x1>
     5f2:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <ptrINT>
     5f6:	08 95       	ret

000005f8 <INT_init>:


void INT_init(u8 int_num , u8 sense_control)
{
	//GICR|=(1<<int_num);
	switch(int_num)
     5f8:	86 30       	cpi	r24, 0x06	; 6
     5fa:	a1 f0       	breq	.+40     	; 0x624 <INT_init+0x2c>
     5fc:	87 30       	cpi	r24, 0x07	; 7
     5fe:	e1 f0       	breq	.+56     	; 0x638 <INT_init+0x40>
     600:	85 30       	cpi	r24, 0x05	; 5
     602:	11 f5       	brne	.+68     	; 0x648 <INT_init+0x50>
	{
		case INT_2:
		MCUCSR|=((sense_control & 0x01)<<6);
     604:	84 b7       	in	r24, 0x34	; 52
     606:	26 2f       	mov	r18, r22
     608:	21 70       	andi	r18, 0x01	; 1
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	00 24       	eor	r0, r0
     60e:	36 95       	lsr	r19
     610:	27 95       	ror	r18
     612:	07 94       	ror	r0
     614:	36 95       	lsr	r19
     616:	27 95       	ror	r18
     618:	07 94       	ror	r0
     61a:	32 2f       	mov	r19, r18
     61c:	20 2d       	mov	r18, r0
     61e:	28 2b       	or	r18, r24
     620:	24 bf       	out	0x34, r18	; 52
		break;
     622:	08 95       	ret
		
		case INT_0:
		CLRBits(MCUCR,INT0_ISC_MSK);
     624:	85 b7       	in	r24, 0x35	; 53
     626:	8c 7f       	andi	r24, 0xFC	; 252
     628:	85 bf       	out	0x35, r24	; 53
		SETBits(MCUCR,sense_control<<INT0_ISC_POS);
     62a:	85 b7       	in	r24, 0x35	; 53
     62c:	68 2b       	or	r22, r24
     62e:	65 bf       	out	0x35, r22	; 53
		SETBit(GICR,INT_0);
     630:	8b b7       	in	r24, 0x3b	; 59
     632:	80 64       	ori	r24, 0x40	; 64
     634:	8b bf       	out	0x3b, r24	; 59
		break;
     636:	08 95       	ret
		case INT_1:
		MCUCR|=(sense_control<<2);
     638:	85 b7       	in	r24, 0x35	; 53
     63a:	70 e0       	ldi	r23, 0x00	; 0
     63c:	66 0f       	add	r22, r22
     63e:	77 1f       	adc	r23, r23
     640:	66 0f       	add	r22, r22
     642:	77 1f       	adc	r23, r23
     644:	68 2b       	or	r22, r24
     646:	65 bf       	out	0x35, r22	; 53
     648:	08 95       	ret

0000064a <GLOBAL_INT_EN>:
	}
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
     64a:	41 e0       	ldi	r20, 0x01	; 1
     64c:	60 e8       	ldi	r22, 0x80	; 128
     64e:	8f e5       	ldi	r24, 0x5F	; 95
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	0e 94 b2 04 	call	0x964	; 0x964 <writePins>
     656:	08 95       	ret

00000658 <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
     658:	87 b1       	in	r24, 0x07	; 7
     65a:	80 64       	ori	r24, 0x40	; 64
     65c:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
     65e:	86 b1       	in	r24, 0x06	; 6
     660:	87 68       	ori	r24, 0x87	; 135
     662:	86 b9       	out	0x06, r24	; 6
     664:	08 95       	ret

00000666 <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
     666:	97 b1       	in	r25, 0x07	; 7
     668:	90 7e       	andi	r25, 0xE0	; 224
     66a:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
     66c:	97 b1       	in	r25, 0x07	; 7
     66e:	89 2b       	or	r24, r25
     670:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
     672:	86 b1       	in	r24, 0x06	; 6
     674:	80 64       	ori	r24, 0x40	; 64
     676:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
     678:	36 99       	sbic	0x06, 6	; 6
     67a:	fe cf       	rjmp	.-4      	; 0x678 <read_analog+0x12>
	return (ADC);		
     67c:	84 b1       	in	r24, 0x04	; 4
     67e:	95 b1       	in	r25, 0x05	; 5
}
     680:	08 95       	ret

00000682 <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
     682:	88 30       	cpi	r24, 0x08	; 8
     684:	f8 f4       	brcc	.+62     	; 0x6c4 <writePin+0x42>
		if(logic==HIGH)
     686:	61 30       	cpi	r22, 0x01	; 1
     688:	69 f4       	brne	.+26     	; 0x6a4 <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
     68a:	4b b3       	in	r20, 0x1b	; 27
     68c:	21 e0       	ldi	r18, 0x01	; 1
     68e:	30 e0       	ldi	r19, 0x00	; 0
     690:	b9 01       	movw	r22, r18
     692:	02 c0       	rjmp	.+4      	; 0x698 <writePin+0x16>
     694:	66 0f       	add	r22, r22
     696:	77 1f       	adc	r23, r23
     698:	8a 95       	dec	r24
     69a:	e2 f7       	brpl	.-8      	; 0x694 <writePin+0x12>
     69c:	cb 01       	movw	r24, r22
     69e:	84 2b       	or	r24, r20
     6a0:	8b bb       	out	0x1b, r24	; 27
     6a2:	08 95       	ret
		else if(logic==LOW)
     6a4:	61 11       	cpse	r22, r1
     6a6:	82 c0       	rjmp	.+260    	; 0x7ac <writePin+0x12a>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
     6a8:	4b b3       	in	r20, 0x1b	; 27
     6aa:	21 e0       	ldi	r18, 0x01	; 1
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	b9 01       	movw	r22, r18
     6b0:	02 c0       	rjmp	.+4      	; 0x6b6 <writePin+0x34>
     6b2:	66 0f       	add	r22, r22
     6b4:	77 1f       	adc	r23, r23
     6b6:	8a 95       	dec	r24
     6b8:	e2 f7       	brpl	.-8      	; 0x6b2 <writePin+0x30>
     6ba:	cb 01       	movw	r24, r22
     6bc:	80 95       	com	r24
     6be:	84 23       	and	r24, r20
     6c0:	8b bb       	out	0x1b, r24	; 27
     6c2:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
     6c4:	98 ef       	ldi	r25, 0xF8	; 248
     6c6:	98 0f       	add	r25, r24
     6c8:	98 30       	cpi	r25, 0x08	; 8
     6ca:	18 f5       	brcc	.+70     	; 0x712 <writePin+0x90>
		if(logic==HIGH)
     6cc:	61 30       	cpi	r22, 0x01	; 1
     6ce:	79 f4       	brne	.+30     	; 0x6ee <writePin+0x6c>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
     6d0:	48 b3       	in	r20, 0x18	; 24
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	08 97       	sbiw	r24, 0x08	; 8
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	b9 01       	movw	r22, r18
     6dc:	02 c0       	rjmp	.+4      	; 0x6e2 <writePin+0x60>
     6de:	66 0f       	add	r22, r22
     6e0:	77 1f       	adc	r23, r23
     6e2:	8a 95       	dec	r24
     6e4:	e2 f7       	brpl	.-8      	; 0x6de <writePin+0x5c>
     6e6:	cb 01       	movw	r24, r22
     6e8:	84 2b       	or	r24, r20
     6ea:	88 bb       	out	0x18, r24	; 24
     6ec:	08 95       	ret
		else if(logic==LOW)
     6ee:	61 11       	cpse	r22, r1
     6f0:	5d c0       	rjmp	.+186    	; 0x7ac <writePin+0x12a>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
     6f2:	48 b3       	in	r20, 0x18	; 24
     6f4:	90 e0       	ldi	r25, 0x00	; 0
     6f6:	08 97       	sbiw	r24, 0x08	; 8
     6f8:	21 e0       	ldi	r18, 0x01	; 1
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	b9 01       	movw	r22, r18
     6fe:	02 c0       	rjmp	.+4      	; 0x704 <writePin+0x82>
     700:	66 0f       	add	r22, r22
     702:	77 1f       	adc	r23, r23
     704:	8a 95       	dec	r24
     706:	e2 f7       	brpl	.-8      	; 0x700 <writePin+0x7e>
     708:	cb 01       	movw	r24, r22
     70a:	80 95       	com	r24
     70c:	84 23       	and	r24, r20
     70e:	88 bb       	out	0x18, r24	; 24
     710:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
     712:	90 ef       	ldi	r25, 0xF0	; 240
     714:	98 0f       	add	r25, r24
     716:	98 30       	cpi	r25, 0x08	; 8
     718:	18 f5       	brcc	.+70     	; 0x760 <writePin+0xde>
		if(logic==HIGH)
     71a:	61 30       	cpi	r22, 0x01	; 1
     71c:	79 f4       	brne	.+30     	; 0x73c <writePin+0xba>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
     71e:	45 b3       	in	r20, 0x15	; 21
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	40 97       	sbiw	r24, 0x10	; 16
     724:	21 e0       	ldi	r18, 0x01	; 1
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	b9 01       	movw	r22, r18
     72a:	02 c0       	rjmp	.+4      	; 0x730 <writePin+0xae>
     72c:	66 0f       	add	r22, r22
     72e:	77 1f       	adc	r23, r23
     730:	8a 95       	dec	r24
     732:	e2 f7       	brpl	.-8      	; 0x72c <writePin+0xaa>
     734:	cb 01       	movw	r24, r22
     736:	84 2b       	or	r24, r20
     738:	85 bb       	out	0x15, r24	; 21
     73a:	08 95       	ret
		else if(logic==LOW)
     73c:	61 11       	cpse	r22, r1
     73e:	36 c0       	rjmp	.+108    	; 0x7ac <writePin+0x12a>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
     740:	45 b3       	in	r20, 0x15	; 21
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	40 97       	sbiw	r24, 0x10	; 16
     746:	21 e0       	ldi	r18, 0x01	; 1
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	b9 01       	movw	r22, r18
     74c:	02 c0       	rjmp	.+4      	; 0x752 <writePin+0xd0>
     74e:	66 0f       	add	r22, r22
     750:	77 1f       	adc	r23, r23
     752:	8a 95       	dec	r24
     754:	e2 f7       	brpl	.-8      	; 0x74e <writePin+0xcc>
     756:	cb 01       	movw	r24, r22
     758:	80 95       	com	r24
     75a:	84 23       	and	r24, r20
     75c:	85 bb       	out	0x15, r24	; 21
     75e:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
     760:	98 ee       	ldi	r25, 0xE8	; 232
     762:	98 0f       	add	r25, r24
     764:	98 30       	cpi	r25, 0x08	; 8
     766:	10 f5       	brcc	.+68     	; 0x7ac <writePin+0x12a>
		if(logic==HIGH)
     768:	61 30       	cpi	r22, 0x01	; 1
     76a:	79 f4       	brne	.+30     	; 0x78a <writePin+0x108>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
     76c:	42 b3       	in	r20, 0x12	; 18
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	48 97       	sbiw	r24, 0x18	; 24
     772:	21 e0       	ldi	r18, 0x01	; 1
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	b9 01       	movw	r22, r18
     778:	02 c0       	rjmp	.+4      	; 0x77e <writePin+0xfc>
     77a:	66 0f       	add	r22, r22
     77c:	77 1f       	adc	r23, r23
     77e:	8a 95       	dec	r24
     780:	e2 f7       	brpl	.-8      	; 0x77a <writePin+0xf8>
     782:	cb 01       	movw	r24, r22
     784:	84 2b       	or	r24, r20
     786:	82 bb       	out	0x12, r24	; 18
     788:	08 95       	ret
		else if(logic==LOW)
     78a:	61 11       	cpse	r22, r1
     78c:	0f c0       	rjmp	.+30     	; 0x7ac <writePin+0x12a>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
     78e:	42 b3       	in	r20, 0x12	; 18
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	48 97       	sbiw	r24, 0x18	; 24
     794:	21 e0       	ldi	r18, 0x01	; 1
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	b9 01       	movw	r22, r18
     79a:	02 c0       	rjmp	.+4      	; 0x7a0 <writePin+0x11e>
     79c:	66 0f       	add	r22, r22
     79e:	77 1f       	adc	r23, r23
     7a0:	8a 95       	dec	r24
     7a2:	e2 f7       	brpl	.-8      	; 0x79c <writePin+0x11a>
     7a4:	cb 01       	movw	r24, r22
     7a6:	80 95       	com	r24
     7a8:	84 23       	and	r24, r20
     7aa:	82 bb       	out	0x12, r24	; 18
     7ac:	08 95       	ret

000007ae <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
     7ae:	88 30       	cpi	r24, 0x08	; 8
     7b0:	f8 f4       	brcc	.+62     	; 0x7f0 <pinDirection+0x42>
		if(direction == OUTPUT)
     7b2:	61 30       	cpi	r22, 0x01	; 1
     7b4:	69 f4       	brne	.+26     	; 0x7d0 <pinDirection+0x22>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
     7b6:	4a b3       	in	r20, 0x1a	; 26
     7b8:	21 e0       	ldi	r18, 0x01	; 1
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	b9 01       	movw	r22, r18
     7be:	02 c0       	rjmp	.+4      	; 0x7c4 <pinDirection+0x16>
     7c0:	66 0f       	add	r22, r22
     7c2:	77 1f       	adc	r23, r23
     7c4:	8a 95       	dec	r24
     7c6:	e2 f7       	brpl	.-8      	; 0x7c0 <pinDirection+0x12>
     7c8:	cb 01       	movw	r24, r22
     7ca:	84 2b       	or	r24, r20
     7cc:	8a bb       	out	0x1a, r24	; 26
     7ce:	08 95       	ret
		else if(direction == INPUT)
     7d0:	61 11       	cpse	r22, r1
     7d2:	82 c0       	rjmp	.+260    	; 0x8d8 <__stack+0x79>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
     7d4:	4a b3       	in	r20, 0x1a	; 26
     7d6:	21 e0       	ldi	r18, 0x01	; 1
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	b9 01       	movw	r22, r18
     7dc:	02 c0       	rjmp	.+4      	; 0x7e2 <pinDirection+0x34>
     7de:	66 0f       	add	r22, r22
     7e0:	77 1f       	adc	r23, r23
     7e2:	8a 95       	dec	r24
     7e4:	e2 f7       	brpl	.-8      	; 0x7de <pinDirection+0x30>
     7e6:	cb 01       	movw	r24, r22
     7e8:	80 95       	com	r24
     7ea:	84 23       	and	r24, r20
     7ec:	8a bb       	out	0x1a, r24	; 26
     7ee:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
     7f0:	98 ef       	ldi	r25, 0xF8	; 248
     7f2:	98 0f       	add	r25, r24
     7f4:	98 30       	cpi	r25, 0x08	; 8
     7f6:	18 f5       	brcc	.+70     	; 0x83e <pinDirection+0x90>
		if(direction == OUTPUT)
     7f8:	61 30       	cpi	r22, 0x01	; 1
     7fa:	79 f4       	brne	.+30     	; 0x81a <pinDirection+0x6c>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
     7fc:	47 b3       	in	r20, 0x17	; 23
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	08 97       	sbiw	r24, 0x08	; 8
     802:	21 e0       	ldi	r18, 0x01	; 1
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	b9 01       	movw	r22, r18
     808:	02 c0       	rjmp	.+4      	; 0x80e <pinDirection+0x60>
     80a:	66 0f       	add	r22, r22
     80c:	77 1f       	adc	r23, r23
     80e:	8a 95       	dec	r24
     810:	e2 f7       	brpl	.-8      	; 0x80a <pinDirection+0x5c>
     812:	cb 01       	movw	r24, r22
     814:	84 2b       	or	r24, r20
     816:	87 bb       	out	0x17, r24	; 23
     818:	08 95       	ret
		else if(direction == LOW)
     81a:	61 11       	cpse	r22, r1
     81c:	5d c0       	rjmp	.+186    	; 0x8d8 <__stack+0x79>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
     81e:	47 b3       	in	r20, 0x17	; 23
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	08 97       	sbiw	r24, 0x08	; 8
     824:	21 e0       	ldi	r18, 0x01	; 1
     826:	30 e0       	ldi	r19, 0x00	; 0
     828:	b9 01       	movw	r22, r18
     82a:	02 c0       	rjmp	.+4      	; 0x830 <pinDirection+0x82>
     82c:	66 0f       	add	r22, r22
     82e:	77 1f       	adc	r23, r23
     830:	8a 95       	dec	r24
     832:	e2 f7       	brpl	.-8      	; 0x82c <pinDirection+0x7e>
     834:	cb 01       	movw	r24, r22
     836:	80 95       	com	r24
     838:	84 23       	and	r24, r20
     83a:	87 bb       	out	0x17, r24	; 23
     83c:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
     83e:	90 ef       	ldi	r25, 0xF0	; 240
     840:	98 0f       	add	r25, r24
     842:	98 30       	cpi	r25, 0x08	; 8
     844:	18 f5       	brcc	.+70     	; 0x88c <__stack+0x2d>
		if(direction == OUTPUT)
     846:	61 30       	cpi	r22, 0x01	; 1
     848:	79 f4       	brne	.+30     	; 0x868 <__stack+0x9>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
     84a:	44 b3       	in	r20, 0x14	; 20
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	40 97       	sbiw	r24, 0x10	; 16
     850:	21 e0       	ldi	r18, 0x01	; 1
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	b9 01       	movw	r22, r18
     856:	02 c0       	rjmp	.+4      	; 0x85c <pinDirection+0xae>
     858:	66 0f       	add	r22, r22
     85a:	77 1f       	adc	r23, r23
     85c:	8a 95       	dec	r24
     85e:	e2 f7       	brpl	.-8      	; 0x858 <pinDirection+0xaa>
     860:	cb 01       	movw	r24, r22
     862:	84 2b       	or	r24, r20
     864:	84 bb       	out	0x14, r24	; 20
     866:	08 95       	ret
		else if(direction==INPUT)
     868:	61 11       	cpse	r22, r1
     86a:	36 c0       	rjmp	.+108    	; 0x8d8 <__stack+0x79>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
     86c:	44 b3       	in	r20, 0x14	; 20
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	40 97       	sbiw	r24, 0x10	; 16
     872:	21 e0       	ldi	r18, 0x01	; 1
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	b9 01       	movw	r22, r18
     878:	02 c0       	rjmp	.+4      	; 0x87e <__stack+0x1f>
     87a:	66 0f       	add	r22, r22
     87c:	77 1f       	adc	r23, r23
     87e:	8a 95       	dec	r24
     880:	e2 f7       	brpl	.-8      	; 0x87a <__stack+0x1b>
     882:	cb 01       	movw	r24, r22
     884:	80 95       	com	r24
     886:	84 23       	and	r24, r20
     888:	84 bb       	out	0x14, r24	; 20
     88a:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
     88c:	98 ee       	ldi	r25, 0xE8	; 232
     88e:	98 0f       	add	r25, r24
     890:	98 30       	cpi	r25, 0x08	; 8
     892:	10 f5       	brcc	.+68     	; 0x8d8 <__stack+0x79>
		if(direction == OUTPUT)
     894:	61 30       	cpi	r22, 0x01	; 1
     896:	79 f4       	brne	.+30     	; 0x8b6 <__stack+0x57>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
     898:	41 b3       	in	r20, 0x11	; 17
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	48 97       	sbiw	r24, 0x18	; 24
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	b9 01       	movw	r22, r18
     8a4:	02 c0       	rjmp	.+4      	; 0x8aa <__stack+0x4b>
     8a6:	66 0f       	add	r22, r22
     8a8:	77 1f       	adc	r23, r23
     8aa:	8a 95       	dec	r24
     8ac:	e2 f7       	brpl	.-8      	; 0x8a6 <__stack+0x47>
     8ae:	cb 01       	movw	r24, r22
     8b0:	84 2b       	or	r24, r20
     8b2:	81 bb       	out	0x11, r24	; 17
     8b4:	08 95       	ret
		else if(direction == INPUT)
     8b6:	61 11       	cpse	r22, r1
     8b8:	0f c0       	rjmp	.+30     	; 0x8d8 <__stack+0x79>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
     8ba:	41 b3       	in	r20, 0x11	; 17
     8bc:	90 e0       	ldi	r25, 0x00	; 0
     8be:	48 97       	sbiw	r24, 0x18	; 24
     8c0:	21 e0       	ldi	r18, 0x01	; 1
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	b9 01       	movw	r22, r18
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <__stack+0x6d>
     8c8:	66 0f       	add	r22, r22
     8ca:	77 1f       	adc	r23, r23
     8cc:	8a 95       	dec	r24
     8ce:	e2 f7       	brpl	.-8      	; 0x8c8 <__stack+0x69>
     8d0:	cb 01       	movw	r24, r22
     8d2:	80 95       	com	r24
     8d4:	84 23       	and	r24, r20
     8d6:	81 bb       	out	0x11, r24	; 17
     8d8:	08 95       	ret

000008da <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
     8da:	88 30       	cpi	r24, 0x08	; 8
     8dc:	58 f4       	brcc	.+22     	; 0x8f4 <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
     8de:	29 b3       	in	r18, 0x19	; 25
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	a9 01       	movw	r20, r18
     8e4:	02 c0       	rjmp	.+4      	; 0x8ea <readPin+0x10>
     8e6:	55 95       	asr	r21
     8e8:	47 95       	ror	r20
     8ea:	8a 95       	dec	r24
     8ec:	e2 f7       	brpl	.-8      	; 0x8e6 <readPin+0xc>
     8ee:	ca 01       	movw	r24, r20
     8f0:	81 70       	andi	r24, 0x01	; 1
     8f2:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
     8f4:	98 ef       	ldi	r25, 0xF8	; 248
     8f6:	98 0f       	add	r25, r24
     8f8:	98 30       	cpi	r25, 0x08	; 8
     8fa:	70 f4       	brcc	.+28     	; 0x918 <readPin+0x3e>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
     8fc:	96 b3       	in	r25, 0x16	; 22
     8fe:	28 2f       	mov	r18, r24
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	28 50       	subi	r18, 0x08	; 8
     904:	31 09       	sbc	r19, r1
     906:	89 2f       	mov	r24, r25
     908:	90 e0       	ldi	r25, 0x00	; 0
     90a:	02 c0       	rjmp	.+4      	; 0x910 <readPin+0x36>
     90c:	95 95       	asr	r25
     90e:	87 95       	ror	r24
     910:	2a 95       	dec	r18
     912:	e2 f7       	brpl	.-8      	; 0x90c <readPin+0x32>
     914:	81 70       	andi	r24, 0x01	; 1
     916:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
     918:	90 ef       	ldi	r25, 0xF0	; 240
     91a:	98 0f       	add	r25, r24
     91c:	98 30       	cpi	r25, 0x08	; 8
     91e:	70 f4       	brcc	.+28     	; 0x93c <readPin+0x62>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
     920:	93 b3       	in	r25, 0x13	; 19
     922:	28 2f       	mov	r18, r24
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	20 51       	subi	r18, 0x10	; 16
     928:	31 09       	sbc	r19, r1
     92a:	89 2f       	mov	r24, r25
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	02 c0       	rjmp	.+4      	; 0x934 <readPin+0x5a>
     930:	95 95       	asr	r25
     932:	87 95       	ror	r24
     934:	2a 95       	dec	r18
     936:	e2 f7       	brpl	.-8      	; 0x930 <readPin+0x56>
     938:	81 70       	andi	r24, 0x01	; 1
     93a:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
     93c:	98 ee       	ldi	r25, 0xE8	; 232
     93e:	98 0f       	add	r25, r24
     940:	98 30       	cpi	r25, 0x08	; 8
     942:	70 f4       	brcc	.+28     	; 0x960 <readPin+0x86>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
     944:	90 b3       	in	r25, 0x10	; 16
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	28 51       	subi	r18, 0x18	; 24
     94c:	31 09       	sbc	r19, r1
     94e:	89 2f       	mov	r24, r25
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	02 c0       	rjmp	.+4      	; 0x958 <readPin+0x7e>
     954:	95 95       	asr	r25
     956:	87 95       	ror	r24
     958:	2a 95       	dec	r18
     95a:	e2 f7       	brpl	.-8      	; 0x954 <readPin+0x7a>
     95c:	81 70       	andi	r24, 0x01	; 1
     95e:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     960:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
     962:	08 95       	ret

00000964 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     964:	41 30       	cpi	r20, 0x01	; 1
     966:	29 f4       	brne	.+10     	; 0x972 <writePins+0xe>
		SETBits(*port,mask);
     968:	fc 01       	movw	r30, r24
     96a:	20 81       	ld	r18, Z
     96c:	62 2b       	or	r22, r18
     96e:	60 83       	st	Z, r22
     970:	08 95       	ret
	else if(logic==LOW)
     972:	41 11       	cpse	r20, r1
     974:	05 c0       	rjmp	.+10     	; 0x980 <writePins+0x1c>
		CLRBits(*port,mask);
     976:	fc 01       	movw	r30, r24
     978:	20 81       	ld	r18, Z
     97a:	60 95       	com	r22
     97c:	62 23       	and	r22, r18
     97e:	60 83       	st	Z, r22
     980:	08 95       	ret

00000982 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     982:	41 30       	cpi	r20, 0x01	; 1
     984:	29 f4       	brne	.+10     	; 0x990 <pinsDirection+0xe>
		SETBits(*ddr,mask);
     986:	fc 01       	movw	r30, r24
     988:	20 81       	ld	r18, Z
     98a:	62 2b       	or	r22, r18
     98c:	60 83       	st	Z, r22
     98e:	08 95       	ret
	else if(direction == INPUT)
     990:	41 11       	cpse	r20, r1
     992:	05 c0       	rjmp	.+10     	; 0x99e <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     994:	fc 01       	movw	r30, r24
     996:	20 81       	ld	r18, Z
     998:	60 95       	com	r22
     99a:	62 23       	and	r22, r18
     99c:	60 83       	st	Z, r22
     99e:	08 95       	ret

000009a0 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
     9a0:	1f 92       	push	r1
     9a2:	0f 92       	push	r0
     9a4:	0f b6       	in	r0, 0x3f	; 63
     9a6:	0f 92       	push	r0
     9a8:	11 24       	eor	r1, r1
     9aa:	8f 93       	push	r24
     9ac:	9f 93       	push	r25
     9ae:	af 93       	push	r26
     9b0:	bf 93       	push	r27
	overflow++;	
     9b2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <overflow>
     9b6:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <overflow+0x1>
     9ba:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <overflow+0x2>
     9be:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <overflow+0x3>
     9c2:	01 96       	adiw	r24, 0x01	; 1
     9c4:	a1 1d       	adc	r26, r1
     9c6:	b1 1d       	adc	r27, r1
     9c8:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <overflow>
     9cc:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <overflow+0x1>
     9d0:	a0 93 18 01 	sts	0x0118, r26	; 0x800118 <overflow+0x2>
     9d4:	b0 93 19 01 	sts	0x0119, r27	; 0x800119 <overflow+0x3>
}
     9d8:	bf 91       	pop	r27
     9da:	af 91       	pop	r26
     9dc:	9f 91       	pop	r25
     9de:	8f 91       	pop	r24
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti

000009ea <UART_INIT>:
	}
	else{
		result = FALSE;
	}
	return result;
}
     9ea:	a0 e0       	ldi	r26, 0x00	; 0
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	aa 1f       	adc	r26, r26
     9f4:	bb 1f       	adc	r27, r27
     9f6:	88 0f       	add	r24, r24
     9f8:	99 1f       	adc	r25, r25
     9fa:	aa 1f       	adc	r26, r26
     9fc:	bb 1f       	adc	r27, r27
     9fe:	9c 01       	movw	r18, r24
     a00:	ad 01       	movw	r20, r26
     a02:	22 0f       	add	r18, r18
     a04:	33 1f       	adc	r19, r19
     a06:	44 1f       	adc	r20, r20
     a08:	55 1f       	adc	r21, r21
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	72 e1       	ldi	r23, 0x12	; 18
     a16:	8a e7       	ldi	r24, 0x7A	; 122
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	0e 94 54 07 	call	0xea8	; 0xea8 <__udivmodsi4>
     a1e:	21 50       	subi	r18, 0x01	; 1
     a20:	31 09       	sbc	r19, r1
     a22:	30 bd       	out	0x20, r19	; 32
     a24:	29 b9       	out	0x09, r18	; 9
     a26:	8a b1       	in	r24, 0x0a	; 10
     a28:	88 60       	ori	r24, 0x08	; 8
     a2a:	8a b9       	out	0x0a, r24	; 10
     a2c:	8a b1       	in	r24, 0x0a	; 10
     a2e:	80 61       	ori	r24, 0x10	; 16
     a30:	8a b9       	out	0x0a, r24	; 10
     a32:	86 e8       	ldi	r24, 0x86	; 134
     a34:	80 bd       	out	0x20, r24	; 32
     a36:	0e 94 25 03 	call	0x64a	; 0x64a <GLOBAL_INT_EN>
     a3a:	08 95       	ret

00000a3c <UART_TX>:
     a3c:	8c b9       	out	0x0c, r24	; 12
     a3e:	5d 9b       	sbis	0x0b, 5	; 11
     a40:	fe cf       	rjmp	.-4      	; 0xa3e <UART_TX+0x2>
     a42:	08 95       	ret

00000a44 <Uart_SendStr>:

void	Uart_SendStr(u8* str){
     a44:	cf 92       	push	r12
     a46:	df 92       	push	r13
     a48:	ef 92       	push	r14
     a4a:	ff 92       	push	r15
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	ec 01       	movw	r28, r24
	u32 ind = 0;
     a52:	c1 2c       	mov	r12, r1
     a54:	d1 2c       	mov	r13, r1
     a56:	76 01       	movw	r14, r12
	while(str[ind] != 0){
     a58:	07 c0       	rjmp	.+14     	; 0xa68 <Uart_SendStr+0x24>
		UART_TX(str[ind]);
     a5a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
		ind++;
     a5e:	8f ef       	ldi	r24, 0xFF	; 255
     a60:	c8 1a       	sub	r12, r24
     a62:	d8 0a       	sbc	r13, r24
     a64:	e8 0a       	sbc	r14, r24
     a66:	f8 0a       	sbc	r15, r24
	return result;
}

void	Uart_SendStr(u8* str){
	u32 ind = 0;
	while(str[ind] != 0){
     a68:	fe 01       	movw	r30, r28
     a6a:	ec 0d       	add	r30, r12
     a6c:	fd 1d       	adc	r31, r13
     a6e:	80 81       	ld	r24, Z
     a70:	81 11       	cpse	r24, r1
     a72:	f3 cf       	rjmp	.-26     	; 0xa5a <Uart_SendStr+0x16>
		UART_TX(str[ind]);
		ind++;
	}
     a74:	df 91       	pop	r29
     a76:	cf 91       	pop	r28
     a78:	ff 90       	pop	r15
     a7a:	ef 90       	pop	r14
     a7c:	df 90       	pop	r13
     a7e:	cf 90       	pop	r12
     a80:	08 95       	ret

00000a82 <sendUTFStr>:
 */ 
#include "MQTT.h"

u16 PID = 1;
u8 proName[] = "MQTT";
void sendUTFStr(u8* str){
     a82:	cf 93       	push	r28
     a84:	df 93       	push	r29
     a86:	ec 01       	movw	r28, r24
	UART_TX(0x00); // MSB = 0 because packet len < 256
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(strlen(str));
     a8e:	fe 01       	movw	r30, r28
     a90:	01 90       	ld	r0, Z+
     a92:	00 20       	and	r0, r0
     a94:	e9 f7       	brne	.-6      	; 0xa90 <sendUTFStr+0xe>
     a96:	cf 01       	movw	r24, r30
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	8c 1b       	sub	r24, r28
     a9c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	Uart_SendStr(str);
     aa0:	ce 01       	movw	r24, r28
     aa2:	0e 94 22 05 	call	0xa44	; 0xa44 <Uart_SendStr>
}
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <MQTT_Connect>:
void MQTT_Connect(u8* id){
     aac:	0f 93       	push	r16
     aae:	1f 93       	push	r17
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	8c 01       	movw	r16, r24
	u8 RL = (2 + strlen(proName)) + 1 + 1 + 2 + ( 2 + strlen(id));
     ab6:	e0 e6       	ldi	r30, 0x60	; 96
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	01 90       	ld	r0, Z+
     abc:	00 20       	and	r0, r0
     abe:	e9 f7       	brne	.-6      	; 0xaba <MQTT_Connect+0xe>
     ac0:	31 97       	sbiw	r30, 0x01	; 1
     ac2:	ef 01       	movw	r28, r30
     ac4:	c0 56       	subi	r28, 0x60	; 96
     ac6:	d0 40       	sbci	r29, 0x00	; 0
     ac8:	fc 01       	movw	r30, r24
     aca:	01 90       	ld	r0, Z+
     acc:	00 20       	and	r0, r0
     ace:	e9 f7       	brne	.-6      	; 0xaca <MQTT_Connect+0x1e>
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	e8 1b       	sub	r30, r24
     ad4:	f9 0b       	sbc	r31, r25
     ad6:	ec 0f       	add	r30, r28
     ad8:	c8 e0       	ldi	r28, 0x08	; 8
     ada:	ce 0f       	add	r28, r30
	UART_TX(0x10);
     adc:	80 e1       	ldi	r24, 0x10	; 16
     ade:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(RL);
     ae2:	8c 2f       	mov	r24, r28
     ae4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	sendUTFStr(proName);
     ae8:	80 e6       	ldi	r24, 0x60	; 96
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 41 05 	call	0xa82	; 0xa82 <sendUTFStr>
	UART_TX(0x04);
     af0:	84 e0       	ldi	r24, 0x04	; 4
     af2:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(0x02);
     af6:	82 e0       	ldi	r24, 0x02	; 2
     af8:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(0xFF);
     afc:	8f ef       	ldi	r24, 0xFF	; 255
     afe:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(0xFF);
     b02:	8f ef       	ldi	r24, 0xFF	; 255
     b04:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	sendUTFStr(id);
     b08:	c8 01       	movw	r24, r16
     b0a:	0e 94 41 05 	call	0xa82	; 0xa82 <sendUTFStr>
}
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <MQTT_Publish>:
void MQTT_Publish(u8* topic, u8* msgPtr, u8 msgLen){
     b18:	ef 92       	push	r14
     b1a:	ff 92       	push	r15
     b1c:	0f 93       	push	r16
     b1e:	1f 93       	push	r17
     b20:	cf 93       	push	r28
     b22:	df 93       	push	r29
     b24:	7c 01       	movw	r14, r24
     b26:	8b 01       	movw	r16, r22
     b28:	d4 2f       	mov	r29, r20
	u8 RL = (2 + strlen(topic)) + msgLen;
     b2a:	fc 01       	movw	r30, r24
     b2c:	01 90       	ld	r0, Z+
     b2e:	00 20       	and	r0, r0
     b30:	e9 f7       	brne	.-6      	; 0xb2c <MQTT_Publish+0x14>
     b32:	31 97       	sbiw	r30, 0x01	; 1
     b34:	e8 1b       	sub	r30, r24
     b36:	f9 0b       	sbc	r31, r25
     b38:	e4 0f       	add	r30, r20
     b3a:	c2 e0       	ldi	r28, 0x02	; 2
     b3c:	ce 0f       	add	r28, r30
	u8 ind = 0;
	UART_TX(0x30);
     b3e:	80 e3       	ldi	r24, 0x30	; 48
     b40:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(RL);
     b44:	8c 2f       	mov	r24, r28
     b46:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	sendUTFStr(topic);
     b4a:	c7 01       	movw	r24, r14
     b4c:	0e 94 41 05 	call	0xa82	; 0xa82 <sendUTFStr>
	for (ind = 0; ind < msgLen; ind++)
     b50:	c0 e0       	ldi	r28, 0x00	; 0
     b52:	07 c0       	rjmp	.+14     	; 0xb62 <MQTT_Publish+0x4a>
	{
		UART_TX(msgPtr[ind]);
     b54:	f8 01       	movw	r30, r16
     b56:	ec 0f       	add	r30, r28
     b58:	f1 1d       	adc	r31, r1
     b5a:	80 81       	ld	r24, Z
     b5c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	u8 RL = (2 + strlen(topic)) + msgLen;
	u8 ind = 0;
	UART_TX(0x30);
	UART_TX(RL);
	sendUTFStr(topic);
	for (ind = 0; ind < msgLen; ind++)
     b60:	cf 5f       	subi	r28, 0xFF	; 255
     b62:	cd 17       	cp	r28, r29
     b64:	b8 f3       	brcs	.-18     	; 0xb54 <MQTT_Publish+0x3c>
	{
		UART_TX(msgPtr[ind]);
	}
}
     b66:	df 91       	pop	r29
     b68:	cf 91       	pop	r28
     b6a:	1f 91       	pop	r17
     b6c:	0f 91       	pop	r16
     b6e:	ff 90       	pop	r15
     b70:	ef 90       	pop	r14
     b72:	08 95       	ret

00000b74 <MQTT_Subscribe>:
void MQTT_Subscribe(u8* topic){
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	8c 01       	movw	r16, r24
	u8 RL = 2 + (2 + strlen(topic)) + 1;
     b7c:	fc 01       	movw	r30, r24
     b7e:	01 90       	ld	r0, Z+
     b80:	00 20       	and	r0, r0
     b82:	e9 f7       	brne	.-6      	; 0xb7e <MQTT_Subscribe+0xa>
     b84:	31 97       	sbiw	r30, 0x01	; 1
     b86:	e8 1b       	sub	r30, r24
     b88:	f9 0b       	sbc	r31, r25
     b8a:	c5 e0       	ldi	r28, 0x05	; 5
     b8c:	ce 0f       	add	r28, r30
	UART_TX(0x82);
     b8e:	82 e8       	ldi	r24, 0x82	; 130
     b90:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX(RL);
     b94:	8c 2f       	mov	r24, r28
     b96:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	
	UART_TX((u8)(PID>>8)); // MSB
     b9a:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <PID+0x1>
     b9e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	UART_TX((u8)(PID));
     ba2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <PID>
     ba6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
	PID++;
     baa:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <PID>
     bae:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <PID+0x1>
     bb2:	01 96       	adiw	r24, 0x01	; 1
     bb4:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <PID+0x1>
     bb8:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <PID>
	
	sendUTFStr(topic);	
     bbc:	c8 01       	movw	r24, r16
     bbe:	0e 94 41 05 	call	0xa82	; 0xa82 <sendUTFStr>
	UART_TX(0x00);
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	0e 94 1e 05 	call	0xa3c	; 0xa3c <UART_TX>
     bc8:	cf 91       	pop	r28
     bca:	1f 91       	pop	r17
     bcc:	0f 91       	pop	r16
     bce:	08 95       	ret

00000bd0 <FireAlarm>:
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
}
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
     bd4:	cd b7       	in	r28, 0x3d	; 61
     bd6:	de b7       	in	r29, 0x3e	; 62
     bd8:	2d 97       	sbiw	r28, 0x0d	; 13
     bda:	0f b6       	in	r0, 0x3f	; 63
     bdc:	f8 94       	cli
     bde:	de bf       	out	0x3e, r29	; 62
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	cd bf       	out	0x3d, r28	; 61
     be4:	8d e0       	ldi	r24, 0x0D	; 13
     be6:	e9 e8       	ldi	r30, 0x89	; 137
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	be 01       	movw	r22, r28
     bec:	6f 5f       	subi	r22, 0xFF	; 255
     bee:	7f 4f       	sbci	r23, 0xFF	; 255
     bf0:	db 01       	movw	r26, r22
     bf2:	01 90       	ld	r0, Z+
     bf4:	0d 92       	st	X+, r0
     bf6:	8a 95       	dec	r24
     bf8:	e1 f7       	brne	.-8      	; 0xbf2 <FireAlarm+0x22>
     bfa:	92 b3       	in	r25, 0x12	; 18
     bfc:	88 e0       	ldi	r24, 0x08	; 8
     bfe:	89 27       	eor	r24, r25
     c00:	82 bb       	out	0x12, r24	; 18
     c02:	88 b3       	in	r24, 0x18	; 24
     c04:	80 58       	subi	r24, 0x80	; 128
     c06:	88 bb       	out	0x18, r24	; 24
     c08:	fb 01       	movw	r30, r22
     c0a:	01 90       	ld	r0, Z+
     c0c:	00 20       	and	r0, r0
     c0e:	e9 f7       	brne	.-6      	; 0xc0a <FireAlarm+0x3a>
     c10:	31 97       	sbiw	r30, 0x01	; 1
     c12:	af 01       	movw	r20, r30
     c14:	46 1b       	sub	r20, r22
     c16:	57 0b       	sbc	r21, r23
     c18:	82 e8       	ldi	r24, 0x82	; 130
     c1a:	90 e0       	ldi	r25, 0x00	; 0
     c1c:	0e 94 8c 05 	call	0xb18	; 0xb18 <MQTT_Publish>
     c20:	2f ef       	ldi	r18, 0xFF	; 255
     c22:	89 e6       	ldi	r24, 0x69	; 105
     c24:	98 e1       	ldi	r25, 0x18	; 24
     c26:	21 50       	subi	r18, 0x01	; 1
     c28:	80 40       	sbci	r24, 0x00	; 0
     c2a:	90 40       	sbci	r25, 0x00	; 0
     c2c:	e1 f7       	brne	.-8      	; 0xc26 <FireAlarm+0x56>
     c2e:	00 c0       	rjmp	.+0      	; 0xc30 <FireAlarm+0x60>
     c30:	00 00       	nop
     c32:	2d 96       	adiw	r28, 0x0d	; 13
     c34:	0f b6       	in	r0, 0x3f	; 63
     c36:	f8 94       	cli
     c38:	de bf       	out	0x3e, r29	; 62
     c3a:	0f be       	out	0x3f, r0	; 63
     c3c:	cd bf       	out	0x3d, r28	; 61
     c3e:	df 91       	pop	r29
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <turnOnFireAlarm>:
     c44:	88 ee       	ldi	r24, 0xE8	; 232
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Callback>
     c4c:	08 95       	ret

00000c4e <Project_Init>:
     c4e:	0e 94 e5 01 	call	0x3ca	; 0x3ca <KEYPAD_Init>
     c52:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_init>
     c56:	0e 94 2c 03 	call	0x658	; 0x658 <ADC_init>
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	86 e0       	ldi	r24, 0x06	; 6
     c5e:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <INT_init>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	84 e1       	ldi	r24, 0x14	; 20
     c66:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	8f e0       	ldi	r24, 0x0F	; 15
     c6e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	8c e1       	ldi	r24, 0x1C	; 28
     c76:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
     c7a:	61 e0       	ldi	r22, 0x01	; 1
     c7c:	8d e1       	ldi	r24, 0x1D	; 29
     c7e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
     c82:	61 e0       	ldi	r22, 0x01	; 1
     c84:	8b e1       	ldi	r24, 0x1B	; 27
     c86:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	8a e1       	ldi	r24, 0x1A	; 26
     c8e:	0e 94 d7 03 	call	0x7ae	; 0x7ae <pinDirection>
     c92:	08 95       	ret

00000c94 <temp>:
	_delay_ms(1000);
	
}

void temp(void)
{
     c94:	ef 92       	push	r14
     c96:	ff 92       	push	r15
     c98:	0f 93       	push	r16
     c9a:	1f 93       	push	r17
     c9c:	cf 93       	push	r28
     c9e:	df 93       	push	r29
     ca0:	cd b7       	in	r28, 0x3d	; 61
     ca2:	de b7       	in	r29, 0x3e	; 62
     ca4:	c8 57       	subi	r28, 0x78	; 120
     ca6:	d1 09       	sbc	r29, r1
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	u8 temp[60];
	u8 hum[60];
	disp_strXY(3,1,"Humid=     %RH");
     cb2:	40 ec       	ldi	r20, 0xC0	; 192
     cb4:	50 e0       	ldi	r21, 0x00	; 0
     cb6:	61 e0       	ldi	r22, 0x01	; 1
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	0e 94 b9 02 	call	0x572	; 0x572 <disp_strXY>
	disp_strXY(4,1,"temp=      Deg.c");
     cbe:	4f ec       	ldi	r20, 0xCF	; 207
     cc0:	50 e0       	ldi	r21, 0x00	; 0
     cc2:	61 e0       	ldi	r22, 0x01	; 1
     cc4:	84 e0       	ldi	r24, 0x04	; 4
     cc6:	0e 94 b9 02 	call	0x572	; 0x572 <disp_strXY>
	DHT_Represent(hum,temp);
     cca:	8e 01       	movw	r16, r28
     ccc:	03 5c       	subi	r16, 0xC3	; 195
     cce:	1f 4f       	sbci	r17, 0xFF	; 255
     cd0:	ce 01       	movw	r24, r28
     cd2:	01 96       	adiw	r24, 0x01	; 1
     cd4:	7c 01       	movw	r14, r24
     cd6:	bc 01       	movw	r22, r24
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 b5 01 	call	0x36a	; 0x36a <DHT_Represent>
	disp_strXY(3,7,hum);
     cde:	a8 01       	movw	r20, r16
     ce0:	67 e0       	ldi	r22, 0x07	; 7
     ce2:	83 e0       	ldi	r24, 0x03	; 3
     ce4:	0e 94 b9 02 	call	0x572	; 0x572 <disp_strXY>
	disp_strXY(4,6,temp);
     ce8:	a7 01       	movw	r20, r14
     cea:	66 e0       	ldi	r22, 0x06	; 6
     cec:	84 e0       	ldi	r24, 0x04	; 4
     cee:	0e 94 b9 02 	call	0x572	; 0x572 <disp_strXY>
	
	MQTT_Publish("G/DHT",temp,strlen(temp));
     cf2:	f7 01       	movw	r30, r14
     cf4:	01 90       	ld	r0, Z+
     cf6:	00 20       	and	r0, r0
     cf8:	e9 f7       	brne	.-6      	; 0xcf4 <temp+0x60>
     cfa:	31 97       	sbiw	r30, 0x01	; 1
     cfc:	af 01       	movw	r20, r30
     cfe:	4e 19       	sub	r20, r14
     d00:	5f 09       	sbc	r21, r15
     d02:	b7 01       	movw	r22, r14
     d04:	80 ee       	ldi	r24, 0xE0	; 224
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 8c 05 	call	0xb18	; 0xb18 <MQTT_Publish>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d0c:	9f ef       	ldi	r25, 0xFF	; 255
     d0e:	29 e6       	ldi	r18, 0x69	; 105
     d10:	88 e1       	ldi	r24, 0x18	; 24
     d12:	91 50       	subi	r25, 0x01	; 1
     d14:	20 40       	sbci	r18, 0x00	; 0
     d16:	80 40       	sbci	r24, 0x00	; 0
     d18:	e1 f7       	brne	.-8      	; 0xd12 <temp+0x7e>
     d1a:	00 c0       	rjmp	.+0      	; 0xd1c <temp+0x88>
     d1c:	00 00       	nop
	_delay_ms(1000);
	MQTT_Publish("G/hum",hum,strlen(hum));
     d1e:	f8 01       	movw	r30, r16
     d20:	01 90       	ld	r0, Z+
     d22:	00 20       	and	r0, r0
     d24:	e9 f7       	brne	.-6      	; 0xd20 <temp+0x8c>
     d26:	31 97       	sbiw	r30, 0x01	; 1
     d28:	af 01       	movw	r20, r30
     d2a:	40 1b       	sub	r20, r16
     d2c:	51 0b       	sbc	r21, r17
     d2e:	b8 01       	movw	r22, r16
     d30:	86 ee       	ldi	r24, 0xE6	; 230
     d32:	90 e0       	ldi	r25, 0x00	; 0
     d34:	0e 94 8c 05 	call	0xb18	; 0xb18 <MQTT_Publish>
     d38:	9f ef       	ldi	r25, 0xFF	; 255
     d3a:	29 e6       	ldi	r18, 0x69	; 105
     d3c:	88 e1       	ldi	r24, 0x18	; 24
     d3e:	91 50       	subi	r25, 0x01	; 1
     d40:	20 40       	sbci	r18, 0x00	; 0
     d42:	80 40       	sbci	r24, 0x00	; 0
     d44:	e1 f7       	brne	.-8      	; 0xd3e <temp+0xaa>
     d46:	00 c0       	rjmp	.+0      	; 0xd48 <temp+0xb4>
     d48:	00 00       	nop
	_delay_ms(1000);
}
     d4a:	c8 58       	subi	r28, 0x88	; 136
     d4c:	df 4f       	sbci	r29, 0xFF	; 255
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	df 91       	pop	r29
     d5a:	cf 91       	pop	r28
     d5c:	1f 91       	pop	r17
     d5e:	0f 91       	pop	r16
     d60:	ff 90       	pop	r15
     d62:	ef 90       	pop	r14
     d64:	08 95       	ret

00000d66 <AnalogSensors>:
	disp_intXY(2,6,trials);
	Get_Password(password);	
}

void AnalogSensors(void)
{
     d66:	af 92       	push	r10
     d68:	bf 92       	push	r11
     d6a:	cf 92       	push	r12
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	00 d0       	rcall	.+0      	; 0xd7c <AnalogSensors+0x16>
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <AnalogSensors+0x18>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
	u8 tempstr[4]={0};
     d82:	19 82       	std	Y+1, r1	; 0x01
     d84:	1a 82       	std	Y+2, r1	; 0x02
     d86:	1b 82       	std	Y+3, r1	; 0x03
     d88:	1c 82       	std	Y+4, r1	; 0x04
	LCD_CLEAR();
     d8a:	0e 94 42 02 	call	0x484	; 0x484 <LCD_CLEAR>
	u16 LDR=0;
	u16 soil=0;
	soil=read_analog(SOILSENSOR);
     d8e:	80 e0       	ldi	r24, 0x00	; 0
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 33 03 	call	0x666	; 0x666 <read_analog>
     d96:	8c 01       	movw	r16, r24
	LDR=read_analog(LDRSENSOR);
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 33 03 	call	0x666	; 0x666 <read_analog>
     da0:	7c 01       	movw	r14, r24
	soil=(100-(soil*100UL)/1019UL);
     da2:	98 01       	movw	r18, r16
     da4:	a4 e6       	ldi	r26, 0x64	; 100
     da6:	b0 e0       	ldi	r27, 0x00	; 0
     da8:	0e 94 76 07 	call	0xeec	; 0xeec <__umulhisi3>
     dac:	2b ef       	ldi	r18, 0xFB	; 251
     dae:	33 e0       	ldi	r19, 0x03	; 3
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	50 e0       	ldi	r21, 0x00	; 0
     db4:	0e 94 54 07 	call	0xea8	; 0xea8 <__udivmodsi4>
     db8:	04 e6       	ldi	r16, 0x64	; 100
     dba:	10 e0       	ldi	r17, 0x00	; 0
     dbc:	02 1b       	sub	r16, r18
     dbe:	13 0b       	sbc	r17, r19
	LDR=((LDR*100UL)/407UL);
     dc0:	97 01       	movw	r18, r14
     dc2:	a4 e6       	ldi	r26, 0x64	; 100
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	0e 94 76 07 	call	0xeec	; 0xeec <__umulhisi3>
     dca:	27 e9       	ldi	r18, 0x97	; 151
     dcc:	31 e0       	ldi	r19, 0x01	; 1
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	0e 94 54 07 	call	0xea8	; 0xea8 <__udivmodsi4>
     dd6:	69 01       	movw	r12, r18
     dd8:	7a 01       	movw	r14, r20
     dda:	59 01       	movw	r10, r18
	disp_strXY(1,1,"soil water=");
     ddc:	4c ee       	ldi	r20, 0xEC	; 236
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	61 e0       	ldi	r22, 0x01	; 1
     de2:	81 e0       	ldi	r24, 0x01	; 1
     de4:	0e 94 b9 02 	call	0x572	; 0x572 <disp_strXY>
	disp_int(soil);
     de8:	b8 01       	movw	r22, r16
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	0e 94 c4 02 	call	0x588	; 0x588 <disp_int>
	disp_char('%');
     df2:	85 e2       	ldi	r24, 0x25	; 37
     df4:	0e 94 87 02 	call	0x50e	; 0x50e <disp_char>
	disp_strXY(2,1,"Light = ");
     df8:	48 ef       	ldi	r20, 0xF8	; 248
     dfa:	50 e0       	ldi	r21, 0x00	; 0
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	82 e0       	ldi	r24, 0x02	; 2
     e00:	0e 94 b9 02 	call	0x572	; 0x572 <disp_strXY>
	disp_int(LDR);
     e04:	c7 01       	movw	r24, r14
     e06:	b6 01       	movw	r22, r12
     e08:	88 27       	eor	r24, r24
     e0a:	99 27       	eor	r25, r25
     e0c:	0e 94 c4 02 	call	0x588	; 0x588 <disp_int>
	disp_char('%');
     e10:	85 e2       	ldi	r24, 0x25	; 37
     e12:	0e 94 87 02 	call	0x50e	; 0x50e <disp_char>
	//controlling planets irrigation 
	if (soil<=30)//turn on pump
     e16:	0f 31       	cpi	r16, 0x1F	; 31
     e18:	11 05       	cpc	r17, r1
     e1a:	28 f4       	brcc	.+10     	; 0xe26 <AnalogSensors+0xc0>
	{
		writePin(SOIL_PUMP,HIGH);
     e1c:	61 e0       	ldi	r22, 0x01	; 1
     e1e:	8c e1       	ldi	r24, 0x1C	; 28
     e20:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     e24:	04 c0       	rjmp	.+8      	; 0xe2e <AnalogSensors+0xc8>
	}
	else
	{
		writePin(SOIL_PUMP,LOW);
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	8c e1       	ldi	r24, 0x1C	; 28
     e2a:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
	}
	//controlling outer lights
	if (LDR<30)//turn on lights
     e2e:	2e e1       	ldi	r18, 0x1E	; 30
     e30:	a2 16       	cp	r10, r18
     e32:	b1 04       	cpc	r11, r1
     e34:	28 f4       	brcc	.+10     	; 0xe40 <AnalogSensors+0xda>
	{
		writePin(OUTERLIGHT,HIGH);
     e36:	61 e0       	ldi	r22, 0x01	; 1
     e38:	8d e1       	ldi	r24, 0x1D	; 29
     e3a:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
     e3e:	04 c0       	rjmp	.+8      	; 0xe48 <AnalogSensors+0xe2>
	}
	else
	{
		writePin(OUTERLIGHT,LOW);
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	8d e1       	ldi	r24, 0x1D	; 29
     e44:	0e 94 41 03 	call	0x682	; 0x682 <writePin>
	}
	
	temp();
     e48:	0e 94 4a 06 	call	0xc94	; 0xc94 <temp>
	itoa(LDR,tempstr,10);
     e4c:	4a e0       	ldi	r20, 0x0A	; 10
     e4e:	50 e0       	ldi	r21, 0x00	; 0
     e50:	8e 01       	movw	r16, r28
     e52:	0f 5f       	subi	r16, 0xFF	; 255
     e54:	1f 4f       	sbci	r17, 0xFF	; 255
     e56:	b8 01       	movw	r22, r16
     e58:	c6 01       	movw	r24, r12
     e5a:	0e 94 90 07 	call	0xf20	; 0xf20 <itoa>
	MQTT_Publish("G/light",tempstr,strlen(tempstr));
     e5e:	f8 01       	movw	r30, r16
     e60:	01 90       	ld	r0, Z+
     e62:	00 20       	and	r0, r0
     e64:	e9 f7       	brne	.-6      	; 0xe60 <AnalogSensors+0xfa>
     e66:	31 97       	sbiw	r30, 0x01	; 1
     e68:	af 01       	movw	r20, r30
     e6a:	40 1b       	sub	r20, r16
     e6c:	51 0b       	sbc	r21, r17
     e6e:	b8 01       	movw	r22, r16
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	91 e0       	ldi	r25, 0x01	; 1
     e74:	0e 94 8c 05 	call	0xb18	; 0xb18 <MQTT_Publish>
     e78:	8f ef       	ldi	r24, 0xFF	; 255
     e7a:	99 e6       	ldi	r25, 0x69	; 105
     e7c:	28 e1       	ldi	r18, 0x18	; 24
     e7e:	81 50       	subi	r24, 0x01	; 1
     e80:	90 40       	sbci	r25, 0x00	; 0
     e82:	20 40       	sbci	r18, 0x00	; 0
     e84:	e1 f7       	brne	.-8      	; 0xe7e <AnalogSensors+0x118>
     e86:	00 c0       	rjmp	.+0      	; 0xe88 <AnalogSensors+0x122>
     e88:	00 00       	nop
	_delay_ms(1000);
	
}
     e8a:	0f 90       	pop	r0
     e8c:	0f 90       	pop	r0
     e8e:	0f 90       	pop	r0
     e90:	0f 90       	pop	r0
     e92:	df 91       	pop	r29
     e94:	cf 91       	pop	r28
     e96:	1f 91       	pop	r17
     e98:	0f 91       	pop	r16
     e9a:	ff 90       	pop	r15
     e9c:	ef 90       	pop	r14
     e9e:	df 90       	pop	r13
     ea0:	cf 90       	pop	r12
     ea2:	bf 90       	pop	r11
     ea4:	af 90       	pop	r10
     ea6:	08 95       	ret

00000ea8 <__udivmodsi4>:
     ea8:	a1 e2       	ldi	r26, 0x21	; 33
     eaa:	1a 2e       	mov	r1, r26
     eac:	aa 1b       	sub	r26, r26
     eae:	bb 1b       	sub	r27, r27
     eb0:	fd 01       	movw	r30, r26
     eb2:	0d c0       	rjmp	.+26     	; 0xece <__udivmodsi4_ep>

00000eb4 <__udivmodsi4_loop>:
     eb4:	aa 1f       	adc	r26, r26
     eb6:	bb 1f       	adc	r27, r27
     eb8:	ee 1f       	adc	r30, r30
     eba:	ff 1f       	adc	r31, r31
     ebc:	a2 17       	cp	r26, r18
     ebe:	b3 07       	cpc	r27, r19
     ec0:	e4 07       	cpc	r30, r20
     ec2:	f5 07       	cpc	r31, r21
     ec4:	20 f0       	brcs	.+8      	; 0xece <__udivmodsi4_ep>
     ec6:	a2 1b       	sub	r26, r18
     ec8:	b3 0b       	sbc	r27, r19
     eca:	e4 0b       	sbc	r30, r20
     ecc:	f5 0b       	sbc	r31, r21

00000ece <__udivmodsi4_ep>:
     ece:	66 1f       	adc	r22, r22
     ed0:	77 1f       	adc	r23, r23
     ed2:	88 1f       	adc	r24, r24
     ed4:	99 1f       	adc	r25, r25
     ed6:	1a 94       	dec	r1
     ed8:	69 f7       	brne	.-38     	; 0xeb4 <__udivmodsi4_loop>
     eda:	60 95       	com	r22
     edc:	70 95       	com	r23
     ede:	80 95       	com	r24
     ee0:	90 95       	com	r25
     ee2:	9b 01       	movw	r18, r22
     ee4:	ac 01       	movw	r20, r24
     ee6:	bd 01       	movw	r22, r26
     ee8:	cf 01       	movw	r24, r30
     eea:	08 95       	ret

00000eec <__umulhisi3>:
     eec:	a2 9f       	mul	r26, r18
     eee:	b0 01       	movw	r22, r0
     ef0:	b3 9f       	mul	r27, r19
     ef2:	c0 01       	movw	r24, r0
     ef4:	a3 9f       	mul	r26, r19
     ef6:	70 0d       	add	r23, r0
     ef8:	81 1d       	adc	r24, r1
     efa:	11 24       	eor	r1, r1
     efc:	91 1d       	adc	r25, r1
     efe:	b2 9f       	mul	r27, r18
     f00:	70 0d       	add	r23, r0
     f02:	81 1d       	adc	r24, r1
     f04:	11 24       	eor	r1, r1
     f06:	91 1d       	adc	r25, r1
     f08:	08 95       	ret

00000f0a <strcat>:
     f0a:	fb 01       	movw	r30, r22
     f0c:	dc 01       	movw	r26, r24
     f0e:	0d 90       	ld	r0, X+
     f10:	00 20       	and	r0, r0
     f12:	e9 f7       	brne	.-6      	; 0xf0e <strcat+0x4>
     f14:	11 97       	sbiw	r26, 0x01	; 1
     f16:	01 90       	ld	r0, Z+
     f18:	0d 92       	st	X+, r0
     f1a:	00 20       	and	r0, r0
     f1c:	e1 f7       	brne	.-8      	; 0xf16 <strcat+0xc>
     f1e:	08 95       	ret

00000f20 <itoa>:
     f20:	45 32       	cpi	r20, 0x25	; 37
     f22:	51 05       	cpc	r21, r1
     f24:	20 f4       	brcc	.+8      	; 0xf2e <itoa+0xe>
     f26:	42 30       	cpi	r20, 0x02	; 2
     f28:	10 f0       	brcs	.+4      	; 0xf2e <itoa+0xe>
     f2a:	0c 94 9b 07 	jmp	0xf36	; 0xf36 <__itoa_ncheck>
     f2e:	fb 01       	movw	r30, r22
     f30:	10 82       	st	Z, r1
     f32:	cb 01       	movw	r24, r22
     f34:	08 95       	ret

00000f36 <__itoa_ncheck>:
     f36:	bb 27       	eor	r27, r27
     f38:	4a 30       	cpi	r20, 0x0A	; 10
     f3a:	31 f4       	brne	.+12     	; 0xf48 <__itoa_ncheck+0x12>
     f3c:	99 23       	and	r25, r25
     f3e:	22 f4       	brpl	.+8      	; 0xf48 <__itoa_ncheck+0x12>
     f40:	bd e2       	ldi	r27, 0x2D	; 45
     f42:	90 95       	com	r25
     f44:	81 95       	neg	r24
     f46:	9f 4f       	sbci	r25, 0xFF	; 255
     f48:	0c 94 a7 07 	jmp	0xf4e	; 0xf4e <__utoa_common>

00000f4c <__utoa_ncheck>:
     f4c:	bb 27       	eor	r27, r27

00000f4e <__utoa_common>:
     f4e:	fb 01       	movw	r30, r22
     f50:	55 27       	eor	r21, r21
     f52:	aa 27       	eor	r26, r26
     f54:	88 0f       	add	r24, r24
     f56:	99 1f       	adc	r25, r25
     f58:	aa 1f       	adc	r26, r26
     f5a:	a4 17       	cp	r26, r20
     f5c:	10 f0       	brcs	.+4      	; 0xf62 <__utoa_common+0x14>
     f5e:	a4 1b       	sub	r26, r20
     f60:	83 95       	inc	r24
     f62:	50 51       	subi	r21, 0x10	; 16
     f64:	b9 f7       	brne	.-18     	; 0xf54 <__utoa_common+0x6>
     f66:	a0 5d       	subi	r26, 0xD0	; 208
     f68:	aa 33       	cpi	r26, 0x3A	; 58
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <__utoa_common+0x20>
     f6c:	a9 5d       	subi	r26, 0xD9	; 217
     f6e:	a1 93       	st	Z+, r26
     f70:	00 97       	sbiw	r24, 0x00	; 0
     f72:	79 f7       	brne	.-34     	; 0xf52 <__utoa_common+0x4>
     f74:	b1 11       	cpse	r27, r1
     f76:	b1 93       	st	Z+, r27
     f78:	11 92       	st	Z+, r1
     f7a:	cb 01       	movw	r24, r22
     f7c:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <strrev>

00000f80 <sprintf>:
     f80:	ae e0       	ldi	r26, 0x0E	; 14
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 ec       	ldi	r30, 0xC6	; 198
     f86:	f7 e0       	ldi	r31, 0x07	; 7
     f88:	0c 94 91 0a 	jmp	0x1522	; 0x1522 <__prologue_saves__+0x1c>
     f8c:	0d 89       	ldd	r16, Y+21	; 0x15
     f8e:	1e 89       	ldd	r17, Y+22	; 0x16
     f90:	86 e0       	ldi	r24, 0x06	; 6
     f92:	8c 83       	std	Y+4, r24	; 0x04
     f94:	1a 83       	std	Y+2, r17	; 0x02
     f96:	09 83       	std	Y+1, r16	; 0x01
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f e7       	ldi	r25, 0x7F	; 127
     f9c:	9e 83       	std	Y+6, r25	; 0x06
     f9e:	8d 83       	std	Y+5, r24	; 0x05
     fa0:	ae 01       	movw	r20, r28
     fa2:	47 5e       	subi	r20, 0xE7	; 231
     fa4:	5f 4f       	sbci	r21, 0xFF	; 255
     fa6:	6f 89       	ldd	r22, Y+23	; 0x17
     fa8:	78 8d       	ldd	r23, Y+24	; 0x18
     faa:	ce 01       	movw	r24, r28
     fac:	01 96       	adiw	r24, 0x01	; 1
     fae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <vfprintf>
     fb2:	ef 81       	ldd	r30, Y+7	; 0x07
     fb4:	f8 85       	ldd	r31, Y+8	; 0x08
     fb6:	e0 0f       	add	r30, r16
     fb8:	f1 1f       	adc	r31, r17
     fba:	10 82       	st	Z, r1
     fbc:	2e 96       	adiw	r28, 0x0e	; 14
     fbe:	e4 e0       	ldi	r30, 0x04	; 4
     fc0:	0c 94 ad 0a 	jmp	0x155a	; 0x155a <__epilogue_restores__+0x1c>

00000fc4 <vfprintf>:
     fc4:	ab e0       	ldi	r26, 0x0B	; 11
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 ee       	ldi	r30, 0xE8	; 232
     fca:	f7 e0       	ldi	r31, 0x07	; 7
     fcc:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__prologue_saves__>
     fd0:	6c 01       	movw	r12, r24
     fd2:	7b 01       	movw	r14, r22
     fd4:	8a 01       	movw	r16, r20
     fd6:	fc 01       	movw	r30, r24
     fd8:	17 82       	std	Z+7, r1	; 0x07
     fda:	16 82       	std	Z+6, r1	; 0x06
     fdc:	83 81       	ldd	r24, Z+3	; 0x03
     fde:	81 ff       	sbrs	r24, 1
     fe0:	cc c1       	rjmp	.+920    	; 0x137a <vfprintf+0x3b6>
     fe2:	ce 01       	movw	r24, r28
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	3c 01       	movw	r6, r24
     fe8:	f6 01       	movw	r30, r12
     fea:	93 81       	ldd	r25, Z+3	; 0x03
     fec:	f7 01       	movw	r30, r14
     fee:	93 fd       	sbrc	r25, 3
     ff0:	85 91       	lpm	r24, Z+
     ff2:	93 ff       	sbrs	r25, 3
     ff4:	81 91       	ld	r24, Z+
     ff6:	7f 01       	movw	r14, r30
     ff8:	88 23       	and	r24, r24
     ffa:	09 f4       	brne	.+2      	; 0xffe <vfprintf+0x3a>
     ffc:	ba c1       	rjmp	.+884    	; 0x1372 <vfprintf+0x3ae>
     ffe:	85 32       	cpi	r24, 0x25	; 37
    1000:	39 f4       	brne	.+14     	; 0x1010 <vfprintf+0x4c>
    1002:	93 fd       	sbrc	r25, 3
    1004:	85 91       	lpm	r24, Z+
    1006:	93 ff       	sbrs	r25, 3
    1008:	81 91       	ld	r24, Z+
    100a:	7f 01       	movw	r14, r30
    100c:	85 32       	cpi	r24, 0x25	; 37
    100e:	29 f4       	brne	.+10     	; 0x101a <vfprintf+0x56>
    1010:	b6 01       	movw	r22, r12
    1012:	90 e0       	ldi	r25, 0x00	; 0
    1014:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    1018:	e7 cf       	rjmp	.-50     	; 0xfe8 <vfprintf+0x24>
    101a:	91 2c       	mov	r9, r1
    101c:	21 2c       	mov	r2, r1
    101e:	31 2c       	mov	r3, r1
    1020:	ff e1       	ldi	r31, 0x1F	; 31
    1022:	f3 15       	cp	r31, r3
    1024:	d8 f0       	brcs	.+54     	; 0x105c <vfprintf+0x98>
    1026:	8b 32       	cpi	r24, 0x2B	; 43
    1028:	79 f0       	breq	.+30     	; 0x1048 <vfprintf+0x84>
    102a:	38 f4       	brcc	.+14     	; 0x103a <vfprintf+0x76>
    102c:	80 32       	cpi	r24, 0x20	; 32
    102e:	79 f0       	breq	.+30     	; 0x104e <vfprintf+0x8a>
    1030:	83 32       	cpi	r24, 0x23	; 35
    1032:	a1 f4       	brne	.+40     	; 0x105c <vfprintf+0x98>
    1034:	23 2d       	mov	r18, r3
    1036:	20 61       	ori	r18, 0x10	; 16
    1038:	1d c0       	rjmp	.+58     	; 0x1074 <vfprintf+0xb0>
    103a:	8d 32       	cpi	r24, 0x2D	; 45
    103c:	61 f0       	breq	.+24     	; 0x1056 <vfprintf+0x92>
    103e:	80 33       	cpi	r24, 0x30	; 48
    1040:	69 f4       	brne	.+26     	; 0x105c <vfprintf+0x98>
    1042:	23 2d       	mov	r18, r3
    1044:	21 60       	ori	r18, 0x01	; 1
    1046:	16 c0       	rjmp	.+44     	; 0x1074 <vfprintf+0xb0>
    1048:	83 2d       	mov	r24, r3
    104a:	82 60       	ori	r24, 0x02	; 2
    104c:	38 2e       	mov	r3, r24
    104e:	e3 2d       	mov	r30, r3
    1050:	e4 60       	ori	r30, 0x04	; 4
    1052:	3e 2e       	mov	r3, r30
    1054:	2a c0       	rjmp	.+84     	; 0x10aa <vfprintf+0xe6>
    1056:	f3 2d       	mov	r31, r3
    1058:	f8 60       	ori	r31, 0x08	; 8
    105a:	1d c0       	rjmp	.+58     	; 0x1096 <vfprintf+0xd2>
    105c:	37 fc       	sbrc	r3, 7
    105e:	2d c0       	rjmp	.+90     	; 0x10ba <vfprintf+0xf6>
    1060:	20 ed       	ldi	r18, 0xD0	; 208
    1062:	28 0f       	add	r18, r24
    1064:	2a 30       	cpi	r18, 0x0A	; 10
    1066:	40 f0       	brcs	.+16     	; 0x1078 <vfprintf+0xb4>
    1068:	8e 32       	cpi	r24, 0x2E	; 46
    106a:	b9 f4       	brne	.+46     	; 0x109a <vfprintf+0xd6>
    106c:	36 fc       	sbrc	r3, 6
    106e:	81 c1       	rjmp	.+770    	; 0x1372 <vfprintf+0x3ae>
    1070:	23 2d       	mov	r18, r3
    1072:	20 64       	ori	r18, 0x40	; 64
    1074:	32 2e       	mov	r3, r18
    1076:	19 c0       	rjmp	.+50     	; 0x10aa <vfprintf+0xe6>
    1078:	36 fe       	sbrs	r3, 6
    107a:	06 c0       	rjmp	.+12     	; 0x1088 <vfprintf+0xc4>
    107c:	8a e0       	ldi	r24, 0x0A	; 10
    107e:	98 9e       	mul	r9, r24
    1080:	20 0d       	add	r18, r0
    1082:	11 24       	eor	r1, r1
    1084:	92 2e       	mov	r9, r18
    1086:	11 c0       	rjmp	.+34     	; 0x10aa <vfprintf+0xe6>
    1088:	ea e0       	ldi	r30, 0x0A	; 10
    108a:	2e 9e       	mul	r2, r30
    108c:	20 0d       	add	r18, r0
    108e:	11 24       	eor	r1, r1
    1090:	22 2e       	mov	r2, r18
    1092:	f3 2d       	mov	r31, r3
    1094:	f0 62       	ori	r31, 0x20	; 32
    1096:	3f 2e       	mov	r3, r31
    1098:	08 c0       	rjmp	.+16     	; 0x10aa <vfprintf+0xe6>
    109a:	8c 36       	cpi	r24, 0x6C	; 108
    109c:	21 f4       	brne	.+8      	; 0x10a6 <vfprintf+0xe2>
    109e:	83 2d       	mov	r24, r3
    10a0:	80 68       	ori	r24, 0x80	; 128
    10a2:	38 2e       	mov	r3, r24
    10a4:	02 c0       	rjmp	.+4      	; 0x10aa <vfprintf+0xe6>
    10a6:	88 36       	cpi	r24, 0x68	; 104
    10a8:	41 f4       	brne	.+16     	; 0x10ba <vfprintf+0xf6>
    10aa:	f7 01       	movw	r30, r14
    10ac:	93 fd       	sbrc	r25, 3
    10ae:	85 91       	lpm	r24, Z+
    10b0:	93 ff       	sbrs	r25, 3
    10b2:	81 91       	ld	r24, Z+
    10b4:	7f 01       	movw	r14, r30
    10b6:	81 11       	cpse	r24, r1
    10b8:	b3 cf       	rjmp	.-154    	; 0x1020 <vfprintf+0x5c>
    10ba:	98 2f       	mov	r25, r24
    10bc:	9f 7d       	andi	r25, 0xDF	; 223
    10be:	95 54       	subi	r25, 0x45	; 69
    10c0:	93 30       	cpi	r25, 0x03	; 3
    10c2:	28 f4       	brcc	.+10     	; 0x10ce <vfprintf+0x10a>
    10c4:	0c 5f       	subi	r16, 0xFC	; 252
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	9f e3       	ldi	r25, 0x3F	; 63
    10ca:	99 83       	std	Y+1, r25	; 0x01
    10cc:	0d c0       	rjmp	.+26     	; 0x10e8 <vfprintf+0x124>
    10ce:	83 36       	cpi	r24, 0x63	; 99
    10d0:	31 f0       	breq	.+12     	; 0x10de <vfprintf+0x11a>
    10d2:	83 37       	cpi	r24, 0x73	; 115
    10d4:	71 f0       	breq	.+28     	; 0x10f2 <vfprintf+0x12e>
    10d6:	83 35       	cpi	r24, 0x53	; 83
    10d8:	09 f0       	breq	.+2      	; 0x10dc <vfprintf+0x118>
    10da:	59 c0       	rjmp	.+178    	; 0x118e <vfprintf+0x1ca>
    10dc:	21 c0       	rjmp	.+66     	; 0x1120 <vfprintf+0x15c>
    10de:	f8 01       	movw	r30, r16
    10e0:	80 81       	ld	r24, Z
    10e2:	89 83       	std	Y+1, r24	; 0x01
    10e4:	0e 5f       	subi	r16, 0xFE	; 254
    10e6:	1f 4f       	sbci	r17, 0xFF	; 255
    10e8:	88 24       	eor	r8, r8
    10ea:	83 94       	inc	r8
    10ec:	91 2c       	mov	r9, r1
    10ee:	53 01       	movw	r10, r6
    10f0:	13 c0       	rjmp	.+38     	; 0x1118 <vfprintf+0x154>
    10f2:	28 01       	movw	r4, r16
    10f4:	f2 e0       	ldi	r31, 0x02	; 2
    10f6:	4f 0e       	add	r4, r31
    10f8:	51 1c       	adc	r5, r1
    10fa:	f8 01       	movw	r30, r16
    10fc:	a0 80       	ld	r10, Z
    10fe:	b1 80       	ldd	r11, Z+1	; 0x01
    1100:	36 fe       	sbrs	r3, 6
    1102:	03 c0       	rjmp	.+6      	; 0x110a <vfprintf+0x146>
    1104:	69 2d       	mov	r22, r9
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	02 c0       	rjmp	.+4      	; 0x110e <vfprintf+0x14a>
    110a:	6f ef       	ldi	r22, 0xFF	; 255
    110c:	7f ef       	ldi	r23, 0xFF	; 255
    110e:	c5 01       	movw	r24, r10
    1110:	0e 94 ce 09 	call	0x139c	; 0x139c <strnlen>
    1114:	4c 01       	movw	r8, r24
    1116:	82 01       	movw	r16, r4
    1118:	f3 2d       	mov	r31, r3
    111a:	ff 77       	andi	r31, 0x7F	; 127
    111c:	3f 2e       	mov	r3, r31
    111e:	16 c0       	rjmp	.+44     	; 0x114c <vfprintf+0x188>
    1120:	28 01       	movw	r4, r16
    1122:	22 e0       	ldi	r18, 0x02	; 2
    1124:	42 0e       	add	r4, r18
    1126:	51 1c       	adc	r5, r1
    1128:	f8 01       	movw	r30, r16
    112a:	a0 80       	ld	r10, Z
    112c:	b1 80       	ldd	r11, Z+1	; 0x01
    112e:	36 fe       	sbrs	r3, 6
    1130:	03 c0       	rjmp	.+6      	; 0x1138 <vfprintf+0x174>
    1132:	69 2d       	mov	r22, r9
    1134:	70 e0       	ldi	r23, 0x00	; 0
    1136:	02 c0       	rjmp	.+4      	; 0x113c <vfprintf+0x178>
    1138:	6f ef       	ldi	r22, 0xFF	; 255
    113a:	7f ef       	ldi	r23, 0xFF	; 255
    113c:	c5 01       	movw	r24, r10
    113e:	0e 94 c3 09 	call	0x1386	; 0x1386 <strnlen_P>
    1142:	4c 01       	movw	r8, r24
    1144:	f3 2d       	mov	r31, r3
    1146:	f0 68       	ori	r31, 0x80	; 128
    1148:	3f 2e       	mov	r3, r31
    114a:	82 01       	movw	r16, r4
    114c:	33 fc       	sbrc	r3, 3
    114e:	1b c0       	rjmp	.+54     	; 0x1186 <vfprintf+0x1c2>
    1150:	82 2d       	mov	r24, r2
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	88 16       	cp	r8, r24
    1156:	99 06       	cpc	r9, r25
    1158:	b0 f4       	brcc	.+44     	; 0x1186 <vfprintf+0x1c2>
    115a:	b6 01       	movw	r22, r12
    115c:	80 e2       	ldi	r24, 0x20	; 32
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    1164:	2a 94       	dec	r2
    1166:	f4 cf       	rjmp	.-24     	; 0x1150 <vfprintf+0x18c>
    1168:	f5 01       	movw	r30, r10
    116a:	37 fc       	sbrc	r3, 7
    116c:	85 91       	lpm	r24, Z+
    116e:	37 fe       	sbrs	r3, 7
    1170:	81 91       	ld	r24, Z+
    1172:	5f 01       	movw	r10, r30
    1174:	b6 01       	movw	r22, r12
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    117c:	21 10       	cpse	r2, r1
    117e:	2a 94       	dec	r2
    1180:	21 e0       	ldi	r18, 0x01	; 1
    1182:	82 1a       	sub	r8, r18
    1184:	91 08       	sbc	r9, r1
    1186:	81 14       	cp	r8, r1
    1188:	91 04       	cpc	r9, r1
    118a:	71 f7       	brne	.-36     	; 0x1168 <vfprintf+0x1a4>
    118c:	e8 c0       	rjmp	.+464    	; 0x135e <vfprintf+0x39a>
    118e:	84 36       	cpi	r24, 0x64	; 100
    1190:	11 f0       	breq	.+4      	; 0x1196 <vfprintf+0x1d2>
    1192:	89 36       	cpi	r24, 0x69	; 105
    1194:	41 f5       	brne	.+80     	; 0x11e6 <vfprintf+0x222>
    1196:	f8 01       	movw	r30, r16
    1198:	37 fe       	sbrs	r3, 7
    119a:	07 c0       	rjmp	.+14     	; 0x11aa <vfprintf+0x1e6>
    119c:	60 81       	ld	r22, Z
    119e:	71 81       	ldd	r23, Z+1	; 0x01
    11a0:	82 81       	ldd	r24, Z+2	; 0x02
    11a2:	93 81       	ldd	r25, Z+3	; 0x03
    11a4:	0c 5f       	subi	r16, 0xFC	; 252
    11a6:	1f 4f       	sbci	r17, 0xFF	; 255
    11a8:	08 c0       	rjmp	.+16     	; 0x11ba <vfprintf+0x1f6>
    11aa:	60 81       	ld	r22, Z
    11ac:	71 81       	ldd	r23, Z+1	; 0x01
    11ae:	07 2e       	mov	r0, r23
    11b0:	00 0c       	add	r0, r0
    11b2:	88 0b       	sbc	r24, r24
    11b4:	99 0b       	sbc	r25, r25
    11b6:	0e 5f       	subi	r16, 0xFE	; 254
    11b8:	1f 4f       	sbci	r17, 0xFF	; 255
    11ba:	f3 2d       	mov	r31, r3
    11bc:	ff 76       	andi	r31, 0x6F	; 111
    11be:	3f 2e       	mov	r3, r31
    11c0:	97 ff       	sbrs	r25, 7
    11c2:	09 c0       	rjmp	.+18     	; 0x11d6 <vfprintf+0x212>
    11c4:	90 95       	com	r25
    11c6:	80 95       	com	r24
    11c8:	70 95       	com	r23
    11ca:	61 95       	neg	r22
    11cc:	7f 4f       	sbci	r23, 0xFF	; 255
    11ce:	8f 4f       	sbci	r24, 0xFF	; 255
    11d0:	9f 4f       	sbci	r25, 0xFF	; 255
    11d2:	f0 68       	ori	r31, 0x80	; 128
    11d4:	3f 2e       	mov	r3, r31
    11d6:	2a e0       	ldi	r18, 0x0A	; 10
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	a3 01       	movw	r20, r6
    11dc:	0e 94 25 0a 	call	0x144a	; 0x144a <__ultoa_invert>
    11e0:	88 2e       	mov	r8, r24
    11e2:	86 18       	sub	r8, r6
    11e4:	45 c0       	rjmp	.+138    	; 0x1270 <vfprintf+0x2ac>
    11e6:	85 37       	cpi	r24, 0x75	; 117
    11e8:	31 f4       	brne	.+12     	; 0x11f6 <vfprintf+0x232>
    11ea:	23 2d       	mov	r18, r3
    11ec:	2f 7e       	andi	r18, 0xEF	; 239
    11ee:	b2 2e       	mov	r11, r18
    11f0:	2a e0       	ldi	r18, 0x0A	; 10
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	25 c0       	rjmp	.+74     	; 0x1240 <vfprintf+0x27c>
    11f6:	93 2d       	mov	r25, r3
    11f8:	99 7f       	andi	r25, 0xF9	; 249
    11fa:	b9 2e       	mov	r11, r25
    11fc:	8f 36       	cpi	r24, 0x6F	; 111
    11fe:	c1 f0       	breq	.+48     	; 0x1230 <vfprintf+0x26c>
    1200:	18 f4       	brcc	.+6      	; 0x1208 <vfprintf+0x244>
    1202:	88 35       	cpi	r24, 0x58	; 88
    1204:	79 f0       	breq	.+30     	; 0x1224 <vfprintf+0x260>
    1206:	b5 c0       	rjmp	.+362    	; 0x1372 <vfprintf+0x3ae>
    1208:	80 37       	cpi	r24, 0x70	; 112
    120a:	19 f0       	breq	.+6      	; 0x1212 <vfprintf+0x24e>
    120c:	88 37       	cpi	r24, 0x78	; 120
    120e:	21 f0       	breq	.+8      	; 0x1218 <vfprintf+0x254>
    1210:	b0 c0       	rjmp	.+352    	; 0x1372 <vfprintf+0x3ae>
    1212:	e9 2f       	mov	r30, r25
    1214:	e0 61       	ori	r30, 0x10	; 16
    1216:	be 2e       	mov	r11, r30
    1218:	b4 fe       	sbrs	r11, 4
    121a:	0d c0       	rjmp	.+26     	; 0x1236 <vfprintf+0x272>
    121c:	fb 2d       	mov	r31, r11
    121e:	f4 60       	ori	r31, 0x04	; 4
    1220:	bf 2e       	mov	r11, r31
    1222:	09 c0       	rjmp	.+18     	; 0x1236 <vfprintf+0x272>
    1224:	34 fe       	sbrs	r3, 4
    1226:	0a c0       	rjmp	.+20     	; 0x123c <vfprintf+0x278>
    1228:	29 2f       	mov	r18, r25
    122a:	26 60       	ori	r18, 0x06	; 6
    122c:	b2 2e       	mov	r11, r18
    122e:	06 c0       	rjmp	.+12     	; 0x123c <vfprintf+0x278>
    1230:	28 e0       	ldi	r18, 0x08	; 8
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	05 c0       	rjmp	.+10     	; 0x1240 <vfprintf+0x27c>
    1236:	20 e1       	ldi	r18, 0x10	; 16
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <vfprintf+0x27c>
    123c:	20 e1       	ldi	r18, 0x10	; 16
    123e:	32 e0       	ldi	r19, 0x02	; 2
    1240:	f8 01       	movw	r30, r16
    1242:	b7 fe       	sbrs	r11, 7
    1244:	07 c0       	rjmp	.+14     	; 0x1254 <vfprintf+0x290>
    1246:	60 81       	ld	r22, Z
    1248:	71 81       	ldd	r23, Z+1	; 0x01
    124a:	82 81       	ldd	r24, Z+2	; 0x02
    124c:	93 81       	ldd	r25, Z+3	; 0x03
    124e:	0c 5f       	subi	r16, 0xFC	; 252
    1250:	1f 4f       	sbci	r17, 0xFF	; 255
    1252:	06 c0       	rjmp	.+12     	; 0x1260 <vfprintf+0x29c>
    1254:	60 81       	ld	r22, Z
    1256:	71 81       	ldd	r23, Z+1	; 0x01
    1258:	80 e0       	ldi	r24, 0x00	; 0
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	0e 5f       	subi	r16, 0xFE	; 254
    125e:	1f 4f       	sbci	r17, 0xFF	; 255
    1260:	a3 01       	movw	r20, r6
    1262:	0e 94 25 0a 	call	0x144a	; 0x144a <__ultoa_invert>
    1266:	88 2e       	mov	r8, r24
    1268:	86 18       	sub	r8, r6
    126a:	fb 2d       	mov	r31, r11
    126c:	ff 77       	andi	r31, 0x7F	; 127
    126e:	3f 2e       	mov	r3, r31
    1270:	36 fe       	sbrs	r3, 6
    1272:	0d c0       	rjmp	.+26     	; 0x128e <vfprintf+0x2ca>
    1274:	23 2d       	mov	r18, r3
    1276:	2e 7f       	andi	r18, 0xFE	; 254
    1278:	a2 2e       	mov	r10, r18
    127a:	89 14       	cp	r8, r9
    127c:	58 f4       	brcc	.+22     	; 0x1294 <vfprintf+0x2d0>
    127e:	34 fe       	sbrs	r3, 4
    1280:	0b c0       	rjmp	.+22     	; 0x1298 <vfprintf+0x2d4>
    1282:	32 fc       	sbrc	r3, 2
    1284:	09 c0       	rjmp	.+18     	; 0x1298 <vfprintf+0x2d4>
    1286:	83 2d       	mov	r24, r3
    1288:	8e 7e       	andi	r24, 0xEE	; 238
    128a:	a8 2e       	mov	r10, r24
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <vfprintf+0x2d4>
    128e:	b8 2c       	mov	r11, r8
    1290:	a3 2c       	mov	r10, r3
    1292:	03 c0       	rjmp	.+6      	; 0x129a <vfprintf+0x2d6>
    1294:	b8 2c       	mov	r11, r8
    1296:	01 c0       	rjmp	.+2      	; 0x129a <vfprintf+0x2d6>
    1298:	b9 2c       	mov	r11, r9
    129a:	a4 fe       	sbrs	r10, 4
    129c:	0f c0       	rjmp	.+30     	; 0x12bc <vfprintf+0x2f8>
    129e:	fe 01       	movw	r30, r28
    12a0:	e8 0d       	add	r30, r8
    12a2:	f1 1d       	adc	r31, r1
    12a4:	80 81       	ld	r24, Z
    12a6:	80 33       	cpi	r24, 0x30	; 48
    12a8:	21 f4       	brne	.+8      	; 0x12b2 <vfprintf+0x2ee>
    12aa:	9a 2d       	mov	r25, r10
    12ac:	99 7e       	andi	r25, 0xE9	; 233
    12ae:	a9 2e       	mov	r10, r25
    12b0:	09 c0       	rjmp	.+18     	; 0x12c4 <vfprintf+0x300>
    12b2:	a2 fe       	sbrs	r10, 2
    12b4:	06 c0       	rjmp	.+12     	; 0x12c2 <vfprintf+0x2fe>
    12b6:	b3 94       	inc	r11
    12b8:	b3 94       	inc	r11
    12ba:	04 c0       	rjmp	.+8      	; 0x12c4 <vfprintf+0x300>
    12bc:	8a 2d       	mov	r24, r10
    12be:	86 78       	andi	r24, 0x86	; 134
    12c0:	09 f0       	breq	.+2      	; 0x12c4 <vfprintf+0x300>
    12c2:	b3 94       	inc	r11
    12c4:	a3 fc       	sbrc	r10, 3
    12c6:	11 c0       	rjmp	.+34     	; 0x12ea <vfprintf+0x326>
    12c8:	a0 fe       	sbrs	r10, 0
    12ca:	06 c0       	rjmp	.+12     	; 0x12d8 <vfprintf+0x314>
    12cc:	b2 14       	cp	r11, r2
    12ce:	88 f4       	brcc	.+34     	; 0x12f2 <vfprintf+0x32e>
    12d0:	28 0c       	add	r2, r8
    12d2:	92 2c       	mov	r9, r2
    12d4:	9b 18       	sub	r9, r11
    12d6:	0e c0       	rjmp	.+28     	; 0x12f4 <vfprintf+0x330>
    12d8:	b2 14       	cp	r11, r2
    12da:	60 f4       	brcc	.+24     	; 0x12f4 <vfprintf+0x330>
    12dc:	b6 01       	movw	r22, r12
    12de:	80 e2       	ldi	r24, 0x20	; 32
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    12e6:	b3 94       	inc	r11
    12e8:	f7 cf       	rjmp	.-18     	; 0x12d8 <vfprintf+0x314>
    12ea:	b2 14       	cp	r11, r2
    12ec:	18 f4       	brcc	.+6      	; 0x12f4 <vfprintf+0x330>
    12ee:	2b 18       	sub	r2, r11
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <vfprintf+0x332>
    12f2:	98 2c       	mov	r9, r8
    12f4:	21 2c       	mov	r2, r1
    12f6:	a4 fe       	sbrs	r10, 4
    12f8:	10 c0       	rjmp	.+32     	; 0x131a <vfprintf+0x356>
    12fa:	b6 01       	movw	r22, r12
    12fc:	80 e3       	ldi	r24, 0x30	; 48
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    1304:	a2 fe       	sbrs	r10, 2
    1306:	17 c0       	rjmp	.+46     	; 0x1336 <vfprintf+0x372>
    1308:	a1 fc       	sbrc	r10, 1
    130a:	03 c0       	rjmp	.+6      	; 0x1312 <vfprintf+0x34e>
    130c:	88 e7       	ldi	r24, 0x78	; 120
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <vfprintf+0x352>
    1312:	88 e5       	ldi	r24, 0x58	; 88
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	b6 01       	movw	r22, r12
    1318:	0c c0       	rjmp	.+24     	; 0x1332 <vfprintf+0x36e>
    131a:	8a 2d       	mov	r24, r10
    131c:	86 78       	andi	r24, 0x86	; 134
    131e:	59 f0       	breq	.+22     	; 0x1336 <vfprintf+0x372>
    1320:	a1 fe       	sbrs	r10, 1
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x364>
    1324:	8b e2       	ldi	r24, 0x2B	; 43
    1326:	01 c0       	rjmp	.+2      	; 0x132a <vfprintf+0x366>
    1328:	80 e2       	ldi	r24, 0x20	; 32
    132a:	a7 fc       	sbrc	r10, 7
    132c:	8d e2       	ldi	r24, 0x2D	; 45
    132e:	b6 01       	movw	r22, r12
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    1336:	89 14       	cp	r8, r9
    1338:	38 f4       	brcc	.+14     	; 0x1348 <vfprintf+0x384>
    133a:	b6 01       	movw	r22, r12
    133c:	80 e3       	ldi	r24, 0x30	; 48
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    1344:	9a 94       	dec	r9
    1346:	f7 cf       	rjmp	.-18     	; 0x1336 <vfprintf+0x372>
    1348:	8a 94       	dec	r8
    134a:	f3 01       	movw	r30, r6
    134c:	e8 0d       	add	r30, r8
    134e:	f1 1d       	adc	r31, r1
    1350:	80 81       	ld	r24, Z
    1352:	b6 01       	movw	r22, r12
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    135a:	81 10       	cpse	r8, r1
    135c:	f5 cf       	rjmp	.-22     	; 0x1348 <vfprintf+0x384>
    135e:	22 20       	and	r2, r2
    1360:	09 f4       	brne	.+2      	; 0x1364 <vfprintf+0x3a0>
    1362:	42 ce       	rjmp	.-892    	; 0xfe8 <vfprintf+0x24>
    1364:	b6 01       	movw	r22, r12
    1366:	80 e2       	ldi	r24, 0x20	; 32
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <fputc>
    136e:	2a 94       	dec	r2
    1370:	f6 cf       	rjmp	.-20     	; 0x135e <vfprintf+0x39a>
    1372:	f6 01       	movw	r30, r12
    1374:	86 81       	ldd	r24, Z+6	; 0x06
    1376:	97 81       	ldd	r25, Z+7	; 0x07
    1378:	02 c0       	rjmp	.+4      	; 0x137e <vfprintf+0x3ba>
    137a:	8f ef       	ldi	r24, 0xFF	; 255
    137c:	9f ef       	ldi	r25, 0xFF	; 255
    137e:	2b 96       	adiw	r28, 0x0b	; 11
    1380:	e2 e1       	ldi	r30, 0x12	; 18
    1382:	0c 94 9f 0a 	jmp	0x153e	; 0x153e <__epilogue_restores__>

00001386 <strnlen_P>:
    1386:	fc 01       	movw	r30, r24
    1388:	05 90       	lpm	r0, Z+
    138a:	61 50       	subi	r22, 0x01	; 1
    138c:	70 40       	sbci	r23, 0x00	; 0
    138e:	01 10       	cpse	r0, r1
    1390:	d8 f7       	brcc	.-10     	; 0x1388 <strnlen_P+0x2>
    1392:	80 95       	com	r24
    1394:	90 95       	com	r25
    1396:	8e 0f       	add	r24, r30
    1398:	9f 1f       	adc	r25, r31
    139a:	08 95       	ret

0000139c <strnlen>:
    139c:	fc 01       	movw	r30, r24
    139e:	61 50       	subi	r22, 0x01	; 1
    13a0:	70 40       	sbci	r23, 0x00	; 0
    13a2:	01 90       	ld	r0, Z+
    13a4:	01 10       	cpse	r0, r1
    13a6:	d8 f7       	brcc	.-10     	; 0x139e <strnlen+0x2>
    13a8:	80 95       	com	r24
    13aa:	90 95       	com	r25
    13ac:	8e 0f       	add	r24, r30
    13ae:	9f 1f       	adc	r25, r31
    13b0:	08 95       	ret

000013b2 <strrev>:
    13b2:	dc 01       	movw	r26, r24
    13b4:	fc 01       	movw	r30, r24
    13b6:	67 2f       	mov	r22, r23
    13b8:	71 91       	ld	r23, Z+
    13ba:	77 23       	and	r23, r23
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <strrev+0x4>
    13be:	32 97       	sbiw	r30, 0x02	; 2
    13c0:	04 c0       	rjmp	.+8      	; 0x13ca <strrev+0x18>
    13c2:	7c 91       	ld	r23, X
    13c4:	6d 93       	st	X+, r22
    13c6:	70 83       	st	Z, r23
    13c8:	62 91       	ld	r22, -Z
    13ca:	ae 17       	cp	r26, r30
    13cc:	bf 07       	cpc	r27, r31
    13ce:	c8 f3       	brcs	.-14     	; 0x13c2 <strrev+0x10>
    13d0:	08 95       	ret

000013d2 <fputc>:
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	fb 01       	movw	r30, r22
    13dc:	23 81       	ldd	r18, Z+3	; 0x03
    13de:	21 fd       	sbrc	r18, 1
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <fputc+0x16>
    13e2:	8f ef       	ldi	r24, 0xFF	; 255
    13e4:	9f ef       	ldi	r25, 0xFF	; 255
    13e6:	2c c0       	rjmp	.+88     	; 0x1440 <fputc+0x6e>
    13e8:	22 ff       	sbrs	r18, 2
    13ea:	16 c0       	rjmp	.+44     	; 0x1418 <fputc+0x46>
    13ec:	46 81       	ldd	r20, Z+6	; 0x06
    13ee:	57 81       	ldd	r21, Z+7	; 0x07
    13f0:	24 81       	ldd	r18, Z+4	; 0x04
    13f2:	35 81       	ldd	r19, Z+5	; 0x05
    13f4:	42 17       	cp	r20, r18
    13f6:	53 07       	cpc	r21, r19
    13f8:	44 f4       	brge	.+16     	; 0x140a <fputc+0x38>
    13fa:	a0 81       	ld	r26, Z
    13fc:	b1 81       	ldd	r27, Z+1	; 0x01
    13fe:	9d 01       	movw	r18, r26
    1400:	2f 5f       	subi	r18, 0xFF	; 255
    1402:	3f 4f       	sbci	r19, 0xFF	; 255
    1404:	31 83       	std	Z+1, r19	; 0x01
    1406:	20 83       	st	Z, r18
    1408:	8c 93       	st	X, r24
    140a:	26 81       	ldd	r18, Z+6	; 0x06
    140c:	37 81       	ldd	r19, Z+7	; 0x07
    140e:	2f 5f       	subi	r18, 0xFF	; 255
    1410:	3f 4f       	sbci	r19, 0xFF	; 255
    1412:	37 83       	std	Z+7, r19	; 0x07
    1414:	26 83       	std	Z+6, r18	; 0x06
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <fputc+0x6e>
    1418:	8b 01       	movw	r16, r22
    141a:	ec 01       	movw	r28, r24
    141c:	fb 01       	movw	r30, r22
    141e:	00 84       	ldd	r0, Z+8	; 0x08
    1420:	f1 85       	ldd	r31, Z+9	; 0x09
    1422:	e0 2d       	mov	r30, r0
    1424:	09 95       	icall
    1426:	89 2b       	or	r24, r25
    1428:	e1 f6       	brne	.-72     	; 0x13e2 <fputc+0x10>
    142a:	d8 01       	movw	r26, r16
    142c:	16 96       	adiw	r26, 0x06	; 6
    142e:	8d 91       	ld	r24, X+
    1430:	9c 91       	ld	r25, X
    1432:	17 97       	sbiw	r26, 0x07	; 7
    1434:	01 96       	adiw	r24, 0x01	; 1
    1436:	17 96       	adiw	r26, 0x07	; 7
    1438:	9c 93       	st	X, r25
    143a:	8e 93       	st	-X, r24
    143c:	16 97       	sbiw	r26, 0x06	; 6
    143e:	ce 01       	movw	r24, r28
    1440:	df 91       	pop	r29
    1442:	cf 91       	pop	r28
    1444:	1f 91       	pop	r17
    1446:	0f 91       	pop	r16
    1448:	08 95       	ret

0000144a <__ultoa_invert>:
    144a:	fa 01       	movw	r30, r20
    144c:	aa 27       	eor	r26, r26
    144e:	28 30       	cpi	r18, 0x08	; 8
    1450:	51 f1       	breq	.+84     	; 0x14a6 <__ultoa_invert+0x5c>
    1452:	20 31       	cpi	r18, 0x10	; 16
    1454:	81 f1       	breq	.+96     	; 0x14b6 <__ultoa_invert+0x6c>
    1456:	e8 94       	clt
    1458:	6f 93       	push	r22
    145a:	6e 7f       	andi	r22, 0xFE	; 254
    145c:	6e 5f       	subi	r22, 0xFE	; 254
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	af 4f       	sbci	r26, 0xFF	; 255
    1466:	b1 e0       	ldi	r27, 0x01	; 1
    1468:	3e d0       	rcall	.+124    	; 0x14e6 <__ultoa_invert+0x9c>
    146a:	b4 e0       	ldi	r27, 0x04	; 4
    146c:	3c d0       	rcall	.+120    	; 0x14e6 <__ultoa_invert+0x9c>
    146e:	67 0f       	add	r22, r23
    1470:	78 1f       	adc	r23, r24
    1472:	89 1f       	adc	r24, r25
    1474:	9a 1f       	adc	r25, r26
    1476:	a1 1d       	adc	r26, r1
    1478:	68 0f       	add	r22, r24
    147a:	79 1f       	adc	r23, r25
    147c:	8a 1f       	adc	r24, r26
    147e:	91 1d       	adc	r25, r1
    1480:	a1 1d       	adc	r26, r1
    1482:	6a 0f       	add	r22, r26
    1484:	71 1d       	adc	r23, r1
    1486:	81 1d       	adc	r24, r1
    1488:	91 1d       	adc	r25, r1
    148a:	a1 1d       	adc	r26, r1
    148c:	20 d0       	rcall	.+64     	; 0x14ce <__ultoa_invert+0x84>
    148e:	09 f4       	brne	.+2      	; 0x1492 <__ultoa_invert+0x48>
    1490:	68 94       	set
    1492:	3f 91       	pop	r19
    1494:	2a e0       	ldi	r18, 0x0A	; 10
    1496:	26 9f       	mul	r18, r22
    1498:	11 24       	eor	r1, r1
    149a:	30 19       	sub	r19, r0
    149c:	30 5d       	subi	r19, 0xD0	; 208
    149e:	31 93       	st	Z+, r19
    14a0:	de f6       	brtc	.-74     	; 0x1458 <__ultoa_invert+0xe>
    14a2:	cf 01       	movw	r24, r30
    14a4:	08 95       	ret
    14a6:	46 2f       	mov	r20, r22
    14a8:	47 70       	andi	r20, 0x07	; 7
    14aa:	40 5d       	subi	r20, 0xD0	; 208
    14ac:	41 93       	st	Z+, r20
    14ae:	b3 e0       	ldi	r27, 0x03	; 3
    14b0:	0f d0       	rcall	.+30     	; 0x14d0 <__ultoa_invert+0x86>
    14b2:	c9 f7       	brne	.-14     	; 0x14a6 <__ultoa_invert+0x5c>
    14b4:	f6 cf       	rjmp	.-20     	; 0x14a2 <__ultoa_invert+0x58>
    14b6:	46 2f       	mov	r20, r22
    14b8:	4f 70       	andi	r20, 0x0F	; 15
    14ba:	40 5d       	subi	r20, 0xD0	; 208
    14bc:	4a 33       	cpi	r20, 0x3A	; 58
    14be:	18 f0       	brcs	.+6      	; 0x14c6 <__ultoa_invert+0x7c>
    14c0:	49 5d       	subi	r20, 0xD9	; 217
    14c2:	31 fd       	sbrc	r19, 1
    14c4:	40 52       	subi	r20, 0x20	; 32
    14c6:	41 93       	st	Z+, r20
    14c8:	02 d0       	rcall	.+4      	; 0x14ce <__ultoa_invert+0x84>
    14ca:	a9 f7       	brne	.-22     	; 0x14b6 <__ultoa_invert+0x6c>
    14cc:	ea cf       	rjmp	.-44     	; 0x14a2 <__ultoa_invert+0x58>
    14ce:	b4 e0       	ldi	r27, 0x04	; 4
    14d0:	a6 95       	lsr	r26
    14d2:	97 95       	ror	r25
    14d4:	87 95       	ror	r24
    14d6:	77 95       	ror	r23
    14d8:	67 95       	ror	r22
    14da:	ba 95       	dec	r27
    14dc:	c9 f7       	brne	.-14     	; 0x14d0 <__ultoa_invert+0x86>
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	61 05       	cpc	r22, r1
    14e2:	71 05       	cpc	r23, r1
    14e4:	08 95       	ret
    14e6:	9b 01       	movw	r18, r22
    14e8:	ac 01       	movw	r20, r24
    14ea:	0a 2e       	mov	r0, r26
    14ec:	06 94       	lsr	r0
    14ee:	57 95       	ror	r21
    14f0:	47 95       	ror	r20
    14f2:	37 95       	ror	r19
    14f4:	27 95       	ror	r18
    14f6:	ba 95       	dec	r27
    14f8:	c9 f7       	brne	.-14     	; 0x14ec <__ultoa_invert+0xa2>
    14fa:	62 0f       	add	r22, r18
    14fc:	73 1f       	adc	r23, r19
    14fe:	84 1f       	adc	r24, r20
    1500:	95 1f       	adc	r25, r21
    1502:	a0 1d       	adc	r26, r0
    1504:	08 95       	ret

00001506 <__prologue_saves__>:
    1506:	2f 92       	push	r2
    1508:	3f 92       	push	r3
    150a:	4f 92       	push	r4
    150c:	5f 92       	push	r5
    150e:	6f 92       	push	r6
    1510:	7f 92       	push	r7
    1512:	8f 92       	push	r8
    1514:	9f 92       	push	r9
    1516:	af 92       	push	r10
    1518:	bf 92       	push	r11
    151a:	cf 92       	push	r12
    151c:	df 92       	push	r13
    151e:	ef 92       	push	r14
    1520:	ff 92       	push	r15
    1522:	0f 93       	push	r16
    1524:	1f 93       	push	r17
    1526:	cf 93       	push	r28
    1528:	df 93       	push	r29
    152a:	cd b7       	in	r28, 0x3d	; 61
    152c:	de b7       	in	r29, 0x3e	; 62
    152e:	ca 1b       	sub	r28, r26
    1530:	db 0b       	sbc	r29, r27
    1532:	0f b6       	in	r0, 0x3f	; 63
    1534:	f8 94       	cli
    1536:	de bf       	out	0x3e, r29	; 62
    1538:	0f be       	out	0x3f, r0	; 63
    153a:	cd bf       	out	0x3d, r28	; 61
    153c:	09 94       	ijmp

0000153e <__epilogue_restores__>:
    153e:	2a 88       	ldd	r2, Y+18	; 0x12
    1540:	39 88       	ldd	r3, Y+17	; 0x11
    1542:	48 88       	ldd	r4, Y+16	; 0x10
    1544:	5f 84       	ldd	r5, Y+15	; 0x0f
    1546:	6e 84       	ldd	r6, Y+14	; 0x0e
    1548:	7d 84       	ldd	r7, Y+13	; 0x0d
    154a:	8c 84       	ldd	r8, Y+12	; 0x0c
    154c:	9b 84       	ldd	r9, Y+11	; 0x0b
    154e:	aa 84       	ldd	r10, Y+10	; 0x0a
    1550:	b9 84       	ldd	r11, Y+9	; 0x09
    1552:	c8 84       	ldd	r12, Y+8	; 0x08
    1554:	df 80       	ldd	r13, Y+7	; 0x07
    1556:	ee 80       	ldd	r14, Y+6	; 0x06
    1558:	fd 80       	ldd	r15, Y+5	; 0x05
    155a:	0c 81       	ldd	r16, Y+4	; 0x04
    155c:	1b 81       	ldd	r17, Y+3	; 0x03
    155e:	aa 81       	ldd	r26, Y+2	; 0x02
    1560:	b9 81       	ldd	r27, Y+1	; 0x01
    1562:	ce 0f       	add	r28, r30
    1564:	d1 1d       	adc	r29, r1
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	f8 94       	cli
    156a:	de bf       	out	0x3e, r29	; 62
    156c:	0f be       	out	0x3f, r0	; 63
    156e:	cd bf       	out	0x3d, r28	; 61
    1570:	ed 01       	movw	r28, r26
    1572:	08 95       	ret

00001574 <_exit>:
    1574:	f8 94       	cli

00001576 <__stop_program>:
    1576:	ff cf       	rjmp	.-2      	; 0x1576 <__stop_program>
