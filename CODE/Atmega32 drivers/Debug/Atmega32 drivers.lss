
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00000e02  00000e96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  0080007a  0080007a  00000eb0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000eb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f0c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00000f48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b79  00000000  00000000  00001130  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d5a  00000000  00000000  00003ca9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000eb9  00000000  00000000  00004a03  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000404  00000000  00000000  000058bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000806  00000000  00000000  00005cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fec  00000000  00000000  000064c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  000074b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 4a 03 	jmp	0x694	; 0x694 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e0       	ldi	r30, 0x02	; 2
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e7       	ldi	r26, 0x7A	; 122
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3e       	cpi	r26, 0xE4	; 228
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

#ifndef INCLUDES_H_
#error define includes.h file
#endif

int main(){
  92:	cf 93       	push	r28
  94:	df 93       	push	r29
  96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
  98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
  9a:	1f 92       	push	r1
  9c:	cd b7       	in	r28, 0x3d	; 61
  9e:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_Init();
  a0:	0e 94 62 00 	call	0xc4	; 0xc4 <KEYPAD_Init>
	LCD_init();
  a4:	0e 94 0e 01 	call	0x21c	; 0x21c <LCD_init>
	Project_Init();
  a8:	0e 94 91 03 	call	0x722	; 0x722 <Project_Init>
	u8 password[5]={0};
  ac:	fe 01       	movw	r30, r28
  ae:	31 96       	adiw	r30, 0x01	; 1
  b0:	85 e0       	ldi	r24, 0x05	; 5
  b2:	df 01       	movw	r26, r30
  b4:	1d 92       	st	X+, r1
  b6:	8a 95       	dec	r24
  b8:	e9 f7       	brne	.-6      	; 0xb4 <main+0x22>
	
	while(1)
	{
		Get_Password(password);
  ba:	ce 01       	movw	r24, r28
  bc:	01 96       	adiw	r24, 0x01	; 1
  be:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Get_Password>
  c2:	fb cf       	rjmp	.-10     	; 0xba <main+0x28>

000000c4 <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	6f e0       	ldi	r22, 0x0F	; 15
  c8:	87 e3       	ldi	r24, 0x37	; 55
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 3b 03 	call	0x676	; 0x676 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
  d0:	41 e0       	ldi	r20, 0x01	; 1
  d2:	6f e0       	ldi	r22, 0x0F	; 15
  d4:	88 e3       	ldi	r24, 0x38	; 56
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	0e 94 2c 03 	call	0x658	; 0x658 <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
  dc:	40 e0       	ldi	r20, 0x00	; 0
  de:	60 e7       	ldi	r22, 0x70	; 112
  e0:	87 e3       	ldi	r24, 0x37	; 55
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 3b 03 	call	0x676	; 0x676 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
  e8:	41 e0       	ldi	r20, 0x01	; 1
  ea:	60 e7       	ldi	r22, 0x70	; 112
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 2c 03 	call	0x658	; 0x658 <writePins>
  f4:	08 95       	ret

000000f6 <GetKey>:
}



u8 GetKey(void)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
  fa:	d8 e0       	ldi	r29, 0x08	; 8
  fc:	2b c0       	rjmp	.+86     	; 0x154 <GetKey+0x5e>
	{
		writePin(row,LOW);
  fe:	60 e0       	ldi	r22, 0x00	; 0
 100:	8d 2f       	mov	r24, r29
 102:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
 106:	cc e0       	ldi	r28, 0x0C	; 12
 108:	1e c0       	rjmp	.+60     	; 0x146 <GetKey+0x50>
		{
			if (!readPin(col))
 10a:	8c 2f       	mov	r24, r28
 10c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readPin>
 110:	81 11       	cpse	r24, r1
 112:	18 c0       	rjmp	.+48     	; 0x144 <GetKey+0x4e>
			{
				while(!readPin(col));
 114:	8c 2f       	mov	r24, r28
 116:	0e 94 e7 02 	call	0x5ce	; 0x5ce <readPin>
 11a:	88 23       	and	r24, r24
 11c:	d9 f3       	breq	.-10     	; 0x114 <GetKey+0x1e>
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
 11e:	2d 2f       	mov	r18, r29
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	28 50       	subi	r18, 0x08	; 8
 124:	31 09       	sbc	r19, r1
 126:	ec 2f       	mov	r30, r28
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	cf 01       	movw	r24, r30
 12c:	0c 97       	sbiw	r24, 0x0c	; 12
 12e:	f9 01       	movw	r30, r18
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e2 0f       	add	r30, r18
 136:	f3 1f       	adc	r31, r19
 138:	e0 5a       	subi	r30, 0xA0	; 160
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	e8 0f       	add	r30, r24
 13e:	f9 1f       	adc	r31, r25
 140:	80 81       	ld	r24, Z
				return key;
 142:	0b c0       	rjmp	.+22     	; 0x15a <GetKey+0x64>
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
	{
		writePin(row,LOW);
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	cf 30       	cpi	r28, 0x0F	; 15
 148:	00 f3       	brcs	.-64     	; 0x10a <GetKey+0x14>
				while(!readPin(col));
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
				return key;
			}	
		}
		writePin(row,HIGH);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	8d 2f       	mov	r24, r29
 14e:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
u8 GetKey(void)
{
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
 152:	df 5f       	subi	r29, 0xFF	; 255
 154:	dc 30       	cpi	r29, 0x0C	; 12
 156:	98 f2       	brcs	.-90     	; 0xfe <GetKey+0x8>
				return key;
			}	
		}
		writePin(row,HIGH);
	}	
	return key;
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	08 95       	ret

00000160 <LCD_latch>:
	SendToLCD(data);
}

void LCD_latch(void)
{
	writePin(LCD_E,HIGH);
 160:	61 e0       	ldi	r22, 0x01	; 1
 162:	83 e0       	ldi	r24, 0x03	; 3
 164:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	87 ec       	ldi	r24, 0xC7	; 199
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_latch+0xc>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_latch+0x12>
 172:	00 00       	nop
	_delay_us(50);
	writePin(LCD_E,LOW);
 174:	60 e0       	ldi	r22, 0x00	; 0
 176:	83 e0       	ldi	r24, 0x03	; 3
 178:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
 17c:	87 ec       	ldi	r24, 0xC7	; 199
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_latch+0x20>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_latch+0x26>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <SendToLCD>:
{
	LCD_send_cmd(CMD_RET);
	_delay_ms(2);
}
void SendToLCD(u8 data)
{
 18a:	cf 93       	push	r28
 18c:	c8 2f       	mov	r28, r24
	writePins(&PORTA,data_pins,LOW);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	60 ef       	ldi	r22, 0xF0	; 240
 192:	8b e3       	ldi	r24, 0x3B	; 59
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	0e 94 2c 03 	call	0x658	; 0x658 <writePins>
	writePins(&PORTA,(data&data_pins),HIGH);
 19a:	6c 2f       	mov	r22, r28
 19c:	60 7f       	andi	r22, 0xF0	; 240
 19e:	41 e0       	ldi	r20, 0x01	; 1
 1a0:	8b e3       	ldi	r24, 0x3B	; 59
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	0e 94 2c 03 	call	0x658	; 0x658 <writePins>
	LCD_latch();
 1a8:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_latch>
	writePins(&PORTA,data_pins,LOW);
 1ac:	40 e0       	ldi	r20, 0x00	; 0
 1ae:	60 ef       	ldi	r22, 0xF0	; 240
 1b0:	8b e3       	ldi	r24, 0x3B	; 59
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	0e 94 2c 03 	call	0x658	; 0x658 <writePins>
	writePins(&PORTA,((data<<4)&data_pins),HIGH);
 1b8:	80 e1       	ldi	r24, 0x10	; 16
 1ba:	c8 9f       	mul	r28, r24
 1bc:	b0 01       	movw	r22, r0
 1be:	11 24       	eor	r1, r1
 1c0:	41 e0       	ldi	r20, 0x01	; 1
 1c2:	8b e3       	ldi	r24, 0x3B	; 59
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	0e 94 2c 03 	call	0x658	; 0x658 <writePins>
	LCD_latch();
 1ca:	0e 94 b0 00 	call	0x160	; 0x160 <LCD_latch>
 1ce:	87 ec       	ldi	r24, 0xC7	; 199
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <SendToLCD+0x48>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <SendToLCD+0x4e>
 1d8:	00 00       	nop
	_delay_us(50);
}
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <LCD_send_cmd>:

void LCD_send_cmd(u8 command)
{
 1de:	cf 93       	push	r28
 1e0:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,LOW);
 1e2:	60 e0       	ldi	r22, 0x00	; 0
 1e4:	82 e0       	ldi	r24, 0x02	; 2
 1e6:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
	SendToLCD(command);
 1ea:	8c 2f       	mov	r24, r28
 1ec:	0e 94 c5 00 	call	0x18a	; 0x18a <SendToLCD>
}
 1f0:	cf 91       	pop	r28
 1f2:	08 95       	ret

000001f4 <LCD_CLEAR>:
	LCD_CLEAR();
}

void LCD_CLEAR(void)
{
	LCD_send_cmd(CMD_CLR);
 1f4:	81 e0       	ldi	r24, 0x01	; 1
 1f6:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e3       	ldi	r24, 0x3F	; 63
 1fc:	9f e1       	ldi	r25, 0x1F	; 31
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <LCD_CLEAR+0xa>
 202:	00 c0       	rjmp	.+0      	; 0x204 <LCD_CLEAR+0x10>
 204:	00 00       	nop
 206:	08 95       	ret

00000208 <LCD_ret_Home>:
	_delay_ms(2);
}
void LCD_ret_Home(void)
{
	LCD_send_cmd(CMD_RET);
 208:	82 e0       	ldi	r24, 0x02	; 2
 20a:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
 20e:	8f e3       	ldi	r24, 0x3F	; 63
 210:	9f e1       	ldi	r25, 0x1F	; 31
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <LCD_ret_Home+0xa>
 216:	00 c0       	rjmp	.+0      	; 0x218 <LCD_ret_Home+0x10>
 218:	00 00       	nop
 21a:	08 95       	ret

0000021c <LCD_init>:


/*clear must be the last command*/
void LCD_init(void)
{
	pinsDirection(&data_ddr, data_pins, OUTPUT);
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	60 ef       	ldi	r22, 0xF0	; 240
 220:	8a e3       	ldi	r24, 0x3A	; 58
 222:	90 e0       	ldi	r25, 0x00	; 0
 224:	0e 94 3b 03 	call	0x676	; 0x676 <pinsDirection>
	pinsDirection(&ctr_ddr, ctr_pin, OUTPUT);
 228:	41 e0       	ldi	r20, 0x01	; 1
 22a:	6c e0       	ldi	r22, 0x0C	; 12
 22c:	8a e3       	ldi	r24, 0x3A	; 58
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	0e 94 3b 03 	call	0x676	; 0x676 <pinsDirection>
 234:	2f ef       	ldi	r18, 0xFF	; 255
 236:	83 ef       	ldi	r24, 0xF3	; 243
 238:	91 e0       	ldi	r25, 0x01	; 1
 23a:	21 50       	subi	r18, 0x01	; 1
 23c:	80 40       	sbci	r24, 0x00	; 0
 23e:	90 40       	sbci	r25, 0x00	; 0
 240:	e1 f7       	brne	.-8      	; 0x23a <LCD_init+0x1e>
 242:	00 c0       	rjmp	.+0      	; 0x244 <LCD_init+0x28>
 244:	00 00       	nop
	_delay_ms(40);
	LCD_ret_Home();
 246:	0e 94 04 01 	call	0x208	; 0x208 <LCD_ret_Home>
	LCD_send_cmd(CMD_CUR_INC);
 24a:	86 e0       	ldi	r24, 0x06	; 6
 24c:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
	LCD_send_cmd(CMD_CUR_SIT);
 250:	8c e0       	ldi	r24, 0x0C	; 12
 252:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
	LCD_send_cmd(CMD_SHIFT);
 256:	80 e1       	ldi	r24, 0x10	; 16
 258:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
	LCD_send_cmd(CMD_FUN_SET);
 25c:	88 e2       	ldi	r24, 0x28	; 40
 25e:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
	LCD_CLEAR();
 262:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <LCD_CLEAR>
 266:	08 95       	ret

00000268 <LCD_send_data>:
	writePin(LCD_RS,LOW);
	SendToLCD(command);
}

void LCD_send_data(u8 data)
{
 268:	cf 93       	push	r28
 26a:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,HIGH);
 26c:	61 e0       	ldi	r22, 0x01	; 1
 26e:	82 e0       	ldi	r24, 0x02	; 2
 270:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
	SendToLCD(data);
 274:	8c 2f       	mov	r24, r28
 276:	0e 94 c5 00 	call	0x18a	; 0x18a <SendToLCD>
}
 27a:	cf 91       	pop	r28
 27c:	08 95       	ret

0000027e <disp_char>:
	writePin(LCD_E,LOW);
	_delay_us(50);
}
void disp_char(u8 letter)
{
	LCD_send_data(letter);
 27e:	0e 94 34 01 	call	0x268	; 0x268 <LCD_send_data>
 282:	08 95       	ret

00000284 <disp_str>:
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
void disp_str(u8* str)
{
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	8c 01       	movw	r16, r24
	u8 indx=0;
 28c:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[indx]!='\0')
 28e:	03 c0       	rjmp	.+6      	; 0x296 <disp_str+0x12>
	{
		disp_char(indx[str]);
 290:	0e 94 3f 01 	call	0x27e	; 0x27e <disp_char>
		indx++;
 294:	cf 5f       	subi	r28, 0xFF	; 255
	disp_char(letter);	
}
void disp_str(u8* str)
{
	u8 indx=0;
	while(str[indx]!='\0')
 296:	f8 01       	movw	r30, r16
 298:	ec 0f       	add	r30, r28
 29a:	f1 1d       	adc	r31, r1
 29c:	80 81       	ld	r24, Z
 29e:	81 11       	cpse	r24, r1
 2a0:	f7 cf       	rjmp	.-18     	; 0x290 <disp_str+0xc>
	{
		disp_char(indx[str]);
		indx++;
	}
}
 2a2:	cf 91       	pop	r28
 2a4:	1f 91       	pop	r17
 2a6:	0f 91       	pop	r16
 2a8:	08 95       	ret

000002aa <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
 2aa:	81 30       	cpi	r24, 0x01	; 1
 2ac:	29 f4       	brne	.+10     	; 0x2b8 <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
 2ae:	8f e7       	ldi	r24, 0x7F	; 127
 2b0:	86 0f       	add	r24, r22
 2b2:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
 2b6:	08 95       	ret
	}
	else if(row==2)
 2b8:	82 30       	cpi	r24, 0x02	; 2
 2ba:	21 f4       	brne	.+8      	; 0x2c4 <LCD_GOTXY+0x1a>
	{
		LCD_send_cmd(DDRAM_ADD+0x40+col-1);	
 2bc:	8f eb       	ldi	r24, 0xBF	; 191
 2be:	86 0f       	add	r24, r22
 2c0:	0e 94 ef 00 	call	0x1de	; 0x1de <LCD_send_cmd>
 2c4:	08 95       	ret

000002c6 <disp_charXY>:
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
 2c6:	cf 93       	push	r28
 2c8:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
 2ca:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTXY>
	disp_char(letter);	
 2ce:	8c 2f       	mov	r24, r28
 2d0:	0e 94 3f 01 	call	0x27e	; 0x27e <disp_char>
}
 2d4:	cf 91       	pop	r28
 2d6:	08 95       	ret

000002d8 <disp_strXY>:
	else{}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 2d8:	cf 93       	push	r28
 2da:	df 93       	push	r29
 2dc:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 2de:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTXY>
	disp_str(str);
 2e2:	ce 01       	movw	r24, r28
 2e4:	0e 94 42 01 	call	0x284	; 0x284 <disp_str>
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <disp_int>:


void disp_int(u32 intvalue)
{
 2ee:	0f 93       	push	r16
 2f0:	1f 93       	push	r17
 2f2:	cf 93       	push	r28
 2f4:	df 93       	push	r29
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	2b 97       	sbiw	r28, 0x0b	; 11
 2fc:	0f b6       	in	r0, 0x3f	; 63
 2fe:	f8 94       	cli
 300:	de bf       	out	0x3e, r29	; 62
 302:	0f be       	out	0x3f, r0	; 63
 304:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
 306:	8e 01       	movw	r16, r28
 308:	0f 5f       	subi	r16, 0xFF	; 255
 30a:	1f 4f       	sbci	r17, 0xFF	; 255
 30c:	2b e0       	ldi	r18, 0x0B	; 11
 30e:	f8 01       	movw	r30, r16
 310:	11 92       	st	Z+, r1
 312:	2a 95       	dec	r18
 314:	e9 f7       	brne	.-6      	; 0x310 <disp_int+0x22>
		sprintf(string,"%u",intvalue);
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	7f 93       	push	r23
 31c:	6f 93       	push	r22
 31e:	81 e7       	ldi	r24, 0x71	; 113
 320:	90 e0       	ldi	r25, 0x00	; 0
 322:	9f 93       	push	r25
 324:	8f 93       	push	r24
 326:	1f 93       	push	r17
 328:	0f 93       	push	r16
 32a:	0e 94 15 04 	call	0x82a	; 0x82a <sprintf>
		disp_str(string);
 32e:	c8 01       	movw	r24, r16
 330:	0e 94 42 01 	call	0x284	; 0x284 <disp_str>
}
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	2b 96       	adiw	r28, 0x0b	; 11
 340:	0f b6       	in	r0, 0x3f	; 63
 342:	f8 94       	cli
 344:	de bf       	out	0x3e, r29	; 62
 346:	0f be       	out	0x3f, r0	; 63
 348:	cd bf       	out	0x3d, r28	; 61
 34a:	df 91       	pop	r29
 34c:	cf 91       	pop	r28
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <disp_intXY>:
void disp_intXY(u8 row,u8 col,u32 intvalue)
{
 354:	cf 92       	push	r12
 356:	df 92       	push	r13
 358:	ef 92       	push	r14
 35a:	ff 92       	push	r15
 35c:	69 01       	movw	r12, r18
 35e:	7a 01       	movw	r14, r20
	LCD_GOTXY(row,col);
 360:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_GOTXY>
	disp_int(intvalue);
 364:	c7 01       	movw	r24, r14
 366:	b6 01       	movw	r22, r12
 368:	0e 94 77 01 	call	0x2ee	; 0x2ee <disp_int>
}
 36c:	ff 90       	pop	r15
 36e:	ef 90       	pop	r14
 370:	df 90       	pop	r13
 372:	cf 90       	pop	r12
 374:	08 95       	ret

00000376 <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
 376:	88 30       	cpi	r24, 0x08	; 8
 378:	f8 f4       	brcc	.+62     	; 0x3b8 <writePin+0x42>
		if(logic==HIGH)
 37a:	61 30       	cpi	r22, 0x01	; 1
 37c:	69 f4       	brne	.+26     	; 0x398 <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
 37e:	4b b3       	in	r20, 0x1b	; 27
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	30 e0       	ldi	r19, 0x00	; 0
 384:	b9 01       	movw	r22, r18
 386:	02 c0       	rjmp	.+4      	; 0x38c <writePin+0x16>
 388:	66 0f       	add	r22, r22
 38a:	77 1f       	adc	r23, r23
 38c:	8a 95       	dec	r24
 38e:	e2 f7       	brpl	.-8      	; 0x388 <writePin+0x12>
 390:	cb 01       	movw	r24, r22
 392:	84 2b       	or	r24, r20
 394:	8b bb       	out	0x1b, r24	; 27
 396:	08 95       	ret
		else if(logic==LOW)
 398:	61 11       	cpse	r22, r1
 39a:	82 c0       	rjmp	.+260    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
 39c:	4b b3       	in	r20, 0x1b	; 27
 39e:	21 e0       	ldi	r18, 0x01	; 1
 3a0:	30 e0       	ldi	r19, 0x00	; 0
 3a2:	b9 01       	movw	r22, r18
 3a4:	02 c0       	rjmp	.+4      	; 0x3aa <writePin+0x34>
 3a6:	66 0f       	add	r22, r22
 3a8:	77 1f       	adc	r23, r23
 3aa:	8a 95       	dec	r24
 3ac:	e2 f7       	brpl	.-8      	; 0x3a6 <writePin+0x30>
 3ae:	cb 01       	movw	r24, r22
 3b0:	80 95       	com	r24
 3b2:	84 23       	and	r24, r20
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
 3b8:	98 ef       	ldi	r25, 0xF8	; 248
 3ba:	98 0f       	add	r25, r24
 3bc:	98 30       	cpi	r25, 0x08	; 8
 3be:	18 f5       	brcc	.+70     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		if(logic==HIGH)
 3c0:	61 30       	cpi	r22, 0x01	; 1
 3c2:	79 f4       	brne	.+30     	; 0x3e2 <writePin+0x6c>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
 3c4:	48 b3       	in	r20, 0x18	; 24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	08 97       	sbiw	r24, 0x08	; 8
 3ca:	21 e0       	ldi	r18, 0x01	; 1
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	b9 01       	movw	r22, r18
 3d0:	02 c0       	rjmp	.+4      	; 0x3d6 <writePin+0x60>
 3d2:	66 0f       	add	r22, r22
 3d4:	77 1f       	adc	r23, r23
 3d6:	8a 95       	dec	r24
 3d8:	e2 f7       	brpl	.-8      	; 0x3d2 <writePin+0x5c>
 3da:	cb 01       	movw	r24, r22
 3dc:	84 2b       	or	r24, r20
 3de:	88 bb       	out	0x18, r24	; 24
 3e0:	08 95       	ret
		else if(logic==LOW)
 3e2:	61 11       	cpse	r22, r1
 3e4:	5d c0       	rjmp	.+186    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
 3e6:	48 b3       	in	r20, 0x18	; 24
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	08 97       	sbiw	r24, 0x08	; 8
 3ec:	21 e0       	ldi	r18, 0x01	; 1
 3ee:	30 e0       	ldi	r19, 0x00	; 0
 3f0:	b9 01       	movw	r22, r18
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <writePin+0x82>
 3f4:	66 0f       	add	r22, r22
 3f6:	77 1f       	adc	r23, r23
 3f8:	8a 95       	dec	r24
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <writePin+0x7e>
 3fc:	cb 01       	movw	r24, r22
 3fe:	80 95       	com	r24
 400:	84 23       	and	r24, r20
 402:	88 bb       	out	0x18, r24	; 24
 404:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
 406:	90 ef       	ldi	r25, 0xF0	; 240
 408:	98 0f       	add	r25, r24
 40a:	98 30       	cpi	r25, 0x08	; 8
 40c:	18 f5       	brcc	.+70     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
		if(logic==HIGH)
 40e:	61 30       	cpi	r22, 0x01	; 1
 410:	79 f4       	brne	.+30     	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
 412:	45 b3       	in	r20, 0x15	; 21
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	40 97       	sbiw	r24, 0x10	; 16
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	8a 95       	dec	r24
 426:	e2 f7       	brpl	.-8      	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
 428:	cb 01       	movw	r24, r22
 42a:	84 2b       	or	r24, r20
 42c:	85 bb       	out	0x15, r24	; 21
 42e:	08 95       	ret
		else if(logic==LOW)
 430:	61 11       	cpse	r22, r1
 432:	36 c0       	rjmp	.+108    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
 434:	45 b3       	in	r20, 0x15	; 21
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	40 97       	sbiw	r24, 0x10	; 16
 43a:	21 e0       	ldi	r18, 0x01	; 1
 43c:	30 e0       	ldi	r19, 0x00	; 0
 43e:	b9 01       	movw	r22, r18
 440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 442:	66 0f       	add	r22, r22
 444:	77 1f       	adc	r23, r23
 446:	8a 95       	dec	r24
 448:	e2 f7       	brpl	.-8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
 44a:	cb 01       	movw	r24, r22
 44c:	80 95       	com	r24
 44e:	84 23       	and	r24, r20
 450:	85 bb       	out	0x15, r24	; 21
 452:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
 454:	98 ee       	ldi	r25, 0xE8	; 232
 456:	98 0f       	add	r25, r24
 458:	98 30       	cpi	r25, 0x08	; 8
 45a:	10 f5       	brcc	.+68     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
		if(logic==HIGH)
 45c:	61 30       	cpi	r22, 0x01	; 1
 45e:	79 f4       	brne	.+30     	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
 460:	42 b3       	in	r20, 0x12	; 18
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	48 97       	sbiw	r24, 0x18	; 24
 466:	21 e0       	ldi	r18, 0x01	; 1
 468:	30 e0       	ldi	r19, 0x00	; 0
 46a:	b9 01       	movw	r22, r18
 46c:	02 c0       	rjmp	.+4      	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
 46e:	66 0f       	add	r22, r22
 470:	77 1f       	adc	r23, r23
 472:	8a 95       	dec	r24
 474:	e2 f7       	brpl	.-8      	; 0x46e <__LOCK_REGION_LENGTH__+0x6e>
 476:	cb 01       	movw	r24, r22
 478:	84 2b       	or	r24, r20
 47a:	82 bb       	out	0x12, r24	; 18
 47c:	08 95       	ret
		else if(logic==LOW)
 47e:	61 11       	cpse	r22, r1
 480:	0f c0       	rjmp	.+30     	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
 482:	42 b3       	in	r20, 0x12	; 18
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	48 97       	sbiw	r24, 0x18	; 24
 488:	21 e0       	ldi	r18, 0x01	; 1
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	b9 01       	movw	r22, r18
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 490:	66 0f       	add	r22, r22
 492:	77 1f       	adc	r23, r23
 494:	8a 95       	dec	r24
 496:	e2 f7       	brpl	.-8      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
 498:	cb 01       	movw	r24, r22
 49a:	80 95       	com	r24
 49c:	84 23       	and	r24, r20
 49e:	82 bb       	out	0x12, r24	; 18
 4a0:	08 95       	ret

000004a2 <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
 4a2:	88 30       	cpi	r24, 0x08	; 8
 4a4:	f8 f4       	brcc	.+62     	; 0x4e4 <pinDirection+0x42>
		if(direction == OUTPUT)
 4a6:	61 30       	cpi	r22, 0x01	; 1
 4a8:	69 f4       	brne	.+26     	; 0x4c4 <pinDirection+0x22>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
 4aa:	4a b3       	in	r20, 0x1a	; 26
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	30 e0       	ldi	r19, 0x00	; 0
 4b0:	b9 01       	movw	r22, r18
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <pinDirection+0x16>
 4b4:	66 0f       	add	r22, r22
 4b6:	77 1f       	adc	r23, r23
 4b8:	8a 95       	dec	r24
 4ba:	e2 f7       	brpl	.-8      	; 0x4b4 <pinDirection+0x12>
 4bc:	cb 01       	movw	r24, r22
 4be:	84 2b       	or	r24, r20
 4c0:	8a bb       	out	0x1a, r24	; 26
 4c2:	08 95       	ret
		else if(direction == INPUT)
 4c4:	61 11       	cpse	r22, r1
 4c6:	82 c0       	rjmp	.+260    	; 0x5cc <pinDirection+0x12a>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
 4c8:	4a b3       	in	r20, 0x1a	; 26
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <pinDirection+0x34>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	8a 95       	dec	r24
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <pinDirection+0x30>
 4da:	cb 01       	movw	r24, r22
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	8a bb       	out	0x1a, r24	; 26
 4e2:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
 4e4:	98 ef       	ldi	r25, 0xF8	; 248
 4e6:	98 0f       	add	r25, r24
 4e8:	98 30       	cpi	r25, 0x08	; 8
 4ea:	18 f5       	brcc	.+70     	; 0x532 <pinDirection+0x90>
		if(direction == OUTPUT)
 4ec:	61 30       	cpi	r22, 0x01	; 1
 4ee:	79 f4       	brne	.+30     	; 0x50e <pinDirection+0x6c>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
 4f0:	47 b3       	in	r20, 0x17	; 23
 4f2:	90 e0       	ldi	r25, 0x00	; 0
 4f4:	08 97       	sbiw	r24, 0x08	; 8
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	b9 01       	movw	r22, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <pinDirection+0x60>
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	8a 95       	dec	r24
 504:	e2 f7       	brpl	.-8      	; 0x4fe <pinDirection+0x5c>
 506:	cb 01       	movw	r24, r22
 508:	84 2b       	or	r24, r20
 50a:	87 bb       	out	0x17, r24	; 23
 50c:	08 95       	ret
		else if(direction == LOW)
 50e:	61 11       	cpse	r22, r1
 510:	5d c0       	rjmp	.+186    	; 0x5cc <pinDirection+0x12a>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
 512:	47 b3       	in	r20, 0x17	; 23
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	08 97       	sbiw	r24, 0x08	; 8
 518:	21 e0       	ldi	r18, 0x01	; 1
 51a:	30 e0       	ldi	r19, 0x00	; 0
 51c:	b9 01       	movw	r22, r18
 51e:	02 c0       	rjmp	.+4      	; 0x524 <pinDirection+0x82>
 520:	66 0f       	add	r22, r22
 522:	77 1f       	adc	r23, r23
 524:	8a 95       	dec	r24
 526:	e2 f7       	brpl	.-8      	; 0x520 <pinDirection+0x7e>
 528:	cb 01       	movw	r24, r22
 52a:	80 95       	com	r24
 52c:	84 23       	and	r24, r20
 52e:	87 bb       	out	0x17, r24	; 23
 530:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
 532:	90 ef       	ldi	r25, 0xF0	; 240
 534:	98 0f       	add	r25, r24
 536:	98 30       	cpi	r25, 0x08	; 8
 538:	18 f5       	brcc	.+70     	; 0x580 <pinDirection+0xde>
		if(direction == OUTPUT)
 53a:	61 30       	cpi	r22, 0x01	; 1
 53c:	79 f4       	brne	.+30     	; 0x55c <pinDirection+0xba>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
 53e:	44 b3       	in	r20, 0x14	; 20
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	40 97       	sbiw	r24, 0x10	; 16
 544:	21 e0       	ldi	r18, 0x01	; 1
 546:	30 e0       	ldi	r19, 0x00	; 0
 548:	b9 01       	movw	r22, r18
 54a:	02 c0       	rjmp	.+4      	; 0x550 <pinDirection+0xae>
 54c:	66 0f       	add	r22, r22
 54e:	77 1f       	adc	r23, r23
 550:	8a 95       	dec	r24
 552:	e2 f7       	brpl	.-8      	; 0x54c <pinDirection+0xaa>
 554:	cb 01       	movw	r24, r22
 556:	84 2b       	or	r24, r20
 558:	84 bb       	out	0x14, r24	; 20
 55a:	08 95       	ret
		else if(direction==INPUT)
 55c:	61 11       	cpse	r22, r1
 55e:	36 c0       	rjmp	.+108    	; 0x5cc <pinDirection+0x12a>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
 560:	44 b3       	in	r20, 0x14	; 20
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	40 97       	sbiw	r24, 0x10	; 16
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	b9 01       	movw	r22, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <pinDirection+0xd0>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	8a 95       	dec	r24
 574:	e2 f7       	brpl	.-8      	; 0x56e <pinDirection+0xcc>
 576:	cb 01       	movw	r24, r22
 578:	80 95       	com	r24
 57a:	84 23       	and	r24, r20
 57c:	84 bb       	out	0x14, r24	; 20
 57e:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
 580:	98 ee       	ldi	r25, 0xE8	; 232
 582:	98 0f       	add	r25, r24
 584:	98 30       	cpi	r25, 0x08	; 8
 586:	10 f5       	brcc	.+68     	; 0x5cc <pinDirection+0x12a>
		if(direction == OUTPUT)
 588:	61 30       	cpi	r22, 0x01	; 1
 58a:	79 f4       	brne	.+30     	; 0x5aa <pinDirection+0x108>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
 58c:	41 b3       	in	r20, 0x11	; 17
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	48 97       	sbiw	r24, 0x18	; 24
 592:	21 e0       	ldi	r18, 0x01	; 1
 594:	30 e0       	ldi	r19, 0x00	; 0
 596:	b9 01       	movw	r22, r18
 598:	02 c0       	rjmp	.+4      	; 0x59e <pinDirection+0xfc>
 59a:	66 0f       	add	r22, r22
 59c:	77 1f       	adc	r23, r23
 59e:	8a 95       	dec	r24
 5a0:	e2 f7       	brpl	.-8      	; 0x59a <pinDirection+0xf8>
 5a2:	cb 01       	movw	r24, r22
 5a4:	84 2b       	or	r24, r20
 5a6:	81 bb       	out	0x11, r24	; 17
 5a8:	08 95       	ret
		else if(direction == INPUT)
 5aa:	61 11       	cpse	r22, r1
 5ac:	0f c0       	rjmp	.+30     	; 0x5cc <pinDirection+0x12a>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
 5ae:	41 b3       	in	r20, 0x11	; 17
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	48 97       	sbiw	r24, 0x18	; 24
 5b4:	21 e0       	ldi	r18, 0x01	; 1
 5b6:	30 e0       	ldi	r19, 0x00	; 0
 5b8:	b9 01       	movw	r22, r18
 5ba:	02 c0       	rjmp	.+4      	; 0x5c0 <pinDirection+0x11e>
 5bc:	66 0f       	add	r22, r22
 5be:	77 1f       	adc	r23, r23
 5c0:	8a 95       	dec	r24
 5c2:	e2 f7       	brpl	.-8      	; 0x5bc <pinDirection+0x11a>
 5c4:	cb 01       	movw	r24, r22
 5c6:	80 95       	com	r24
 5c8:	84 23       	and	r24, r20
 5ca:	81 bb       	out	0x11, r24	; 17
 5cc:	08 95       	ret

000005ce <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
 5ce:	88 30       	cpi	r24, 0x08	; 8
 5d0:	58 f4       	brcc	.+22     	; 0x5e8 <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
 5d2:	29 b3       	in	r18, 0x19	; 25
 5d4:	30 e0       	ldi	r19, 0x00	; 0
 5d6:	a9 01       	movw	r20, r18
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <readPin+0x10>
 5da:	55 95       	asr	r21
 5dc:	47 95       	ror	r20
 5de:	8a 95       	dec	r24
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <readPin+0xc>
 5e2:	ca 01       	movw	r24, r20
 5e4:	81 70       	andi	r24, 0x01	; 1
 5e6:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
 5e8:	98 ef       	ldi	r25, 0xF8	; 248
 5ea:	98 0f       	add	r25, r24
 5ec:	98 30       	cpi	r25, 0x08	; 8
 5ee:	70 f4       	brcc	.+28     	; 0x60c <readPin+0x3e>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
 5f0:	96 b3       	in	r25, 0x16	; 22
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	28 50       	subi	r18, 0x08	; 8
 5f8:	31 09       	sbc	r19, r1
 5fa:	89 2f       	mov	r24, r25
 5fc:	90 e0       	ldi	r25, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <readPin+0x36>
 600:	95 95       	asr	r25
 602:	87 95       	ror	r24
 604:	2a 95       	dec	r18
 606:	e2 f7       	brpl	.-8      	; 0x600 <readPin+0x32>
 608:	81 70       	andi	r24, 0x01	; 1
 60a:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
 60c:	90 ef       	ldi	r25, 0xF0	; 240
 60e:	98 0f       	add	r25, r24
 610:	98 30       	cpi	r25, 0x08	; 8
 612:	70 f4       	brcc	.+28     	; 0x630 <readPin+0x62>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
 614:	93 b3       	in	r25, 0x13	; 19
 616:	28 2f       	mov	r18, r24
 618:	30 e0       	ldi	r19, 0x00	; 0
 61a:	20 51       	subi	r18, 0x10	; 16
 61c:	31 09       	sbc	r19, r1
 61e:	89 2f       	mov	r24, r25
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	02 c0       	rjmp	.+4      	; 0x628 <readPin+0x5a>
 624:	95 95       	asr	r25
 626:	87 95       	ror	r24
 628:	2a 95       	dec	r18
 62a:	e2 f7       	brpl	.-8      	; 0x624 <readPin+0x56>
 62c:	81 70       	andi	r24, 0x01	; 1
 62e:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
 630:	98 ee       	ldi	r25, 0xE8	; 232
 632:	98 0f       	add	r25, r24
 634:	98 30       	cpi	r25, 0x08	; 8
 636:	70 f4       	brcc	.+28     	; 0x654 <readPin+0x86>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
 638:	90 b3       	in	r25, 0x10	; 16
 63a:	28 2f       	mov	r18, r24
 63c:	30 e0       	ldi	r19, 0x00	; 0
 63e:	28 51       	subi	r18, 0x18	; 24
 640:	31 09       	sbc	r19, r1
 642:	89 2f       	mov	r24, r25
 644:	90 e0       	ldi	r25, 0x00	; 0
 646:	02 c0       	rjmp	.+4      	; 0x64c <readPin+0x7e>
 648:	95 95       	asr	r25
 64a:	87 95       	ror	r24
 64c:	2a 95       	dec	r18
 64e:	e2 f7       	brpl	.-8      	; 0x648 <readPin+0x7a>
 650:	81 70       	andi	r24, 0x01	; 1
 652:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
 654:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 656:	08 95       	ret

00000658 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 658:	41 30       	cpi	r20, 0x01	; 1
 65a:	29 f4       	brne	.+10     	; 0x666 <writePins+0xe>
		SETBits(*port,mask);
 65c:	fc 01       	movw	r30, r24
 65e:	20 81       	ld	r18, Z
 660:	62 2b       	or	r22, r18
 662:	60 83       	st	Z, r22
 664:	08 95       	ret
	else if(logic==LOW)
 666:	41 11       	cpse	r20, r1
 668:	05 c0       	rjmp	.+10     	; 0x674 <writePins+0x1c>
		CLRBits(*port,mask);
 66a:	fc 01       	movw	r30, r24
 66c:	20 81       	ld	r18, Z
 66e:	60 95       	com	r22
 670:	62 23       	and	r22, r18
 672:	60 83       	st	Z, r22
 674:	08 95       	ret

00000676 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 676:	41 30       	cpi	r20, 0x01	; 1
 678:	29 f4       	brne	.+10     	; 0x684 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 67a:	fc 01       	movw	r30, r24
 67c:	20 81       	ld	r18, Z
 67e:	62 2b       	or	r22, r18
 680:	60 83       	st	Z, r22
 682:	08 95       	ret
	else if(direction == INPUT)
 684:	41 11       	cpse	r20, r1
 686:	05 c0       	rjmp	.+10     	; 0x692 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 688:	fc 01       	movw	r30, r24
 68a:	20 81       	ld	r18, Z
 68c:	60 95       	com	r22
 68e:	62 23       	and	r22, r18
 690:	60 83       	st	Z, r22
 692:	08 95       	ret

00000694 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
 694:	1f 92       	push	r1
 696:	0f 92       	push	r0
 698:	0f b6       	in	r0, 0x3f	; 63
 69a:	0f 92       	push	r0
 69c:	11 24       	eor	r1, r1
 69e:	8f 93       	push	r24
 6a0:	9f 93       	push	r25
 6a2:	af 93       	push	r26
 6a4:	bf 93       	push	r27
	overflow++;	
 6a6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__data_end>
 6aa:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <__data_end+0x1>
 6ae:	a0 91 7c 00 	lds	r26, 0x007C	; 0x80007c <__data_end+0x2>
 6b2:	b0 91 7d 00 	lds	r27, 0x007D	; 0x80007d <__data_end+0x3>
 6b6:	01 96       	adiw	r24, 0x01	; 1
 6b8:	a1 1d       	adc	r26, r1
 6ba:	b1 1d       	adc	r27, r1
 6bc:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__data_end>
 6c0:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <__data_end+0x1>
 6c4:	a0 93 7c 00 	sts	0x007C, r26	; 0x80007c <__data_end+0x2>
 6c8:	b0 93 7d 00 	sts	0x007D, r27	; 0x80007d <__data_end+0x3>
}
 6cc:	bf 91       	pop	r27
 6ce:	af 91       	pop	r26
 6d0:	9f 91       	pop	r25
 6d2:	8f 91       	pop	r24
 6d4:	0f 90       	pop	r0
 6d6:	0f be       	out	0x3f, r0	; 63
 6d8:	0f 90       	pop	r0
 6da:	1f 90       	pop	r1
 6dc:	18 95       	reti

000006de <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
 6de:	1f 92       	push	r1
 6e0:	0f 92       	push	r0
 6e2:	0f b6       	in	r0, 0x3f	; 63
 6e4:	0f 92       	push	r0
 6e6:	11 24       	eor	r1, r1
 6e8:	8f 93       	push	r24
 6ea:	9f 93       	push	r25
 6ec:	ef 93       	push	r30
 6ee:	ff 93       	push	r31
	gps[i]=UDR;
 6f0:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <i>
 6f4:	e8 2f       	mov	r30, r24
 6f6:	f0 e0       	ldi	r31, 0x00	; 0
 6f8:	9c b1       	in	r25, 0x0c	; 12
 6fa:	e0 58       	subi	r30, 0x80	; 128
 6fc:	ff 4f       	sbci	r31, 0xFF	; 255
 6fe:	90 83       	st	Z, r25
	i++;
 700:	8f 5f       	subi	r24, 0xFF	; 255
 702:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <i>
	if (i==5)
 706:	85 30       	cpi	r24, 0x05	; 5
 708:	19 f4       	brne	.+6      	; 0x710 <__vector_13+0x32>
	{
		gps[6]='\0';
 70a:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <gps+0x6>
		cli();
 70e:	f8 94       	cli
	}
}
 710:	ff 91       	pop	r31
 712:	ef 91       	pop	r30
 714:	9f 91       	pop	r25
 716:	8f 91       	pop	r24
 718:	0f 90       	pop	r0
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	0f 90       	pop	r0
 71e:	1f 90       	pop	r1
 720:	18 95       	reti

00000722 <Project_Init>:
static u8 oldpassword[]="1234";
static u8 trials=0;

void Project_Init(void)
{
	pinDirection(DOOR_LED,OUTPUT);
 722:	61 e0       	ldi	r22, 0x01	; 1
 724:	84 e1       	ldi	r24, 0x14	; 20
 726:	0e 94 51 02 	call	0x4a2	; 0x4a2 <pinDirection>
	pinDirection(BUZZER,OUTPUT);
 72a:	61 e0       	ldi	r22, 0x01	; 1
 72c:	8f e0       	ldi	r24, 0x0F	; 15
 72e:	0e 94 51 02 	call	0x4a2	; 0x4a2 <pinDirection>
 732:	08 95       	ret

00000734 <Check_Password>:
		}
	}
	Check_Password(password);
}
void Check_Password(u8* password)
{
 734:	cf 93       	push	r28
 736:	df 93       	push	r29
 738:	ec 01       	movw	r28, r24
	
	if (strcmp(oldpassword,password)==0)
 73a:	bc 01       	movw	r22, r24
 73c:	8c e6       	ldi	r24, 0x6C	; 108
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 0c 04 	call	0x818	; 0x818 <strcmp>
 744:	89 2b       	or	r24, r25
 746:	a1 f4       	brne	.+40     	; 0x770 <Check_Password+0x3c>
		{
			writePin(DOOR_LED,HIGH);//open door
 748:	61 e0       	ldi	r22, 0x01	; 1
 74a:	84 e1       	ldi	r24, 0x14	; 20
 74c:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
 750:	2f ef       	ldi	r18, 0xFF	; 255
 752:	8b e7       	ldi	r24, 0x7B	; 123
 754:	92 e9       	ldi	r25, 0x92	; 146
 756:	21 50       	subi	r18, 0x01	; 1
 758:	80 40       	sbci	r24, 0x00	; 0
 75a:	90 40       	sbci	r25, 0x00	; 0
 75c:	e1 f7       	brne	.-8      	; 0x756 <Check_Password+0x22>
 75e:	00 c0       	rjmp	.+0      	; 0x760 <Check_Password+0x2c>
 760:	00 00       	nop
			_delay_ms(3000);
			writePin(DOOR_LED,LOW);//close door
 762:	60 e0       	ldi	r22, 0x00	; 0
 764:	84 e1       	ldi	r24, 0x14	; 20
 766:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
			trials=0;
 76a:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <trials>
			return;
 76e:	2e c0       	rjmp	.+92     	; 0x7cc <Check_Password+0x98>
		}
		disp_intXY(2,1,trials);
 770:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <trials>
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	40 e0       	ldi	r20, 0x00	; 0
 778:	50 e0       	ldi	r21, 0x00	; 0
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	82 e0       	ldi	r24, 0x02	; 2
 77e:	0e 94 aa 01 	call	0x354	; 0x354 <disp_intXY>
		if (trials>3)
 782:	20 91 7f 00 	lds	r18, 0x007F	; 0x80007f <trials>
 786:	24 30       	cpi	r18, 0x04	; 4
 788:	a0 f0       	brcs	.+40     	; 0x7b2 <Check_Password+0x7e>
		{
			writePin(BUZZER,HIGH); // 	turn on alarm
 78a:	61 e0       	ldi	r22, 0x01	; 1
 78c:	8f e0       	ldi	r24, 0x0F	; 15
 78e:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
 792:	2f ef       	ldi	r18, 0xFF	; 255
 794:	8b e7       	ldi	r24, 0x7B	; 123
 796:	92 e9       	ldi	r25, 0x92	; 146
 798:	21 50       	subi	r18, 0x01	; 1
 79a:	80 40       	sbci	r24, 0x00	; 0
 79c:	90 40       	sbci	r25, 0x00	; 0
 79e:	e1 f7       	brne	.-8      	; 0x798 <Check_Password+0x64>
 7a0:	00 c0       	rjmp	.+0      	; 0x7a2 <Check_Password+0x6e>
 7a2:	00 00       	nop
			_delay_ms(3000);
			writePin(BUZZER,LOW);// 	turn off alarm
 7a4:	60 e0       	ldi	r22, 0x00	; 0
 7a6:	8f e0       	ldi	r24, 0x0F	; 15
 7a8:	0e 94 bb 01 	call	0x376	; 0x376 <writePin>
			trials=0;
 7ac:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <trials>
			return;
 7b0:	0d c0       	rjmp	.+26     	; 0x7cc <Check_Password+0x98>
		}
			trials++;
 7b2:	2f 5f       	subi	r18, 0xFF	; 255
 7b4:	20 93 7f 00 	sts	0x007F, r18	; 0x80007f <trials>
			disp_intXY(2,6,trials);
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	40 e0       	ldi	r20, 0x00	; 0
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	66 e0       	ldi	r22, 0x06	; 6
 7c0:	82 e0       	ldi	r24, 0x02	; 2
 7c2:	0e 94 aa 01 	call	0x354	; 0x354 <disp_intXY>
			Get_Password(password);
 7c6:	ce 01       	movw	r24, r28
 7c8:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <Get_Password>
		
			
			
	
 7cc:	df 91       	pop	r29
 7ce:	cf 91       	pop	r28
 7d0:	08 95       	ret

000007d2 <Get_Password>:
	pinDirection(BUZZER,OUTPUT);
}


void Get_Password(u8* password)
{
 7d2:	0f 93       	push	r16
 7d4:	1f 93       	push	r17
 7d6:	cf 93       	push	r28
 7d8:	8c 01       	movw	r16, r24
	disp_strXY(1,1,"    ");
 7da:	44 e7       	ldi	r20, 0x74	; 116
 7dc:	50 e0       	ldi	r21, 0x00	; 0
 7de:	61 e0       	ldi	r22, 0x01	; 1
 7e0:	81 e0       	ldi	r24, 0x01	; 1
 7e2:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <disp_strXY>
	u8 keyPressed=0, counter=0;
 7e6:	c0 e0       	ldi	r28, 0x00	; 0
	while (counter<4)
 7e8:	0e c0       	rjmp	.+28     	; 0x806 <Get_Password+0x34>
	{
		keyPressed=GetKey();
 7ea:	0e 94 7b 00 	call	0xf6	; 0xf6 <GetKey>
	
		if (keyPressed!=0)
 7ee:	88 23       	and	r24, r24
 7f0:	51 f0       	breq	.+20     	; 0x806 <Get_Password+0x34>
		{
			password[counter]=keyPressed;
 7f2:	f8 01       	movw	r30, r16
 7f4:	ec 0f       	add	r30, r28
 7f6:	f1 1d       	adc	r31, r1
 7f8:	80 83       	st	Z, r24
			disp_charXY(1,counter+1,keyPressed);
 7fa:	cf 5f       	subi	r28, 0xFF	; 255
 7fc:	48 2f       	mov	r20, r24
 7fe:	6c 2f       	mov	r22, r28
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	0e 94 63 01 	call	0x2c6	; 0x2c6 <disp_charXY>

void Get_Password(u8* password)
{
	disp_strXY(1,1,"    ");
	u8 keyPressed=0, counter=0;
	while (counter<4)
 806:	c4 30       	cpi	r28, 0x04	; 4
 808:	80 f3       	brcs	.-32     	; 0x7ea <Get_Password+0x18>
			disp_charXY(1,counter+1,keyPressed);
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
 80a:	c8 01       	movw	r24, r16
 80c:	0e 94 9a 03 	call	0x734	; 0x734 <Check_Password>
}
 810:	cf 91       	pop	r28
 812:	1f 91       	pop	r17
 814:	0f 91       	pop	r16
 816:	08 95       	ret

00000818 <strcmp>:
 818:	fb 01       	movw	r30, r22
 81a:	dc 01       	movw	r26, r24
 81c:	8d 91       	ld	r24, X+
 81e:	01 90       	ld	r0, Z+
 820:	80 19       	sub	r24, r0
 822:	01 10       	cpse	r0, r1
 824:	d9 f3       	breq	.-10     	; 0x81c <strcmp+0x4>
 826:	99 0b       	sbc	r25, r25
 828:	08 95       	ret

0000082a <sprintf>:
 82a:	ae e0       	ldi	r26, 0x0E	; 14
 82c:	b0 e0       	ldi	r27, 0x00	; 0
 82e:	eb e1       	ldi	r30, 0x1B	; 27
 830:	f4 e0       	ldi	r31, 0x04	; 4
 832:	0c 94 d6 06 	jmp	0xdac	; 0xdac <__prologue_saves__+0x1c>
 836:	0d 89       	ldd	r16, Y+21	; 0x15
 838:	1e 89       	ldd	r17, Y+22	; 0x16
 83a:	86 e0       	ldi	r24, 0x06	; 6
 83c:	8c 83       	std	Y+4, r24	; 0x04
 83e:	1a 83       	std	Y+2, r17	; 0x02
 840:	09 83       	std	Y+1, r16	; 0x01
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f e7       	ldi	r25, 0x7F	; 127
 846:	9e 83       	std	Y+6, r25	; 0x06
 848:	8d 83       	std	Y+5, r24	; 0x05
 84a:	ae 01       	movw	r20, r28
 84c:	47 5e       	subi	r20, 0xE7	; 231
 84e:	5f 4f       	sbci	r21, 0xFF	; 255
 850:	6f 89       	ldd	r22, Y+23	; 0x17
 852:	78 8d       	ldd	r23, Y+24	; 0x18
 854:	ce 01       	movw	r24, r28
 856:	01 96       	adiw	r24, 0x01	; 1
 858:	0e 94 37 04 	call	0x86e	; 0x86e <vfprintf>
 85c:	ef 81       	ldd	r30, Y+7	; 0x07
 85e:	f8 85       	ldd	r31, Y+8	; 0x08
 860:	e0 0f       	add	r30, r16
 862:	f1 1f       	adc	r31, r17
 864:	10 82       	st	Z, r1
 866:	2e 96       	adiw	r28, 0x0e	; 14
 868:	e4 e0       	ldi	r30, 0x04	; 4
 86a:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__epilogue_restores__+0x1c>

0000086e <vfprintf>:
 86e:	ab e0       	ldi	r26, 0x0B	; 11
 870:	b0 e0       	ldi	r27, 0x00	; 0
 872:	ed e3       	ldi	r30, 0x3D	; 61
 874:	f4 e0       	ldi	r31, 0x04	; 4
 876:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <__prologue_saves__>
 87a:	6c 01       	movw	r12, r24
 87c:	7b 01       	movw	r14, r22
 87e:	8a 01       	movw	r16, r20
 880:	fc 01       	movw	r30, r24
 882:	17 82       	std	Z+7, r1	; 0x07
 884:	16 82       	std	Z+6, r1	; 0x06
 886:	83 81       	ldd	r24, Z+3	; 0x03
 888:	81 ff       	sbrs	r24, 1
 88a:	cc c1       	rjmp	.+920    	; 0xc24 <vfprintf+0x3b6>
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	3c 01       	movw	r6, r24
 892:	f6 01       	movw	r30, r12
 894:	93 81       	ldd	r25, Z+3	; 0x03
 896:	f7 01       	movw	r30, r14
 898:	93 fd       	sbrc	r25, 3
 89a:	85 91       	lpm	r24, Z+
 89c:	93 ff       	sbrs	r25, 3
 89e:	81 91       	ld	r24, Z+
 8a0:	7f 01       	movw	r14, r30
 8a2:	88 23       	and	r24, r24
 8a4:	09 f4       	brne	.+2      	; 0x8a8 <vfprintf+0x3a>
 8a6:	ba c1       	rjmp	.+884    	; 0xc1c <vfprintf+0x3ae>
 8a8:	85 32       	cpi	r24, 0x25	; 37
 8aa:	39 f4       	brne	.+14     	; 0x8ba <vfprintf+0x4c>
 8ac:	93 fd       	sbrc	r25, 3
 8ae:	85 91       	lpm	r24, Z+
 8b0:	93 ff       	sbrs	r25, 3
 8b2:	81 91       	ld	r24, Z+
 8b4:	7f 01       	movw	r14, r30
 8b6:	85 32       	cpi	r24, 0x25	; 37
 8b8:	29 f4       	brne	.+10     	; 0x8c4 <vfprintf+0x56>
 8ba:	b6 01       	movw	r22, r12
 8bc:	90 e0       	ldi	r25, 0x00	; 0
 8be:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 8c2:	e7 cf       	rjmp	.-50     	; 0x892 <vfprintf+0x24>
 8c4:	91 2c       	mov	r9, r1
 8c6:	21 2c       	mov	r2, r1
 8c8:	31 2c       	mov	r3, r1
 8ca:	ff e1       	ldi	r31, 0x1F	; 31
 8cc:	f3 15       	cp	r31, r3
 8ce:	d8 f0       	brcs	.+54     	; 0x906 <vfprintf+0x98>
 8d0:	8b 32       	cpi	r24, 0x2B	; 43
 8d2:	79 f0       	breq	.+30     	; 0x8f2 <vfprintf+0x84>
 8d4:	38 f4       	brcc	.+14     	; 0x8e4 <vfprintf+0x76>
 8d6:	80 32       	cpi	r24, 0x20	; 32
 8d8:	79 f0       	breq	.+30     	; 0x8f8 <vfprintf+0x8a>
 8da:	83 32       	cpi	r24, 0x23	; 35
 8dc:	a1 f4       	brne	.+40     	; 0x906 <vfprintf+0x98>
 8de:	23 2d       	mov	r18, r3
 8e0:	20 61       	ori	r18, 0x10	; 16
 8e2:	1d c0       	rjmp	.+58     	; 0x91e <vfprintf+0xb0>
 8e4:	8d 32       	cpi	r24, 0x2D	; 45
 8e6:	61 f0       	breq	.+24     	; 0x900 <vfprintf+0x92>
 8e8:	80 33       	cpi	r24, 0x30	; 48
 8ea:	69 f4       	brne	.+26     	; 0x906 <vfprintf+0x98>
 8ec:	23 2d       	mov	r18, r3
 8ee:	21 60       	ori	r18, 0x01	; 1
 8f0:	16 c0       	rjmp	.+44     	; 0x91e <vfprintf+0xb0>
 8f2:	83 2d       	mov	r24, r3
 8f4:	82 60       	ori	r24, 0x02	; 2
 8f6:	38 2e       	mov	r3, r24
 8f8:	e3 2d       	mov	r30, r3
 8fa:	e4 60       	ori	r30, 0x04	; 4
 8fc:	3e 2e       	mov	r3, r30
 8fe:	2a c0       	rjmp	.+84     	; 0x954 <vfprintf+0xe6>
 900:	f3 2d       	mov	r31, r3
 902:	f8 60       	ori	r31, 0x08	; 8
 904:	1d c0       	rjmp	.+58     	; 0x940 <vfprintf+0xd2>
 906:	37 fc       	sbrc	r3, 7
 908:	2d c0       	rjmp	.+90     	; 0x964 <vfprintf+0xf6>
 90a:	20 ed       	ldi	r18, 0xD0	; 208
 90c:	28 0f       	add	r18, r24
 90e:	2a 30       	cpi	r18, 0x0A	; 10
 910:	40 f0       	brcs	.+16     	; 0x922 <vfprintf+0xb4>
 912:	8e 32       	cpi	r24, 0x2E	; 46
 914:	b9 f4       	brne	.+46     	; 0x944 <vfprintf+0xd6>
 916:	36 fc       	sbrc	r3, 6
 918:	81 c1       	rjmp	.+770    	; 0xc1c <vfprintf+0x3ae>
 91a:	23 2d       	mov	r18, r3
 91c:	20 64       	ori	r18, 0x40	; 64
 91e:	32 2e       	mov	r3, r18
 920:	19 c0       	rjmp	.+50     	; 0x954 <vfprintf+0xe6>
 922:	36 fe       	sbrs	r3, 6
 924:	06 c0       	rjmp	.+12     	; 0x932 <vfprintf+0xc4>
 926:	8a e0       	ldi	r24, 0x0A	; 10
 928:	98 9e       	mul	r9, r24
 92a:	20 0d       	add	r18, r0
 92c:	11 24       	eor	r1, r1
 92e:	92 2e       	mov	r9, r18
 930:	11 c0       	rjmp	.+34     	; 0x954 <vfprintf+0xe6>
 932:	ea e0       	ldi	r30, 0x0A	; 10
 934:	2e 9e       	mul	r2, r30
 936:	20 0d       	add	r18, r0
 938:	11 24       	eor	r1, r1
 93a:	22 2e       	mov	r2, r18
 93c:	f3 2d       	mov	r31, r3
 93e:	f0 62       	ori	r31, 0x20	; 32
 940:	3f 2e       	mov	r3, r31
 942:	08 c0       	rjmp	.+16     	; 0x954 <vfprintf+0xe6>
 944:	8c 36       	cpi	r24, 0x6C	; 108
 946:	21 f4       	brne	.+8      	; 0x950 <vfprintf+0xe2>
 948:	83 2d       	mov	r24, r3
 94a:	80 68       	ori	r24, 0x80	; 128
 94c:	38 2e       	mov	r3, r24
 94e:	02 c0       	rjmp	.+4      	; 0x954 <vfprintf+0xe6>
 950:	88 36       	cpi	r24, 0x68	; 104
 952:	41 f4       	brne	.+16     	; 0x964 <vfprintf+0xf6>
 954:	f7 01       	movw	r30, r14
 956:	93 fd       	sbrc	r25, 3
 958:	85 91       	lpm	r24, Z+
 95a:	93 ff       	sbrs	r25, 3
 95c:	81 91       	ld	r24, Z+
 95e:	7f 01       	movw	r14, r30
 960:	81 11       	cpse	r24, r1
 962:	b3 cf       	rjmp	.-154    	; 0x8ca <vfprintf+0x5c>
 964:	98 2f       	mov	r25, r24
 966:	9f 7d       	andi	r25, 0xDF	; 223
 968:	95 54       	subi	r25, 0x45	; 69
 96a:	93 30       	cpi	r25, 0x03	; 3
 96c:	28 f4       	brcc	.+10     	; 0x978 <vfprintf+0x10a>
 96e:	0c 5f       	subi	r16, 0xFC	; 252
 970:	1f 4f       	sbci	r17, 0xFF	; 255
 972:	9f e3       	ldi	r25, 0x3F	; 63
 974:	99 83       	std	Y+1, r25	; 0x01
 976:	0d c0       	rjmp	.+26     	; 0x992 <vfprintf+0x124>
 978:	83 36       	cpi	r24, 0x63	; 99
 97a:	31 f0       	breq	.+12     	; 0x988 <vfprintf+0x11a>
 97c:	83 37       	cpi	r24, 0x73	; 115
 97e:	71 f0       	breq	.+28     	; 0x99c <vfprintf+0x12e>
 980:	83 35       	cpi	r24, 0x53	; 83
 982:	09 f0       	breq	.+2      	; 0x986 <vfprintf+0x118>
 984:	59 c0       	rjmp	.+178    	; 0xa38 <vfprintf+0x1ca>
 986:	21 c0       	rjmp	.+66     	; 0x9ca <vfprintf+0x15c>
 988:	f8 01       	movw	r30, r16
 98a:	80 81       	ld	r24, Z
 98c:	89 83       	std	Y+1, r24	; 0x01
 98e:	0e 5f       	subi	r16, 0xFE	; 254
 990:	1f 4f       	sbci	r17, 0xFF	; 255
 992:	88 24       	eor	r8, r8
 994:	83 94       	inc	r8
 996:	91 2c       	mov	r9, r1
 998:	53 01       	movw	r10, r6
 99a:	13 c0       	rjmp	.+38     	; 0x9c2 <vfprintf+0x154>
 99c:	28 01       	movw	r4, r16
 99e:	f2 e0       	ldi	r31, 0x02	; 2
 9a0:	4f 0e       	add	r4, r31
 9a2:	51 1c       	adc	r5, r1
 9a4:	f8 01       	movw	r30, r16
 9a6:	a0 80       	ld	r10, Z
 9a8:	b1 80       	ldd	r11, Z+1	; 0x01
 9aa:	36 fe       	sbrs	r3, 6
 9ac:	03 c0       	rjmp	.+6      	; 0x9b4 <vfprintf+0x146>
 9ae:	69 2d       	mov	r22, r9
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <vfprintf+0x14a>
 9b4:	6f ef       	ldi	r22, 0xFF	; 255
 9b6:	7f ef       	ldi	r23, 0xFF	; 255
 9b8:	c5 01       	movw	r24, r10
 9ba:	0e 94 23 06 	call	0xc46	; 0xc46 <strnlen>
 9be:	4c 01       	movw	r8, r24
 9c0:	82 01       	movw	r16, r4
 9c2:	f3 2d       	mov	r31, r3
 9c4:	ff 77       	andi	r31, 0x7F	; 127
 9c6:	3f 2e       	mov	r3, r31
 9c8:	16 c0       	rjmp	.+44     	; 0x9f6 <vfprintf+0x188>
 9ca:	28 01       	movw	r4, r16
 9cc:	22 e0       	ldi	r18, 0x02	; 2
 9ce:	42 0e       	add	r4, r18
 9d0:	51 1c       	adc	r5, r1
 9d2:	f8 01       	movw	r30, r16
 9d4:	a0 80       	ld	r10, Z
 9d6:	b1 80       	ldd	r11, Z+1	; 0x01
 9d8:	36 fe       	sbrs	r3, 6
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <vfprintf+0x174>
 9dc:	69 2d       	mov	r22, r9
 9de:	70 e0       	ldi	r23, 0x00	; 0
 9e0:	02 c0       	rjmp	.+4      	; 0x9e6 <vfprintf+0x178>
 9e2:	6f ef       	ldi	r22, 0xFF	; 255
 9e4:	7f ef       	ldi	r23, 0xFF	; 255
 9e6:	c5 01       	movw	r24, r10
 9e8:	0e 94 18 06 	call	0xc30	; 0xc30 <strnlen_P>
 9ec:	4c 01       	movw	r8, r24
 9ee:	f3 2d       	mov	r31, r3
 9f0:	f0 68       	ori	r31, 0x80	; 128
 9f2:	3f 2e       	mov	r3, r31
 9f4:	82 01       	movw	r16, r4
 9f6:	33 fc       	sbrc	r3, 3
 9f8:	1b c0       	rjmp	.+54     	; 0xa30 <vfprintf+0x1c2>
 9fa:	82 2d       	mov	r24, r2
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	88 16       	cp	r8, r24
 a00:	99 06       	cpc	r9, r25
 a02:	b0 f4       	brcc	.+44     	; 0xa30 <vfprintf+0x1c2>
 a04:	b6 01       	movw	r22, r12
 a06:	80 e2       	ldi	r24, 0x20	; 32
 a08:	90 e0       	ldi	r25, 0x00	; 0
 a0a:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 a0e:	2a 94       	dec	r2
 a10:	f4 cf       	rjmp	.-24     	; 0x9fa <vfprintf+0x18c>
 a12:	f5 01       	movw	r30, r10
 a14:	37 fc       	sbrc	r3, 7
 a16:	85 91       	lpm	r24, Z+
 a18:	37 fe       	sbrs	r3, 7
 a1a:	81 91       	ld	r24, Z+
 a1c:	5f 01       	movw	r10, r30
 a1e:	b6 01       	movw	r22, r12
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 a26:	21 10       	cpse	r2, r1
 a28:	2a 94       	dec	r2
 a2a:	21 e0       	ldi	r18, 0x01	; 1
 a2c:	82 1a       	sub	r8, r18
 a2e:	91 08       	sbc	r9, r1
 a30:	81 14       	cp	r8, r1
 a32:	91 04       	cpc	r9, r1
 a34:	71 f7       	brne	.-36     	; 0xa12 <vfprintf+0x1a4>
 a36:	e8 c0       	rjmp	.+464    	; 0xc08 <vfprintf+0x39a>
 a38:	84 36       	cpi	r24, 0x64	; 100
 a3a:	11 f0       	breq	.+4      	; 0xa40 <vfprintf+0x1d2>
 a3c:	89 36       	cpi	r24, 0x69	; 105
 a3e:	41 f5       	brne	.+80     	; 0xa90 <vfprintf+0x222>
 a40:	f8 01       	movw	r30, r16
 a42:	37 fe       	sbrs	r3, 7
 a44:	07 c0       	rjmp	.+14     	; 0xa54 <vfprintf+0x1e6>
 a46:	60 81       	ld	r22, Z
 a48:	71 81       	ldd	r23, Z+1	; 0x01
 a4a:	82 81       	ldd	r24, Z+2	; 0x02
 a4c:	93 81       	ldd	r25, Z+3	; 0x03
 a4e:	0c 5f       	subi	r16, 0xFC	; 252
 a50:	1f 4f       	sbci	r17, 0xFF	; 255
 a52:	08 c0       	rjmp	.+16     	; 0xa64 <vfprintf+0x1f6>
 a54:	60 81       	ld	r22, Z
 a56:	71 81       	ldd	r23, Z+1	; 0x01
 a58:	07 2e       	mov	r0, r23
 a5a:	00 0c       	add	r0, r0
 a5c:	88 0b       	sbc	r24, r24
 a5e:	99 0b       	sbc	r25, r25
 a60:	0e 5f       	subi	r16, 0xFE	; 254
 a62:	1f 4f       	sbci	r17, 0xFF	; 255
 a64:	f3 2d       	mov	r31, r3
 a66:	ff 76       	andi	r31, 0x6F	; 111
 a68:	3f 2e       	mov	r3, r31
 a6a:	97 ff       	sbrs	r25, 7
 a6c:	09 c0       	rjmp	.+18     	; 0xa80 <vfprintf+0x212>
 a6e:	90 95       	com	r25
 a70:	80 95       	com	r24
 a72:	70 95       	com	r23
 a74:	61 95       	neg	r22
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	f0 68       	ori	r31, 0x80	; 128
 a7e:	3f 2e       	mov	r3, r31
 a80:	2a e0       	ldi	r18, 0x0A	; 10
 a82:	30 e0       	ldi	r19, 0x00	; 0
 a84:	a3 01       	movw	r20, r6
 a86:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__ultoa_invert>
 a8a:	88 2e       	mov	r8, r24
 a8c:	86 18       	sub	r8, r6
 a8e:	45 c0       	rjmp	.+138    	; 0xb1a <vfprintf+0x2ac>
 a90:	85 37       	cpi	r24, 0x75	; 117
 a92:	31 f4       	brne	.+12     	; 0xaa0 <vfprintf+0x232>
 a94:	23 2d       	mov	r18, r3
 a96:	2f 7e       	andi	r18, 0xEF	; 239
 a98:	b2 2e       	mov	r11, r18
 a9a:	2a e0       	ldi	r18, 0x0A	; 10
 a9c:	30 e0       	ldi	r19, 0x00	; 0
 a9e:	25 c0       	rjmp	.+74     	; 0xaea <vfprintf+0x27c>
 aa0:	93 2d       	mov	r25, r3
 aa2:	99 7f       	andi	r25, 0xF9	; 249
 aa4:	b9 2e       	mov	r11, r25
 aa6:	8f 36       	cpi	r24, 0x6F	; 111
 aa8:	c1 f0       	breq	.+48     	; 0xada <vfprintf+0x26c>
 aaa:	18 f4       	brcc	.+6      	; 0xab2 <vfprintf+0x244>
 aac:	88 35       	cpi	r24, 0x58	; 88
 aae:	79 f0       	breq	.+30     	; 0xace <vfprintf+0x260>
 ab0:	b5 c0       	rjmp	.+362    	; 0xc1c <vfprintf+0x3ae>
 ab2:	80 37       	cpi	r24, 0x70	; 112
 ab4:	19 f0       	breq	.+6      	; 0xabc <vfprintf+0x24e>
 ab6:	88 37       	cpi	r24, 0x78	; 120
 ab8:	21 f0       	breq	.+8      	; 0xac2 <vfprintf+0x254>
 aba:	b0 c0       	rjmp	.+352    	; 0xc1c <vfprintf+0x3ae>
 abc:	e9 2f       	mov	r30, r25
 abe:	e0 61       	ori	r30, 0x10	; 16
 ac0:	be 2e       	mov	r11, r30
 ac2:	b4 fe       	sbrs	r11, 4
 ac4:	0d c0       	rjmp	.+26     	; 0xae0 <vfprintf+0x272>
 ac6:	fb 2d       	mov	r31, r11
 ac8:	f4 60       	ori	r31, 0x04	; 4
 aca:	bf 2e       	mov	r11, r31
 acc:	09 c0       	rjmp	.+18     	; 0xae0 <vfprintf+0x272>
 ace:	34 fe       	sbrs	r3, 4
 ad0:	0a c0       	rjmp	.+20     	; 0xae6 <vfprintf+0x278>
 ad2:	29 2f       	mov	r18, r25
 ad4:	26 60       	ori	r18, 0x06	; 6
 ad6:	b2 2e       	mov	r11, r18
 ad8:	06 c0       	rjmp	.+12     	; 0xae6 <vfprintf+0x278>
 ada:	28 e0       	ldi	r18, 0x08	; 8
 adc:	30 e0       	ldi	r19, 0x00	; 0
 ade:	05 c0       	rjmp	.+10     	; 0xaea <vfprintf+0x27c>
 ae0:	20 e1       	ldi	r18, 0x10	; 16
 ae2:	30 e0       	ldi	r19, 0x00	; 0
 ae4:	02 c0       	rjmp	.+4      	; 0xaea <vfprintf+0x27c>
 ae6:	20 e1       	ldi	r18, 0x10	; 16
 ae8:	32 e0       	ldi	r19, 0x02	; 2
 aea:	f8 01       	movw	r30, r16
 aec:	b7 fe       	sbrs	r11, 7
 aee:	07 c0       	rjmp	.+14     	; 0xafe <vfprintf+0x290>
 af0:	60 81       	ld	r22, Z
 af2:	71 81       	ldd	r23, Z+1	; 0x01
 af4:	82 81       	ldd	r24, Z+2	; 0x02
 af6:	93 81       	ldd	r25, Z+3	; 0x03
 af8:	0c 5f       	subi	r16, 0xFC	; 252
 afa:	1f 4f       	sbci	r17, 0xFF	; 255
 afc:	06 c0       	rjmp	.+12     	; 0xb0a <vfprintf+0x29c>
 afe:	60 81       	ld	r22, Z
 b00:	71 81       	ldd	r23, Z+1	; 0x01
 b02:	80 e0       	ldi	r24, 0x00	; 0
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	0e 5f       	subi	r16, 0xFE	; 254
 b08:	1f 4f       	sbci	r17, 0xFF	; 255
 b0a:	a3 01       	movw	r20, r6
 b0c:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <__ultoa_invert>
 b10:	88 2e       	mov	r8, r24
 b12:	86 18       	sub	r8, r6
 b14:	fb 2d       	mov	r31, r11
 b16:	ff 77       	andi	r31, 0x7F	; 127
 b18:	3f 2e       	mov	r3, r31
 b1a:	36 fe       	sbrs	r3, 6
 b1c:	0d c0       	rjmp	.+26     	; 0xb38 <vfprintf+0x2ca>
 b1e:	23 2d       	mov	r18, r3
 b20:	2e 7f       	andi	r18, 0xFE	; 254
 b22:	a2 2e       	mov	r10, r18
 b24:	89 14       	cp	r8, r9
 b26:	58 f4       	brcc	.+22     	; 0xb3e <vfprintf+0x2d0>
 b28:	34 fe       	sbrs	r3, 4
 b2a:	0b c0       	rjmp	.+22     	; 0xb42 <vfprintf+0x2d4>
 b2c:	32 fc       	sbrc	r3, 2
 b2e:	09 c0       	rjmp	.+18     	; 0xb42 <vfprintf+0x2d4>
 b30:	83 2d       	mov	r24, r3
 b32:	8e 7e       	andi	r24, 0xEE	; 238
 b34:	a8 2e       	mov	r10, r24
 b36:	05 c0       	rjmp	.+10     	; 0xb42 <vfprintf+0x2d4>
 b38:	b8 2c       	mov	r11, r8
 b3a:	a3 2c       	mov	r10, r3
 b3c:	03 c0       	rjmp	.+6      	; 0xb44 <vfprintf+0x2d6>
 b3e:	b8 2c       	mov	r11, r8
 b40:	01 c0       	rjmp	.+2      	; 0xb44 <vfprintf+0x2d6>
 b42:	b9 2c       	mov	r11, r9
 b44:	a4 fe       	sbrs	r10, 4
 b46:	0f c0       	rjmp	.+30     	; 0xb66 <vfprintf+0x2f8>
 b48:	fe 01       	movw	r30, r28
 b4a:	e8 0d       	add	r30, r8
 b4c:	f1 1d       	adc	r31, r1
 b4e:	80 81       	ld	r24, Z
 b50:	80 33       	cpi	r24, 0x30	; 48
 b52:	21 f4       	brne	.+8      	; 0xb5c <vfprintf+0x2ee>
 b54:	9a 2d       	mov	r25, r10
 b56:	99 7e       	andi	r25, 0xE9	; 233
 b58:	a9 2e       	mov	r10, r25
 b5a:	09 c0       	rjmp	.+18     	; 0xb6e <vfprintf+0x300>
 b5c:	a2 fe       	sbrs	r10, 2
 b5e:	06 c0       	rjmp	.+12     	; 0xb6c <vfprintf+0x2fe>
 b60:	b3 94       	inc	r11
 b62:	b3 94       	inc	r11
 b64:	04 c0       	rjmp	.+8      	; 0xb6e <vfprintf+0x300>
 b66:	8a 2d       	mov	r24, r10
 b68:	86 78       	andi	r24, 0x86	; 134
 b6a:	09 f0       	breq	.+2      	; 0xb6e <vfprintf+0x300>
 b6c:	b3 94       	inc	r11
 b6e:	a3 fc       	sbrc	r10, 3
 b70:	11 c0       	rjmp	.+34     	; 0xb94 <vfprintf+0x326>
 b72:	a0 fe       	sbrs	r10, 0
 b74:	06 c0       	rjmp	.+12     	; 0xb82 <vfprintf+0x314>
 b76:	b2 14       	cp	r11, r2
 b78:	88 f4       	brcc	.+34     	; 0xb9c <vfprintf+0x32e>
 b7a:	28 0c       	add	r2, r8
 b7c:	92 2c       	mov	r9, r2
 b7e:	9b 18       	sub	r9, r11
 b80:	0e c0       	rjmp	.+28     	; 0xb9e <vfprintf+0x330>
 b82:	b2 14       	cp	r11, r2
 b84:	60 f4       	brcc	.+24     	; 0xb9e <vfprintf+0x330>
 b86:	b6 01       	movw	r22, r12
 b88:	80 e2       	ldi	r24, 0x20	; 32
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 b90:	b3 94       	inc	r11
 b92:	f7 cf       	rjmp	.-18     	; 0xb82 <vfprintf+0x314>
 b94:	b2 14       	cp	r11, r2
 b96:	18 f4       	brcc	.+6      	; 0xb9e <vfprintf+0x330>
 b98:	2b 18       	sub	r2, r11
 b9a:	02 c0       	rjmp	.+4      	; 0xba0 <vfprintf+0x332>
 b9c:	98 2c       	mov	r9, r8
 b9e:	21 2c       	mov	r2, r1
 ba0:	a4 fe       	sbrs	r10, 4
 ba2:	10 c0       	rjmp	.+32     	; 0xbc4 <vfprintf+0x356>
 ba4:	b6 01       	movw	r22, r12
 ba6:	80 e3       	ldi	r24, 0x30	; 48
 ba8:	90 e0       	ldi	r25, 0x00	; 0
 baa:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 bae:	a2 fe       	sbrs	r10, 2
 bb0:	17 c0       	rjmp	.+46     	; 0xbe0 <vfprintf+0x372>
 bb2:	a1 fc       	sbrc	r10, 1
 bb4:	03 c0       	rjmp	.+6      	; 0xbbc <vfprintf+0x34e>
 bb6:	88 e7       	ldi	r24, 0x78	; 120
 bb8:	90 e0       	ldi	r25, 0x00	; 0
 bba:	02 c0       	rjmp	.+4      	; 0xbc0 <vfprintf+0x352>
 bbc:	88 e5       	ldi	r24, 0x58	; 88
 bbe:	90 e0       	ldi	r25, 0x00	; 0
 bc0:	b6 01       	movw	r22, r12
 bc2:	0c c0       	rjmp	.+24     	; 0xbdc <vfprintf+0x36e>
 bc4:	8a 2d       	mov	r24, r10
 bc6:	86 78       	andi	r24, 0x86	; 134
 bc8:	59 f0       	breq	.+22     	; 0xbe0 <vfprintf+0x372>
 bca:	a1 fe       	sbrs	r10, 1
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <vfprintf+0x364>
 bce:	8b e2       	ldi	r24, 0x2B	; 43
 bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <vfprintf+0x366>
 bd2:	80 e2       	ldi	r24, 0x20	; 32
 bd4:	a7 fc       	sbrc	r10, 7
 bd6:	8d e2       	ldi	r24, 0x2D	; 45
 bd8:	b6 01       	movw	r22, r12
 bda:	90 e0       	ldi	r25, 0x00	; 0
 bdc:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 be0:	89 14       	cp	r8, r9
 be2:	38 f4       	brcc	.+14     	; 0xbf2 <vfprintf+0x384>
 be4:	b6 01       	movw	r22, r12
 be6:	80 e3       	ldi	r24, 0x30	; 48
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 bee:	9a 94       	dec	r9
 bf0:	f7 cf       	rjmp	.-18     	; 0xbe0 <vfprintf+0x372>
 bf2:	8a 94       	dec	r8
 bf4:	f3 01       	movw	r30, r6
 bf6:	e8 0d       	add	r30, r8
 bf8:	f1 1d       	adc	r31, r1
 bfa:	80 81       	ld	r24, Z
 bfc:	b6 01       	movw	r22, r12
 bfe:	90 e0       	ldi	r25, 0x00	; 0
 c00:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 c04:	81 10       	cpse	r8, r1
 c06:	f5 cf       	rjmp	.-22     	; 0xbf2 <vfprintf+0x384>
 c08:	22 20       	and	r2, r2
 c0a:	09 f4       	brne	.+2      	; 0xc0e <vfprintf+0x3a0>
 c0c:	42 ce       	rjmp	.-892    	; 0x892 <vfprintf+0x24>
 c0e:	b6 01       	movw	r22, r12
 c10:	80 e2       	ldi	r24, 0x20	; 32
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 2e 06 	call	0xc5c	; 0xc5c <fputc>
 c18:	2a 94       	dec	r2
 c1a:	f6 cf       	rjmp	.-20     	; 0xc08 <vfprintf+0x39a>
 c1c:	f6 01       	movw	r30, r12
 c1e:	86 81       	ldd	r24, Z+6	; 0x06
 c20:	97 81       	ldd	r25, Z+7	; 0x07
 c22:	02 c0       	rjmp	.+4      	; 0xc28 <vfprintf+0x3ba>
 c24:	8f ef       	ldi	r24, 0xFF	; 255
 c26:	9f ef       	ldi	r25, 0xFF	; 255
 c28:	2b 96       	adiw	r28, 0x0b	; 11
 c2a:	e2 e1       	ldi	r30, 0x12	; 18
 c2c:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__epilogue_restores__>

00000c30 <strnlen_P>:
 c30:	fc 01       	movw	r30, r24
 c32:	05 90       	lpm	r0, Z+
 c34:	61 50       	subi	r22, 0x01	; 1
 c36:	70 40       	sbci	r23, 0x00	; 0
 c38:	01 10       	cpse	r0, r1
 c3a:	d8 f7       	brcc	.-10     	; 0xc32 <strnlen_P+0x2>
 c3c:	80 95       	com	r24
 c3e:	90 95       	com	r25
 c40:	8e 0f       	add	r24, r30
 c42:	9f 1f       	adc	r25, r31
 c44:	08 95       	ret

00000c46 <strnlen>:
 c46:	fc 01       	movw	r30, r24
 c48:	61 50       	subi	r22, 0x01	; 1
 c4a:	70 40       	sbci	r23, 0x00	; 0
 c4c:	01 90       	ld	r0, Z+
 c4e:	01 10       	cpse	r0, r1
 c50:	d8 f7       	brcc	.-10     	; 0xc48 <strnlen+0x2>
 c52:	80 95       	com	r24
 c54:	90 95       	com	r25
 c56:	8e 0f       	add	r24, r30
 c58:	9f 1f       	adc	r25, r31
 c5a:	08 95       	ret

00000c5c <fputc>:
 c5c:	0f 93       	push	r16
 c5e:	1f 93       	push	r17
 c60:	cf 93       	push	r28
 c62:	df 93       	push	r29
 c64:	fb 01       	movw	r30, r22
 c66:	23 81       	ldd	r18, Z+3	; 0x03
 c68:	21 fd       	sbrc	r18, 1
 c6a:	03 c0       	rjmp	.+6      	; 0xc72 <fputc+0x16>
 c6c:	8f ef       	ldi	r24, 0xFF	; 255
 c6e:	9f ef       	ldi	r25, 0xFF	; 255
 c70:	2c c0       	rjmp	.+88     	; 0xcca <fputc+0x6e>
 c72:	22 ff       	sbrs	r18, 2
 c74:	16 c0       	rjmp	.+44     	; 0xca2 <fputc+0x46>
 c76:	46 81       	ldd	r20, Z+6	; 0x06
 c78:	57 81       	ldd	r21, Z+7	; 0x07
 c7a:	24 81       	ldd	r18, Z+4	; 0x04
 c7c:	35 81       	ldd	r19, Z+5	; 0x05
 c7e:	42 17       	cp	r20, r18
 c80:	53 07       	cpc	r21, r19
 c82:	44 f4       	brge	.+16     	; 0xc94 <fputc+0x38>
 c84:	a0 81       	ld	r26, Z
 c86:	b1 81       	ldd	r27, Z+1	; 0x01
 c88:	9d 01       	movw	r18, r26
 c8a:	2f 5f       	subi	r18, 0xFF	; 255
 c8c:	3f 4f       	sbci	r19, 0xFF	; 255
 c8e:	31 83       	std	Z+1, r19	; 0x01
 c90:	20 83       	st	Z, r18
 c92:	8c 93       	st	X, r24
 c94:	26 81       	ldd	r18, Z+6	; 0x06
 c96:	37 81       	ldd	r19, Z+7	; 0x07
 c98:	2f 5f       	subi	r18, 0xFF	; 255
 c9a:	3f 4f       	sbci	r19, 0xFF	; 255
 c9c:	37 83       	std	Z+7, r19	; 0x07
 c9e:	26 83       	std	Z+6, r18	; 0x06
 ca0:	14 c0       	rjmp	.+40     	; 0xcca <fputc+0x6e>
 ca2:	8b 01       	movw	r16, r22
 ca4:	ec 01       	movw	r28, r24
 ca6:	fb 01       	movw	r30, r22
 ca8:	00 84       	ldd	r0, Z+8	; 0x08
 caa:	f1 85       	ldd	r31, Z+9	; 0x09
 cac:	e0 2d       	mov	r30, r0
 cae:	09 95       	icall
 cb0:	89 2b       	or	r24, r25
 cb2:	e1 f6       	brne	.-72     	; 0xc6c <fputc+0x10>
 cb4:	d8 01       	movw	r26, r16
 cb6:	16 96       	adiw	r26, 0x06	; 6
 cb8:	8d 91       	ld	r24, X+
 cba:	9c 91       	ld	r25, X
 cbc:	17 97       	sbiw	r26, 0x07	; 7
 cbe:	01 96       	adiw	r24, 0x01	; 1
 cc0:	17 96       	adiw	r26, 0x07	; 7
 cc2:	9c 93       	st	X, r25
 cc4:	8e 93       	st	-X, r24
 cc6:	16 97       	sbiw	r26, 0x06	; 6
 cc8:	ce 01       	movw	r24, r28
 cca:	df 91       	pop	r29
 ccc:	cf 91       	pop	r28
 cce:	1f 91       	pop	r17
 cd0:	0f 91       	pop	r16
 cd2:	08 95       	ret

00000cd4 <__ultoa_invert>:
 cd4:	fa 01       	movw	r30, r20
 cd6:	aa 27       	eor	r26, r26
 cd8:	28 30       	cpi	r18, 0x08	; 8
 cda:	51 f1       	breq	.+84     	; 0xd30 <__ultoa_invert+0x5c>
 cdc:	20 31       	cpi	r18, 0x10	; 16
 cde:	81 f1       	breq	.+96     	; 0xd40 <__ultoa_invert+0x6c>
 ce0:	e8 94       	clt
 ce2:	6f 93       	push	r22
 ce4:	6e 7f       	andi	r22, 0xFE	; 254
 ce6:	6e 5f       	subi	r22, 0xFE	; 254
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	af 4f       	sbci	r26, 0xFF	; 255
 cf0:	b1 e0       	ldi	r27, 0x01	; 1
 cf2:	3e d0       	rcall	.+124    	; 0xd70 <__ultoa_invert+0x9c>
 cf4:	b4 e0       	ldi	r27, 0x04	; 4
 cf6:	3c d0       	rcall	.+120    	; 0xd70 <__ultoa_invert+0x9c>
 cf8:	67 0f       	add	r22, r23
 cfa:	78 1f       	adc	r23, r24
 cfc:	89 1f       	adc	r24, r25
 cfe:	9a 1f       	adc	r25, r26
 d00:	a1 1d       	adc	r26, r1
 d02:	68 0f       	add	r22, r24
 d04:	79 1f       	adc	r23, r25
 d06:	8a 1f       	adc	r24, r26
 d08:	91 1d       	adc	r25, r1
 d0a:	a1 1d       	adc	r26, r1
 d0c:	6a 0f       	add	r22, r26
 d0e:	71 1d       	adc	r23, r1
 d10:	81 1d       	adc	r24, r1
 d12:	91 1d       	adc	r25, r1
 d14:	a1 1d       	adc	r26, r1
 d16:	20 d0       	rcall	.+64     	; 0xd58 <__ultoa_invert+0x84>
 d18:	09 f4       	brne	.+2      	; 0xd1c <__ultoa_invert+0x48>
 d1a:	68 94       	set
 d1c:	3f 91       	pop	r19
 d1e:	2a e0       	ldi	r18, 0x0A	; 10
 d20:	26 9f       	mul	r18, r22
 d22:	11 24       	eor	r1, r1
 d24:	30 19       	sub	r19, r0
 d26:	30 5d       	subi	r19, 0xD0	; 208
 d28:	31 93       	st	Z+, r19
 d2a:	de f6       	brtc	.-74     	; 0xce2 <__ultoa_invert+0xe>
 d2c:	cf 01       	movw	r24, r30
 d2e:	08 95       	ret
 d30:	46 2f       	mov	r20, r22
 d32:	47 70       	andi	r20, 0x07	; 7
 d34:	40 5d       	subi	r20, 0xD0	; 208
 d36:	41 93       	st	Z+, r20
 d38:	b3 e0       	ldi	r27, 0x03	; 3
 d3a:	0f d0       	rcall	.+30     	; 0xd5a <__ultoa_invert+0x86>
 d3c:	c9 f7       	brne	.-14     	; 0xd30 <__ultoa_invert+0x5c>
 d3e:	f6 cf       	rjmp	.-20     	; 0xd2c <__ultoa_invert+0x58>
 d40:	46 2f       	mov	r20, r22
 d42:	4f 70       	andi	r20, 0x0F	; 15
 d44:	40 5d       	subi	r20, 0xD0	; 208
 d46:	4a 33       	cpi	r20, 0x3A	; 58
 d48:	18 f0       	brcs	.+6      	; 0xd50 <__ultoa_invert+0x7c>
 d4a:	49 5d       	subi	r20, 0xD9	; 217
 d4c:	31 fd       	sbrc	r19, 1
 d4e:	40 52       	subi	r20, 0x20	; 32
 d50:	41 93       	st	Z+, r20
 d52:	02 d0       	rcall	.+4      	; 0xd58 <__ultoa_invert+0x84>
 d54:	a9 f7       	brne	.-22     	; 0xd40 <__ultoa_invert+0x6c>
 d56:	ea cf       	rjmp	.-44     	; 0xd2c <__ultoa_invert+0x58>
 d58:	b4 e0       	ldi	r27, 0x04	; 4
 d5a:	a6 95       	lsr	r26
 d5c:	97 95       	ror	r25
 d5e:	87 95       	ror	r24
 d60:	77 95       	ror	r23
 d62:	67 95       	ror	r22
 d64:	ba 95       	dec	r27
 d66:	c9 f7       	brne	.-14     	; 0xd5a <__ultoa_invert+0x86>
 d68:	00 97       	sbiw	r24, 0x00	; 0
 d6a:	61 05       	cpc	r22, r1
 d6c:	71 05       	cpc	r23, r1
 d6e:	08 95       	ret
 d70:	9b 01       	movw	r18, r22
 d72:	ac 01       	movw	r20, r24
 d74:	0a 2e       	mov	r0, r26
 d76:	06 94       	lsr	r0
 d78:	57 95       	ror	r21
 d7a:	47 95       	ror	r20
 d7c:	37 95       	ror	r19
 d7e:	27 95       	ror	r18
 d80:	ba 95       	dec	r27
 d82:	c9 f7       	brne	.-14     	; 0xd76 <__ultoa_invert+0xa2>
 d84:	62 0f       	add	r22, r18
 d86:	73 1f       	adc	r23, r19
 d88:	84 1f       	adc	r24, r20
 d8a:	95 1f       	adc	r25, r21
 d8c:	a0 1d       	adc	r26, r0
 d8e:	08 95       	ret

00000d90 <__prologue_saves__>:
 d90:	2f 92       	push	r2
 d92:	3f 92       	push	r3
 d94:	4f 92       	push	r4
 d96:	5f 92       	push	r5
 d98:	6f 92       	push	r6
 d9a:	7f 92       	push	r7
 d9c:	8f 92       	push	r8
 d9e:	9f 92       	push	r9
 da0:	af 92       	push	r10
 da2:	bf 92       	push	r11
 da4:	cf 92       	push	r12
 da6:	df 92       	push	r13
 da8:	ef 92       	push	r14
 daa:	ff 92       	push	r15
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	cd b7       	in	r28, 0x3d	; 61
 db6:	de b7       	in	r29, 0x3e	; 62
 db8:	ca 1b       	sub	r28, r26
 dba:	db 0b       	sbc	r29, r27
 dbc:	0f b6       	in	r0, 0x3f	; 63
 dbe:	f8 94       	cli
 dc0:	de bf       	out	0x3e, r29	; 62
 dc2:	0f be       	out	0x3f, r0	; 63
 dc4:	cd bf       	out	0x3d, r28	; 61
 dc6:	09 94       	ijmp

00000dc8 <__epilogue_restores__>:
 dc8:	2a 88       	ldd	r2, Y+18	; 0x12
 dca:	39 88       	ldd	r3, Y+17	; 0x11
 dcc:	48 88       	ldd	r4, Y+16	; 0x10
 dce:	5f 84       	ldd	r5, Y+15	; 0x0f
 dd0:	6e 84       	ldd	r6, Y+14	; 0x0e
 dd2:	7d 84       	ldd	r7, Y+13	; 0x0d
 dd4:	8c 84       	ldd	r8, Y+12	; 0x0c
 dd6:	9b 84       	ldd	r9, Y+11	; 0x0b
 dd8:	aa 84       	ldd	r10, Y+10	; 0x0a
 dda:	b9 84       	ldd	r11, Y+9	; 0x09
 ddc:	c8 84       	ldd	r12, Y+8	; 0x08
 dde:	df 80       	ldd	r13, Y+7	; 0x07
 de0:	ee 80       	ldd	r14, Y+6	; 0x06
 de2:	fd 80       	ldd	r15, Y+5	; 0x05
 de4:	0c 81       	ldd	r16, Y+4	; 0x04
 de6:	1b 81       	ldd	r17, Y+3	; 0x03
 de8:	aa 81       	ldd	r26, Y+2	; 0x02
 dea:	b9 81       	ldd	r27, Y+1	; 0x01
 dec:	ce 0f       	add	r28, r30
 dee:	d1 1d       	adc	r29, r1
 df0:	0f b6       	in	r0, 0x3f	; 63
 df2:	f8 94       	cli
 df4:	de bf       	out	0x3e, r29	; 62
 df6:	0f be       	out	0x3f, r0	; 63
 df8:	cd bf       	out	0x3d, r28	; 61
 dfa:	ed 01       	movw	r28, r26
 dfc:	08 95       	ret

00000dfe <_exit>:
 dfe:	f8 94       	cli

00000e00 <__stop_program>:
 e00:	ff cf       	rjmp	.-2      	; 0xe00 <__stop_program>
