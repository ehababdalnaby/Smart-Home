
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000042  00800060  00000e3a  00000ece  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006b  008000a2  008000a2  00000f10  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003623  00000000  00000000  00001210  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eff  00000000  00000000  00004833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000012f0  00000000  00000000  00005732  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000052c  00000000  00000000  00006a24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a0  00000000  00000000  00006f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000130b  00000000  00000000  000077f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008afb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 21 03 	jmp	0x642	; 0x642 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 46 03 	jmp	0x68c	; 0x68c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e3       	ldi	r30, 0x3A	; 58
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 3a       	cpi	r26, 0xA2	; 162
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a2 ea       	ldi	r26, 0xA2	; 162
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 30       	cpi	r26, 0x0D	; 13
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 1b 07 	jmp	0xe36	; 0xe36 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#ifndef INCLUDES_H_
#error define includes.h file
#endif

int main(){
	Project_Init();
  92:	0e 94 68 03 	call	0x6d0	; 0x6d0 <Project_Init>
	u8 password[5]={0};
		
	while(1)
	{
		//Get_Password(password);	
		AnalogSensors();
  96:	0e 94 89 03 	call	0x712	; 0x712 <AnalogSensors>
  9a:	fd cf       	rjmp	.-6      	; 0x96 <main+0x4>

0000009c <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
  9c:	41 e0       	ldi	r20, 0x01	; 1
  9e:	6f e0       	ldi	r22, 0x0F	; 15
  a0:	87 e3       	ldi	r24, 0x37	; 55
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 12 03 	call	0x624	; 0x624 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	6f e0       	ldi	r22, 0x0F	; 15
  ac:	88 e3       	ldi	r24, 0x38	; 56
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	60 e7       	ldi	r22, 0x70	; 112
  b8:	87 e3       	ldi	r24, 0x37	; 55
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 12 03 	call	0x624	; 0x624 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
  c0:	41 e0       	ldi	r20, 0x01	; 1
  c2:	60 e7       	ldi	r22, 0x70	; 112
  c4:	88 e3       	ldi	r24, 0x38	; 56
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
  cc:	08 95       	ret

000000ce <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
  ce:	61 e0       	ldi	r22, 0x01	; 1
  d0:	83 e0       	ldi	r24, 0x03	; 3
  d2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
  d6:	87 ec       	ldi	r24, 0xC7	; 199
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	01 97       	sbiw	r24, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <LCD_latch+0xc>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <LCD_latch+0x12>
  e0:	00 00       	nop
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	83 e0       	ldi	r24, 0x03	; 3
  e6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
  ea:	87 ec       	ldi	r24, 0xC7	; 199
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_latch+0x20>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_latch+0x26>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <SendToLCD>:
  f8:	cf 93       	push	r28
  fa:	c8 2f       	mov	r28, r24
  fc:	40 e0       	ldi	r20, 0x00	; 0
  fe:	60 ef       	ldi	r22, 0xF0	; 240
 100:	8b e3       	ldi	r24, 0x3B	; 59
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
 108:	6c 2f       	mov	r22, r28
 10a:	60 7f       	andi	r22, 0xF0	; 240
 10c:	41 e0       	ldi	r20, 0x01	; 1
 10e:	8b e3       	ldi	r24, 0x3B	; 59
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
 116:	0e 94 67 00 	call	0xce	; 0xce <LCD_latch>
 11a:	40 e0       	ldi	r20, 0x00	; 0
 11c:	60 ef       	ldi	r22, 0xF0	; 240
 11e:	8b e3       	ldi	r24, 0x3B	; 59
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
 126:	80 e1       	ldi	r24, 0x10	; 16
 128:	c8 9f       	mul	r28, r24
 12a:	b0 01       	movw	r22, r0
 12c:	11 24       	eor	r1, r1
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	8b e3       	ldi	r24, 0x3B	; 59
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
 138:	0e 94 67 00 	call	0xce	; 0xce <LCD_latch>
 13c:	87 ec       	ldi	r24, 0xC7	; 199
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <SendToLCD+0x48>
 144:	00 c0       	rjmp	.+0      	; 0x146 <SendToLCD+0x4e>
 146:	00 00       	nop
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <LCD_send_cmd>:
 14c:	cf 93       	push	r28
 14e:	c8 2f       	mov	r28, r24
 150:	60 e0       	ldi	r22, 0x00	; 0
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
 158:	8c 2f       	mov	r24, r28
 15a:	0e 94 7c 00 	call	0xf8	; 0xf8 <SendToLCD>
 15e:	cf 91       	pop	r28
 160:	08 95       	ret

00000162 <LCD_CLEAR>:
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 168:	8f e3       	ldi	r24, 0x3F	; 63
 16a:	9f e1       	ldi	r25, 0x1F	; 31
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_CLEAR+0xa>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_CLEAR+0x10>
 172:	00 00       	nop
 174:	08 95       	ret

00000176 <LCD_ret_Home>:
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 17c:	8f e3       	ldi	r24, 0x3F	; 63
 17e:	9f e1       	ldi	r25, 0x1F	; 31
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_ret_Home+0xa>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_ret_Home+0x10>
 186:	00 00       	nop
 188:	08 95       	ret

0000018a <LCD_init>:
 18a:	41 e0       	ldi	r20, 0x01	; 1
 18c:	60 ef       	ldi	r22, 0xF0	; 240
 18e:	8a e3       	ldi	r24, 0x3A	; 58
 190:	90 e0       	ldi	r25, 0x00	; 0
 192:	0e 94 12 03 	call	0x624	; 0x624 <pinsDirection>
 196:	41 e0       	ldi	r20, 0x01	; 1
 198:	6c e0       	ldi	r22, 0x0C	; 12
 19a:	8a e3       	ldi	r24, 0x3A	; 58
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	0e 94 12 03 	call	0x624	; 0x624 <pinsDirection>
 1a2:	2f ef       	ldi	r18, 0xFF	; 255
 1a4:	83 ef       	ldi	r24, 0xF3	; 243
 1a6:	91 e0       	ldi	r25, 0x01	; 1
 1a8:	21 50       	subi	r18, 0x01	; 1
 1aa:	80 40       	sbci	r24, 0x00	; 0
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	e1 f7       	brne	.-8      	; 0x1a8 <LCD_init+0x1e>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <LCD_init+0x28>
 1b2:	00 00       	nop
 1b4:	0e 94 bb 00 	call	0x176	; 0x176 <LCD_ret_Home>
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 1be:	8c e0       	ldi	r24, 0x0C	; 12
 1c0:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 1c4:	80 e1       	ldi	r24, 0x10	; 16
 1c6:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 1ca:	88 e2       	ldi	r24, 0x28	; 40
 1cc:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 1d0:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_CLEAR>
 1d4:	08 95       	ret

000001d6 <LCD_send_data>:
 1d6:	cf 93       	push	r28
 1d8:	c8 2f       	mov	r28, r24
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	82 e0       	ldi	r24, 0x02	; 2
 1de:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
 1e2:	8c 2f       	mov	r24, r28
 1e4:	0e 94 7c 00 	call	0xf8	; 0xf8 <SendToLCD>
 1e8:	cf 91       	pop	r28
 1ea:	08 95       	ret

000001ec <disp_char>:
 1ec:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <LCD_send_data>
 1f0:	08 95       	ret

000001f2 <disp_str>:
 1f2:	0f 93       	push	r16
 1f4:	1f 93       	push	r17
 1f6:	cf 93       	push	r28
 1f8:	8c 01       	movw	r16, r24
 1fa:	c0 e0       	ldi	r28, 0x00	; 0
 1fc:	03 c0       	rjmp	.+6      	; 0x204 <disp_str+0x12>
 1fe:	0e 94 f6 00 	call	0x1ec	; 0x1ec <disp_char>
 202:	cf 5f       	subi	r28, 0xFF	; 255
 204:	f8 01       	movw	r30, r16
 206:	ec 0f       	add	r30, r28
 208:	f1 1d       	adc	r31, r1
 20a:	80 81       	ld	r24, Z
 20c:	81 11       	cpse	r24, r1
 20e:	f7 cf       	rjmp	.-18     	; 0x1fe <disp_str+0xc>
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <LCD_GOTXY>:
 218:	81 30       	cpi	r24, 0x01	; 1
 21a:	29 f4       	brne	.+10     	; 0x226 <LCD_GOTXY+0xe>
 21c:	8f e7       	ldi	r24, 0x7F	; 127
 21e:	86 0f       	add	r24, r22
 220:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 224:	08 95       	ret
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	29 f4       	brne	.+10     	; 0x234 <LCD_GOTXY+0x1c>
 22a:	8f eb       	ldi	r24, 0xBF	; 191
 22c:	86 0f       	add	r24, r22
 22e:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 232:	08 95       	ret
 234:	83 30       	cpi	r24, 0x03	; 3
 236:	29 f4       	brne	.+10     	; 0x242 <LCD_GOTXY+0x2a>
 238:	8f e8       	ldi	r24, 0x8F	; 143
 23a:	86 0f       	add	r24, r22
 23c:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 240:	08 95       	ret
 242:	84 30       	cpi	r24, 0x04	; 4
 244:	21 f4       	brne	.+8      	; 0x24e <LCD_GOTXY+0x36>
 246:	8f ec       	ldi	r24, 0xCF	; 207
 248:	86 0f       	add	r24, r22
 24a:	0e 94 a6 00 	call	0x14c	; 0x14c <LCD_send_cmd>
 24e:	08 95       	ret

00000250 <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
 256:	0e 94 0c 01 	call	0x218	; 0x218 <LCD_GOTXY>
	disp_str(str);
 25a:	ce 01       	movw	r24, r28
 25c:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <disp_str>
}
 260:	df 91       	pop	r29
 262:	cf 91       	pop	r28
 264:	08 95       	ret

00000266 <disp_int>:


void disp_int(u32 intvalue)
{
 266:	0f 93       	push	r16
 268:	1f 93       	push	r17
 26a:	cf 93       	push	r28
 26c:	df 93       	push	r29
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	2b 97       	sbiw	r28, 0x0b	; 11
 274:	0f b6       	in	r0, 0x3f	; 63
 276:	f8 94       	cli
 278:	de bf       	out	0x3e, r29	; 62
 27a:	0f be       	out	0x3f, r0	; 63
 27c:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
 27e:	8e 01       	movw	r16, r28
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	2b e0       	ldi	r18, 0x0B	; 11
 286:	f8 01       	movw	r30, r16
 288:	11 92       	st	Z+, r1
 28a:	2a 95       	dec	r18
 28c:	e9 f7       	brne	.-6      	; 0x288 <disp_int+0x22>
		sprintf(string,"%u",intvalue);
 28e:	9f 93       	push	r25
 290:	8f 93       	push	r24
 292:	7f 93       	push	r23
 294:	6f 93       	push	r22
 296:	80 e6       	ldi	r24, 0x60	; 96
 298:	90 e0       	ldi	r25, 0x00	; 0
 29a:	9f 93       	push	r25
 29c:	8f 93       	push	r24
 29e:	1f 93       	push	r17
 2a0:	0f 93       	push	r16
 2a2:	0e 94 31 04 	call	0x862	; 0x862 <sprintf>
		disp_str(string);
 2a6:	c8 01       	movw	r24, r16
 2a8:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <disp_str>
}
 2ac:	0f b6       	in	r0, 0x3f	; 63
 2ae:	f8 94       	cli
 2b0:	de bf       	out	0x3e, r29	; 62
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	cd bf       	out	0x3d, r28	; 61
 2b6:	2b 96       	adiw	r28, 0x0b	; 11
 2b8:	0f b6       	in	r0, 0x3f	; 63
 2ba:	f8 94       	cli
 2bc:	de bf       	out	0x3e, r29	; 62
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	cd bf       	out	0x3d, r28	; 61
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <INT_init>:
	writePins( &SREG,0x80,HIGH );
}

void GLOBAL_INT_DE(void)
{
	writePins( &SREG,0x80,LOW );
 2cc:	9b b7       	in	r25, 0x3b	; 59
 2ce:	21 e0       	ldi	r18, 0x01	; 1
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	08 2e       	mov	r0, r24
 2d4:	02 c0       	rjmp	.+4      	; 0x2da <INT_init+0xe>
 2d6:	22 0f       	add	r18, r18
 2d8:	33 1f       	adc	r19, r19
 2da:	0a 94       	dec	r0
 2dc:	e2 f7       	brpl	.-8      	; 0x2d6 <INT_init+0xa>
 2de:	29 2b       	or	r18, r25
 2e0:	2b bf       	out	0x3b, r18	; 59
 2e2:	86 30       	cpi	r24, 0x06	; 6
 2e4:	a1 f0       	breq	.+40     	; 0x30e <INT_init+0x42>
 2e6:	87 30       	cpi	r24, 0x07	; 7
 2e8:	b1 f0       	breq	.+44     	; 0x316 <INT_init+0x4a>
 2ea:	85 30       	cpi	r24, 0x05	; 5
 2ec:	e1 f4       	brne	.+56     	; 0x326 <INT_init+0x5a>
 2ee:	84 b7       	in	r24, 0x34	; 52
 2f0:	46 2f       	mov	r20, r22
 2f2:	41 70       	andi	r20, 0x01	; 1
 2f4:	50 e0       	ldi	r21, 0x00	; 0
 2f6:	00 24       	eor	r0, r0
 2f8:	56 95       	lsr	r21
 2fa:	47 95       	ror	r20
 2fc:	07 94       	ror	r0
 2fe:	56 95       	lsr	r21
 300:	47 95       	ror	r20
 302:	07 94       	ror	r0
 304:	54 2f       	mov	r21, r20
 306:	40 2d       	mov	r20, r0
 308:	48 2b       	or	r20, r24
 30a:	44 bf       	out	0x34, r20	; 52
 30c:	08 95       	ret
 30e:	85 b7       	in	r24, 0x35	; 53
 310:	68 2b       	or	r22, r24
 312:	65 bf       	out	0x35, r22	; 53
 314:	08 95       	ret
 316:	85 b7       	in	r24, 0x35	; 53
 318:	70 e0       	ldi	r23, 0x00	; 0
 31a:	66 0f       	add	r22, r22
 31c:	77 1f       	adc	r23, r23
 31e:	66 0f       	add	r22, r22
 320:	77 1f       	adc	r23, r23
 322:	68 2b       	or	r22, r24
 324:	65 bf       	out	0x35, r22	; 53
 326:	08 95       	ret

00000328 <GLOBAL_INT_EN>:
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	60 e8       	ldi	r22, 0x80	; 128
 32c:	8f e5       	ldi	r24, 0x5F	; 95
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 03 03 	call	0x606	; 0x606 <writePins>
 334:	08 95       	ret

00000336 <__vector_1>:




ISR(INT0_vect)
{
 336:	1f 92       	push	r1
 338:	0f 92       	push	r0
 33a:	0f b6       	in	r0, 0x3f	; 63
 33c:	0f 92       	push	r0
 33e:	11 24       	eor	r1, r1
 340:	2f 93       	push	r18
 342:	3f 93       	push	r19
 344:	4f 93       	push	r20
 346:	5f 93       	push	r21
 348:	6f 93       	push	r22
 34a:	7f 93       	push	r23
 34c:	8f 93       	push	r24
 34e:	9f 93       	push	r25
 350:	af 93       	push	r26
 352:	bf 93       	push	r27
 354:	ef 93       	push	r30
 356:	ff 93       	push	r31
	ptrINT();
 358:	e0 91 a7 00 	lds	r30, 0x00A7	; 0x8000a7 <ptrINT>
 35c:	f0 91 a8 00 	lds	r31, 0x00A8	; 0x8000a8 <ptrINT+0x1>
 360:	09 95       	icall
 362:	ff 91       	pop	r31
 364:	ef 91       	pop	r30
 366:	bf 91       	pop	r27
 368:	af 91       	pop	r26
 36a:	9f 91       	pop	r25
 36c:	8f 91       	pop	r24
 36e:	7f 91       	pop	r23
 370:	6f 91       	pop	r22
 372:	5f 91       	pop	r21
 374:	4f 91       	pop	r20
 376:	3f 91       	pop	r19
 378:	2f 91       	pop	r18
 37a:	0f 90       	pop	r0
 37c:	0f be       	out	0x3f, r0	; 63
 37e:	0f 90       	pop	r0
 380:	1f 90       	pop	r1
 382:	18 95       	reti

00000384 <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
 384:	87 b1       	in	r24, 0x07	; 7
 386:	80 64       	ori	r24, 0x40	; 64
 388:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
 38a:	86 b1       	in	r24, 0x06	; 6
 38c:	87 68       	ori	r24, 0x87	; 135
 38e:	86 b9       	out	0x06, r24	; 6
 390:	08 95       	ret

00000392 <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
 392:	97 b1       	in	r25, 0x07	; 7
 394:	90 7e       	andi	r25, 0xE0	; 224
 396:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
 398:	97 b1       	in	r25, 0x07	; 7
 39a:	89 2b       	or	r24, r25
 39c:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
 39e:	86 b1       	in	r24, 0x06	; 6
 3a0:	80 64       	ori	r24, 0x40	; 64
 3a2:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
 3a4:	36 99       	sbic	0x06, 6	; 6
 3a6:	fe cf       	rjmp	.-4      	; 0x3a4 <read_analog+0x12>
	return (ADC);		
 3a8:	84 b1       	in	r24, 0x04	; 4
 3aa:	95 b1       	in	r25, 0x05	; 5
}
 3ac:	08 95       	ret

000003ae <writePin>:
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
 3ae:	88 30       	cpi	r24, 0x08	; 8
 3b0:	f8 f4       	brcc	.+62     	; 0x3f0 <writePin+0x42>
 3b2:	61 30       	cpi	r22, 0x01	; 1
 3b4:	69 f4       	brne	.+26     	; 0x3d0 <writePin+0x22>
 3b6:	4b b3       	in	r20, 0x1b	; 27
 3b8:	21 e0       	ldi	r18, 0x01	; 1
 3ba:	30 e0       	ldi	r19, 0x00	; 0
 3bc:	b9 01       	movw	r22, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <writePin+0x16>
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	8a 95       	dec	r24
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <writePin+0x12>
 3c8:	cb 01       	movw	r24, r22
 3ca:	84 2b       	or	r24, r20
 3cc:	8b bb       	out	0x1b, r24	; 27
 3ce:	08 95       	ret
 3d0:	61 11       	cpse	r22, r1
 3d2:	82 c0       	rjmp	.+260    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 3d4:	4b b3       	in	r20, 0x1b	; 27
 3d6:	21 e0       	ldi	r18, 0x01	; 1
 3d8:	30 e0       	ldi	r19, 0x00	; 0
 3da:	b9 01       	movw	r22, r18
 3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <writePin+0x34>
 3de:	66 0f       	add	r22, r22
 3e0:	77 1f       	adc	r23, r23
 3e2:	8a 95       	dec	r24
 3e4:	e2 f7       	brpl	.-8      	; 0x3de <writePin+0x30>
 3e6:	cb 01       	movw	r24, r22
 3e8:	80 95       	com	r24
 3ea:	84 23       	and	r24, r20
 3ec:	8b bb       	out	0x1b, r24	; 27
 3ee:	08 95       	ret
 3f0:	98 ef       	ldi	r25, 0xF8	; 248
 3f2:	98 0f       	add	r25, r24
 3f4:	98 30       	cpi	r25, 0x08	; 8
 3f6:	18 f5       	brcc	.+70     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 3f8:	61 30       	cpi	r22, 0x01	; 1
 3fa:	79 f4       	brne	.+30     	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 3fc:	48 b3       	in	r20, 0x18	; 24
 3fe:	90 e0       	ldi	r25, 0x00	; 0
 400:	08 97       	sbiw	r24, 0x08	; 8
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	8a 95       	dec	r24
 410:	e2 f7       	brpl	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	84 2b       	or	r24, r20
 416:	88 bb       	out	0x18, r24	; 24
 418:	08 95       	ret
 41a:	61 11       	cpse	r22, r1
 41c:	5d c0       	rjmp	.+186    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 41e:	48 b3       	in	r20, 0x18	; 24
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	08 97       	sbiw	r24, 0x08	; 8
 424:	21 e0       	ldi	r18, 0x01	; 1
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	b9 01       	movw	r22, r18
 42a:	02 c0       	rjmp	.+4      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42c:	66 0f       	add	r22, r22
 42e:	77 1f       	adc	r23, r23
 430:	8a 95       	dec	r24
 432:	e2 f7       	brpl	.-8      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 434:	cb 01       	movw	r24, r22
 436:	80 95       	com	r24
 438:	84 23       	and	r24, r20
 43a:	88 bb       	out	0x18, r24	; 24
 43c:	08 95       	ret
 43e:	90 ef       	ldi	r25, 0xF0	; 240
 440:	98 0f       	add	r25, r24
 442:	98 30       	cpi	r25, 0x08	; 8
 444:	18 f5       	brcc	.+70     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
 446:	61 30       	cpi	r22, 0x01	; 1
 448:	79 f4       	brne	.+30     	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 44a:	45 b3       	in	r20, 0x15	; 21
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	40 97       	sbiw	r24, 0x10	; 16
 450:	21 e0       	ldi	r18, 0x01	; 1
 452:	30 e0       	ldi	r19, 0x00	; 0
 454:	b9 01       	movw	r22, r18
 456:	02 c0       	rjmp	.+4      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
 458:	66 0f       	add	r22, r22
 45a:	77 1f       	adc	r23, r23
 45c:	8a 95       	dec	r24
 45e:	e2 f7       	brpl	.-8      	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
 460:	cb 01       	movw	r24, r22
 462:	84 2b       	or	r24, r20
 464:	85 bb       	out	0x15, r24	; 21
 466:	08 95       	ret
 468:	61 11       	cpse	r22, r1
 46a:	36 c0       	rjmp	.+108    	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 46c:	45 b3       	in	r20, 0x15	; 21
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	40 97       	sbiw	r24, 0x10	; 16
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	30 e0       	ldi	r19, 0x00	; 0
 476:	b9 01       	movw	r22, r18
 478:	02 c0       	rjmp	.+4      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	8a 95       	dec	r24
 480:	e2 f7       	brpl	.-8      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
 482:	cb 01       	movw	r24, r22
 484:	80 95       	com	r24
 486:	84 23       	and	r24, r20
 488:	85 bb       	out	0x15, r24	; 21
 48a:	08 95       	ret
 48c:	98 ee       	ldi	r25, 0xE8	; 232
 48e:	98 0f       	add	r25, r24
 490:	98 30       	cpi	r25, 0x08	; 8
 492:	10 f5       	brcc	.+68     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 494:	61 30       	cpi	r22, 0x01	; 1
 496:	79 f4       	brne	.+30     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 498:	42 b3       	in	r20, 0x12	; 18
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	48 97       	sbiw	r24, 0x18	; 24
 49e:	21 e0       	ldi	r18, 0x01	; 1
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	b9 01       	movw	r22, r18
 4a4:	02 c0       	rjmp	.+4      	; 0x4aa <__LOCK_REGION_LENGTH__+0xaa>
 4a6:	66 0f       	add	r22, r22
 4a8:	77 1f       	adc	r23, r23
 4aa:	8a 95       	dec	r24
 4ac:	e2 f7       	brpl	.-8      	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
 4ae:	cb 01       	movw	r24, r22
 4b0:	84 2b       	or	r24, r20
 4b2:	82 bb       	out	0x12, r24	; 18
 4b4:	08 95       	ret
 4b6:	61 11       	cpse	r22, r1
 4b8:	0f c0       	rjmp	.+30     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4ba:	42 b3       	in	r20, 0x12	; 18
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	48 97       	sbiw	r24, 0x18	; 24
 4c0:	21 e0       	ldi	r18, 0x01	; 1
 4c2:	30 e0       	ldi	r19, 0x00	; 0
 4c4:	b9 01       	movw	r22, r18
 4c6:	02 c0       	rjmp	.+4      	; 0x4cc <__LOCK_REGION_LENGTH__+0xcc>
 4c8:	66 0f       	add	r22, r22
 4ca:	77 1f       	adc	r23, r23
 4cc:	8a 95       	dec	r24
 4ce:	e2 f7       	brpl	.-8      	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
 4d0:	cb 01       	movw	r24, r22
 4d2:	80 95       	com	r24
 4d4:	84 23       	and	r24, r20
 4d6:	82 bb       	out	0x12, r24	; 18
 4d8:	08 95       	ret

000004da <pinDirection>:
 4da:	88 30       	cpi	r24, 0x08	; 8
 4dc:	f8 f4       	brcc	.+62     	; 0x51c <pinDirection+0x42>
 4de:	61 30       	cpi	r22, 0x01	; 1
 4e0:	69 f4       	brne	.+26     	; 0x4fc <pinDirection+0x22>
 4e2:	4a b3       	in	r20, 0x1a	; 26
 4e4:	21 e0       	ldi	r18, 0x01	; 1
 4e6:	30 e0       	ldi	r19, 0x00	; 0
 4e8:	b9 01       	movw	r22, r18
 4ea:	02 c0       	rjmp	.+4      	; 0x4f0 <pinDirection+0x16>
 4ec:	66 0f       	add	r22, r22
 4ee:	77 1f       	adc	r23, r23
 4f0:	8a 95       	dec	r24
 4f2:	e2 f7       	brpl	.-8      	; 0x4ec <pinDirection+0x12>
 4f4:	cb 01       	movw	r24, r22
 4f6:	84 2b       	or	r24, r20
 4f8:	8a bb       	out	0x1a, r24	; 26
 4fa:	08 95       	ret
 4fc:	61 11       	cpse	r22, r1
 4fe:	82 c0       	rjmp	.+260    	; 0x604 <pinDirection+0x12a>
 500:	4a b3       	in	r20, 0x1a	; 26
 502:	21 e0       	ldi	r18, 0x01	; 1
 504:	30 e0       	ldi	r19, 0x00	; 0
 506:	b9 01       	movw	r22, r18
 508:	02 c0       	rjmp	.+4      	; 0x50e <pinDirection+0x34>
 50a:	66 0f       	add	r22, r22
 50c:	77 1f       	adc	r23, r23
 50e:	8a 95       	dec	r24
 510:	e2 f7       	brpl	.-8      	; 0x50a <pinDirection+0x30>
 512:	cb 01       	movw	r24, r22
 514:	80 95       	com	r24
 516:	84 23       	and	r24, r20
 518:	8a bb       	out	0x1a, r24	; 26
 51a:	08 95       	ret
 51c:	98 ef       	ldi	r25, 0xF8	; 248
 51e:	98 0f       	add	r25, r24
 520:	98 30       	cpi	r25, 0x08	; 8
 522:	18 f5       	brcc	.+70     	; 0x56a <pinDirection+0x90>
 524:	61 30       	cpi	r22, 0x01	; 1
 526:	79 f4       	brne	.+30     	; 0x546 <pinDirection+0x6c>
 528:	47 b3       	in	r20, 0x17	; 23
 52a:	90 e0       	ldi	r25, 0x00	; 0
 52c:	08 97       	sbiw	r24, 0x08	; 8
 52e:	21 e0       	ldi	r18, 0x01	; 1
 530:	30 e0       	ldi	r19, 0x00	; 0
 532:	b9 01       	movw	r22, r18
 534:	02 c0       	rjmp	.+4      	; 0x53a <pinDirection+0x60>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	8a 95       	dec	r24
 53c:	e2 f7       	brpl	.-8      	; 0x536 <pinDirection+0x5c>
 53e:	cb 01       	movw	r24, r22
 540:	84 2b       	or	r24, r20
 542:	87 bb       	out	0x17, r24	; 23
 544:	08 95       	ret
 546:	61 11       	cpse	r22, r1
 548:	5d c0       	rjmp	.+186    	; 0x604 <pinDirection+0x12a>
 54a:	47 b3       	in	r20, 0x17	; 23
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	08 97       	sbiw	r24, 0x08	; 8
 550:	21 e0       	ldi	r18, 0x01	; 1
 552:	30 e0       	ldi	r19, 0x00	; 0
 554:	b9 01       	movw	r22, r18
 556:	02 c0       	rjmp	.+4      	; 0x55c <pinDirection+0x82>
 558:	66 0f       	add	r22, r22
 55a:	77 1f       	adc	r23, r23
 55c:	8a 95       	dec	r24
 55e:	e2 f7       	brpl	.-8      	; 0x558 <pinDirection+0x7e>
 560:	cb 01       	movw	r24, r22
 562:	80 95       	com	r24
 564:	84 23       	and	r24, r20
 566:	87 bb       	out	0x17, r24	; 23
 568:	08 95       	ret
 56a:	90 ef       	ldi	r25, 0xF0	; 240
 56c:	98 0f       	add	r25, r24
 56e:	98 30       	cpi	r25, 0x08	; 8
 570:	18 f5       	brcc	.+70     	; 0x5b8 <pinDirection+0xde>
 572:	61 30       	cpi	r22, 0x01	; 1
 574:	79 f4       	brne	.+30     	; 0x594 <pinDirection+0xba>
 576:	44 b3       	in	r20, 0x14	; 20
 578:	90 e0       	ldi	r25, 0x00	; 0
 57a:	40 97       	sbiw	r24, 0x10	; 16
 57c:	21 e0       	ldi	r18, 0x01	; 1
 57e:	30 e0       	ldi	r19, 0x00	; 0
 580:	b9 01       	movw	r22, r18
 582:	02 c0       	rjmp	.+4      	; 0x588 <pinDirection+0xae>
 584:	66 0f       	add	r22, r22
 586:	77 1f       	adc	r23, r23
 588:	8a 95       	dec	r24
 58a:	e2 f7       	brpl	.-8      	; 0x584 <pinDirection+0xaa>
 58c:	cb 01       	movw	r24, r22
 58e:	84 2b       	or	r24, r20
 590:	84 bb       	out	0x14, r24	; 20
 592:	08 95       	ret
 594:	61 11       	cpse	r22, r1
 596:	36 c0       	rjmp	.+108    	; 0x604 <pinDirection+0x12a>
 598:	44 b3       	in	r20, 0x14	; 20
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	40 97       	sbiw	r24, 0x10	; 16
 59e:	21 e0       	ldi	r18, 0x01	; 1
 5a0:	30 e0       	ldi	r19, 0x00	; 0
 5a2:	b9 01       	movw	r22, r18
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <pinDirection+0xd0>
 5a6:	66 0f       	add	r22, r22
 5a8:	77 1f       	adc	r23, r23
 5aa:	8a 95       	dec	r24
 5ac:	e2 f7       	brpl	.-8      	; 0x5a6 <pinDirection+0xcc>
 5ae:	cb 01       	movw	r24, r22
 5b0:	80 95       	com	r24
 5b2:	84 23       	and	r24, r20
 5b4:	84 bb       	out	0x14, r24	; 20
 5b6:	08 95       	ret
 5b8:	98 ee       	ldi	r25, 0xE8	; 232
 5ba:	98 0f       	add	r25, r24
 5bc:	98 30       	cpi	r25, 0x08	; 8
 5be:	10 f5       	brcc	.+68     	; 0x604 <pinDirection+0x12a>
 5c0:	61 30       	cpi	r22, 0x01	; 1
 5c2:	79 f4       	brne	.+30     	; 0x5e2 <pinDirection+0x108>
 5c4:	41 b3       	in	r20, 0x11	; 17
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	48 97       	sbiw	r24, 0x18	; 24
 5ca:	21 e0       	ldi	r18, 0x01	; 1
 5cc:	30 e0       	ldi	r19, 0x00	; 0
 5ce:	b9 01       	movw	r22, r18
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <pinDirection+0xfc>
 5d2:	66 0f       	add	r22, r22
 5d4:	77 1f       	adc	r23, r23
 5d6:	8a 95       	dec	r24
 5d8:	e2 f7       	brpl	.-8      	; 0x5d2 <pinDirection+0xf8>
 5da:	cb 01       	movw	r24, r22
 5dc:	84 2b       	or	r24, r20
 5de:	81 bb       	out	0x11, r24	; 17
 5e0:	08 95       	ret
 5e2:	61 11       	cpse	r22, r1
 5e4:	0f c0       	rjmp	.+30     	; 0x604 <pinDirection+0x12a>
 5e6:	41 b3       	in	r20, 0x11	; 17
 5e8:	90 e0       	ldi	r25, 0x00	; 0
 5ea:	48 97       	sbiw	r24, 0x18	; 24
 5ec:	21 e0       	ldi	r18, 0x01	; 1
 5ee:	30 e0       	ldi	r19, 0x00	; 0
 5f0:	b9 01       	movw	r22, r18
 5f2:	02 c0       	rjmp	.+4      	; 0x5f8 <pinDirection+0x11e>
 5f4:	66 0f       	add	r22, r22
 5f6:	77 1f       	adc	r23, r23
 5f8:	8a 95       	dec	r24
 5fa:	e2 f7       	brpl	.-8      	; 0x5f4 <pinDirection+0x11a>
 5fc:	cb 01       	movw	r24, r22
 5fe:	80 95       	com	r24
 600:	84 23       	and	r24, r20
 602:	81 bb       	out	0x11, r24	; 17
 604:	08 95       	ret

00000606 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
 606:	41 30       	cpi	r20, 0x01	; 1
 608:	29 f4       	brne	.+10     	; 0x614 <writePins+0xe>
		SETBits(*port,mask);
 60a:	fc 01       	movw	r30, r24
 60c:	20 81       	ld	r18, Z
 60e:	62 2b       	or	r22, r18
 610:	60 83       	st	Z, r22
 612:	08 95       	ret
	else if(logic==LOW)
 614:	41 11       	cpse	r20, r1
 616:	05 c0       	rjmp	.+10     	; 0x622 <writePins+0x1c>
		CLRBits(*port,mask);
 618:	fc 01       	movw	r30, r24
 61a:	20 81       	ld	r18, Z
 61c:	60 95       	com	r22
 61e:	62 23       	and	r22, r18
 620:	60 83       	st	Z, r22
 622:	08 95       	ret

00000624 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
 624:	41 30       	cpi	r20, 0x01	; 1
 626:	29 f4       	brne	.+10     	; 0x632 <pinsDirection+0xe>
		SETBits(*ddr,mask);
 628:	fc 01       	movw	r30, r24
 62a:	20 81       	ld	r18, Z
 62c:	62 2b       	or	r22, r18
 62e:	60 83       	st	Z, r22
 630:	08 95       	ret
	else if(direction == INPUT)
 632:	41 11       	cpse	r20, r1
 634:	05 c0       	rjmp	.+10     	; 0x640 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
 636:	fc 01       	movw	r30, r24
 638:	20 81       	ld	r18, Z
 63a:	60 95       	com	r22
 63c:	62 23       	and	r22, r18
 63e:	60 83       	st	Z, r22
 640:	08 95       	ret

00000642 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
 642:	1f 92       	push	r1
 644:	0f 92       	push	r0
 646:	0f b6       	in	r0, 0x3f	; 63
 648:	0f 92       	push	r0
 64a:	11 24       	eor	r1, r1
 64c:	8f 93       	push	r24
 64e:	9f 93       	push	r25
 650:	af 93       	push	r26
 652:	bf 93       	push	r27
	overflow++;	
 654:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <__data_end>
 658:	90 91 a3 00 	lds	r25, 0x00A3	; 0x8000a3 <__data_end+0x1>
 65c:	a0 91 a4 00 	lds	r26, 0x00A4	; 0x8000a4 <__data_end+0x2>
 660:	b0 91 a5 00 	lds	r27, 0x00A5	; 0x8000a5 <__data_end+0x3>
 664:	01 96       	adiw	r24, 0x01	; 1
 666:	a1 1d       	adc	r26, r1
 668:	b1 1d       	adc	r27, r1
 66a:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__data_end>
 66e:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <__data_end+0x1>
 672:	a0 93 a4 00 	sts	0x00A4, r26	; 0x8000a4 <__data_end+0x2>
 676:	b0 93 a5 00 	sts	0x00A5, r27	; 0x8000a5 <__data_end+0x3>
}
 67a:	bf 91       	pop	r27
 67c:	af 91       	pop	r26
 67e:	9f 91       	pop	r25
 680:	8f 91       	pop	r24
 682:	0f 90       	pop	r0
 684:	0f be       	out	0x3f, r0	; 63
 686:	0f 90       	pop	r0
 688:	1f 90       	pop	r1
 68a:	18 95       	reti

0000068c <__vector_13>:

u8 gps[100];
u8 i=0;
u8 CHECK[]="$GPGGA";
ISR(USART_RXC_vect)
{
 68c:	1f 92       	push	r1
 68e:	0f 92       	push	r0
 690:	0f b6       	in	r0, 0x3f	; 63
 692:	0f 92       	push	r0
 694:	11 24       	eor	r1, r1
 696:	8f 93       	push	r24
 698:	9f 93       	push	r25
 69a:	ef 93       	push	r30
 69c:	ff 93       	push	r31
	gps[i]=UDR;
 69e:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <i>
 6a2:	e8 2f       	mov	r30, r24
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	9c b1       	in	r25, 0x0c	; 12
 6a8:	e7 55       	subi	r30, 0x57	; 87
 6aa:	ff 4f       	sbci	r31, 0xFF	; 255
 6ac:	90 83       	st	Z, r25
	i++;
 6ae:	8f 5f       	subi	r24, 0xFF	; 255
 6b0:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <i>
	if (i==5)
 6b4:	85 30       	cpi	r24, 0x05	; 5
 6b6:	19 f4       	brne	.+6      	; 0x6be <__vector_13+0x32>
	{
		gps[6]='\0';
 6b8:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <gps+0x6>
		cli();
 6bc:	f8 94       	cli
	}
}
 6be:	ff 91       	pop	r31
 6c0:	ef 91       	pop	r30
 6c2:	9f 91       	pop	r25
 6c4:	8f 91       	pop	r24
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <Project_Init>:
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
}
 6d0:	0e 94 4e 00 	call	0x9c	; 0x9c <KEYPAD_Init>
 6d4:	0e 94 c5 00 	call	0x18a	; 0x18a <LCD_init>
 6d8:	0e 94 c2 01 	call	0x384	; 0x384 <ADC_init>
 6dc:	63 e0       	ldi	r22, 0x03	; 3
 6de:	86 e0       	ldi	r24, 0x06	; 6
 6e0:	0e 94 66 01 	call	0x2cc	; 0x2cc <INT_init>
 6e4:	0e 94 94 01 	call	0x328	; 0x328 <GLOBAL_INT_EN>
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	84 e1       	ldi	r24, 0x14	; 20
 6ec:	0e 94 6d 02 	call	0x4da	; 0x4da <pinDirection>
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	8f e0       	ldi	r24, 0x0F	; 15
 6f4:	0e 94 6d 02 	call	0x4da	; 0x4da <pinDirection>
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	8c e1       	ldi	r24, 0x1C	; 28
 6fc:	0e 94 6d 02 	call	0x4da	; 0x4da <pinDirection>
 700:	61 e0       	ldi	r22, 0x01	; 1
 702:	8d e1       	ldi	r24, 0x1D	; 29
 704:	0e 94 6d 02 	call	0x4da	; 0x4da <pinDirection>
 708:	61 e0       	ldi	r22, 0x01	; 1
 70a:	8b e1       	ldi	r24, 0x1B	; 27
 70c:	0e 94 6d 02 	call	0x4da	; 0x4da <pinDirection>
 710:	08 95       	ret

00000712 <AnalogSensors>:
	
	
}

void AnalogSensors(void)
{
 712:	cf 92       	push	r12
 714:	df 92       	push	r13
 716:	ef 92       	push	r14
 718:	ff 92       	push	r15
 71a:	0f 93       	push	r16
 71c:	1f 93       	push	r17
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
	LCD_CLEAR();
 722:	0e 94 b1 00 	call	0x162	; 0x162 <LCD_CLEAR>
	u16 LDR=0;
	u16 soil=0;
	soil=read_analog(SOILSENSOR);
 726:	80 e0       	ldi	r24, 0x00	; 0
 728:	90 e0       	ldi	r25, 0x00	; 0
 72a:	0e 94 c9 01 	call	0x392	; 0x392 <read_analog>
 72e:	ec 01       	movw	r28, r24
	LDR=read_analog(LDRSENSOR);
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	0e 94 c9 01 	call	0x392	; 0x392 <read_analog>
 738:	8c 01       	movw	r16, r24
	soil=(100-(soil*100UL)/1019UL);
 73a:	9e 01       	movw	r18, r28
 73c:	a4 e6       	ldi	r26, 0x64	; 100
 73e:	b0 e0       	ldi	r27, 0x00	; 0
 740:	0e 94 22 04 	call	0x844	; 0x844 <__umulhisi3>
 744:	2b ef       	ldi	r18, 0xFB	; 251
 746:	33 e0       	ldi	r19, 0x03	; 3
 748:	40 e0       	ldi	r20, 0x00	; 0
 74a:	50 e0       	ldi	r21, 0x00	; 0
 74c:	0e 94 00 04 	call	0x800	; 0x800 <__udivmodsi4>
 750:	c4 e6       	ldi	r28, 0x64	; 100
 752:	d0 e0       	ldi	r29, 0x00	; 0
 754:	c2 1b       	sub	r28, r18
 756:	d3 0b       	sbc	r29, r19
	LDR=((LDR*100UL)/407UL);
 758:	98 01       	movw	r18, r16
 75a:	a4 e6       	ldi	r26, 0x64	; 100
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	0e 94 22 04 	call	0x844	; 0x844 <__umulhisi3>
 762:	27 e9       	ldi	r18, 0x97	; 151
 764:	31 e0       	ldi	r19, 0x01	; 1
 766:	40 e0       	ldi	r20, 0x00	; 0
 768:	50 e0       	ldi	r21, 0x00	; 0
 76a:	0e 94 00 04 	call	0x800	; 0x800 <__udivmodsi4>
 76e:	69 01       	movw	r12, r18
 770:	7a 01       	movw	r14, r20
 772:	89 01       	movw	r16, r18
	disp_strXY(1,1,"soil water=");
 774:	4d e8       	ldi	r20, 0x8D	; 141
 776:	50 e0       	ldi	r21, 0x00	; 0
 778:	61 e0       	ldi	r22, 0x01	; 1
 77a:	81 e0       	ldi	r24, 0x01	; 1
 77c:	0e 94 28 01 	call	0x250	; 0x250 <disp_strXY>
	disp_int(soil);
 780:	be 01       	movw	r22, r28
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 33 01 	call	0x266	; 0x266 <disp_int>
	disp_char('%');
 78a:	85 e2       	ldi	r24, 0x25	; 37
 78c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <disp_char>
	disp_strXY(2,1,"Light = ");
 790:	49 e9       	ldi	r20, 0x99	; 153
 792:	50 e0       	ldi	r21, 0x00	; 0
 794:	61 e0       	ldi	r22, 0x01	; 1
 796:	82 e0       	ldi	r24, 0x02	; 2
 798:	0e 94 28 01 	call	0x250	; 0x250 <disp_strXY>
	disp_int(LDR);
 79c:	c7 01       	movw	r24, r14
 79e:	b6 01       	movw	r22, r12
 7a0:	88 27       	eor	r24, r24
 7a2:	99 27       	eor	r25, r25
 7a4:	0e 94 33 01 	call	0x266	; 0x266 <disp_int>
	disp_char('%');
 7a8:	85 e2       	ldi	r24, 0x25	; 37
 7aa:	0e 94 f6 00 	call	0x1ec	; 0x1ec <disp_char>
	//controlling planets irrigation 
	if (soil<=30)//turn on pump
 7ae:	6f 97       	sbiw	r28, 0x1f	; 31
 7b0:	28 f4       	brcc	.+10     	; 0x7bc <AnalogSensors+0xaa>
	{
		writePin(SOIL_PUMP,HIGH);
 7b2:	61 e0       	ldi	r22, 0x01	; 1
 7b4:	8c e1       	ldi	r24, 0x1C	; 28
 7b6:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
 7ba:	04 c0       	rjmp	.+8      	; 0x7c4 <AnalogSensors+0xb2>
	}
	else
	{
		writePin(SOIL_PUMP,LOW);
 7bc:	60 e0       	ldi	r22, 0x00	; 0
 7be:	8c e1       	ldi	r24, 0x1C	; 28
 7c0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
	}
	//controlling outer lights
	if (LDR<30)//turn on lights
 7c4:	0e 31       	cpi	r16, 0x1E	; 30
 7c6:	11 05       	cpc	r17, r1
 7c8:	28 f4       	brcc	.+10     	; 0x7d4 <AnalogSensors+0xc2>
	{
		writePin(OUTERLIGHT,HIGH);
 7ca:	61 e0       	ldi	r22, 0x01	; 1
 7cc:	8d e1       	ldi	r24, 0x1D	; 29
 7ce:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
 7d2:	04 c0       	rjmp	.+8      	; 0x7dc <AnalogSensors+0xca>
	}
	else
	{
		writePin(OUTERLIGHT,LOW);
 7d4:	60 e0       	ldi	r22, 0x00	; 0
 7d6:	8d e1       	ldi	r24, 0x1D	; 29
 7d8:	0e 94 d7 01 	call	0x3ae	; 0x3ae <writePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7dc:	2f ef       	ldi	r18, 0xFF	; 255
 7de:	81 ee       	ldi	r24, 0xE1	; 225
 7e0:	94 e0       	ldi	r25, 0x04	; 4
 7e2:	21 50       	subi	r18, 0x01	; 1
 7e4:	80 40       	sbci	r24, 0x00	; 0
 7e6:	90 40       	sbci	r25, 0x00	; 0
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <AnalogSensors+0xd0>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <AnalogSensors+0xda>
 7ec:	00 00       	nop
	}
	_delay_ms(100);
}
 7ee:	df 91       	pop	r29
 7f0:	cf 91       	pop	r28
 7f2:	1f 91       	pop	r17
 7f4:	0f 91       	pop	r16
 7f6:	ff 90       	pop	r15
 7f8:	ef 90       	pop	r14
 7fa:	df 90       	pop	r13
 7fc:	cf 90       	pop	r12
 7fe:	08 95       	ret

00000800 <__udivmodsi4>:
 800:	a1 e2       	ldi	r26, 0x21	; 33
 802:	1a 2e       	mov	r1, r26
 804:	aa 1b       	sub	r26, r26
 806:	bb 1b       	sub	r27, r27
 808:	fd 01       	movw	r30, r26
 80a:	0d c0       	rjmp	.+26     	; 0x826 <__udivmodsi4_ep>

0000080c <__udivmodsi4_loop>:
 80c:	aa 1f       	adc	r26, r26
 80e:	bb 1f       	adc	r27, r27
 810:	ee 1f       	adc	r30, r30
 812:	ff 1f       	adc	r31, r31
 814:	a2 17       	cp	r26, r18
 816:	b3 07       	cpc	r27, r19
 818:	e4 07       	cpc	r30, r20
 81a:	f5 07       	cpc	r31, r21
 81c:	20 f0       	brcs	.+8      	; 0x826 <__udivmodsi4_ep>
 81e:	a2 1b       	sub	r26, r18
 820:	b3 0b       	sbc	r27, r19
 822:	e4 0b       	sbc	r30, r20
 824:	f5 0b       	sbc	r31, r21

00000826 <__udivmodsi4_ep>:
 826:	66 1f       	adc	r22, r22
 828:	77 1f       	adc	r23, r23
 82a:	88 1f       	adc	r24, r24
 82c:	99 1f       	adc	r25, r25
 82e:	1a 94       	dec	r1
 830:	69 f7       	brne	.-38     	; 0x80c <__udivmodsi4_loop>
 832:	60 95       	com	r22
 834:	70 95       	com	r23
 836:	80 95       	com	r24
 838:	90 95       	com	r25
 83a:	9b 01       	movw	r18, r22
 83c:	ac 01       	movw	r20, r24
 83e:	bd 01       	movw	r22, r26
 840:	cf 01       	movw	r24, r30
 842:	08 95       	ret

00000844 <__umulhisi3>:
 844:	a2 9f       	mul	r26, r18
 846:	b0 01       	movw	r22, r0
 848:	b3 9f       	mul	r27, r19
 84a:	c0 01       	movw	r24, r0
 84c:	a3 9f       	mul	r26, r19
 84e:	70 0d       	add	r23, r0
 850:	81 1d       	adc	r24, r1
 852:	11 24       	eor	r1, r1
 854:	91 1d       	adc	r25, r1
 856:	b2 9f       	mul	r27, r18
 858:	70 0d       	add	r23, r0
 85a:	81 1d       	adc	r24, r1
 85c:	11 24       	eor	r1, r1
 85e:	91 1d       	adc	r25, r1
 860:	08 95       	ret

00000862 <sprintf>:
 862:	ae e0       	ldi	r26, 0x0E	; 14
 864:	b0 e0       	ldi	r27, 0x00	; 0
 866:	e7 e3       	ldi	r30, 0x37	; 55
 868:	f4 e0       	ldi	r31, 0x04	; 4
 86a:	0c 94 f2 06 	jmp	0xde4	; 0xde4 <__prologue_saves__+0x1c>
 86e:	0d 89       	ldd	r16, Y+21	; 0x15
 870:	1e 89       	ldd	r17, Y+22	; 0x16
 872:	86 e0       	ldi	r24, 0x06	; 6
 874:	8c 83       	std	Y+4, r24	; 0x04
 876:	1a 83       	std	Y+2, r17	; 0x02
 878:	09 83       	std	Y+1, r16	; 0x01
 87a:	8f ef       	ldi	r24, 0xFF	; 255
 87c:	9f e7       	ldi	r25, 0x7F	; 127
 87e:	9e 83       	std	Y+6, r25	; 0x06
 880:	8d 83       	std	Y+5, r24	; 0x05
 882:	ae 01       	movw	r20, r28
 884:	47 5e       	subi	r20, 0xE7	; 231
 886:	5f 4f       	sbci	r21, 0xFF	; 255
 888:	6f 89       	ldd	r22, Y+23	; 0x17
 88a:	78 8d       	ldd	r23, Y+24	; 0x18
 88c:	ce 01       	movw	r24, r28
 88e:	01 96       	adiw	r24, 0x01	; 1
 890:	0e 94 53 04 	call	0x8a6	; 0x8a6 <vfprintf>
 894:	ef 81       	ldd	r30, Y+7	; 0x07
 896:	f8 85       	ldd	r31, Y+8	; 0x08
 898:	e0 0f       	add	r30, r16
 89a:	f1 1f       	adc	r31, r17
 89c:	10 82       	st	Z, r1
 89e:	2e 96       	adiw	r28, 0x0e	; 14
 8a0:	e4 e0       	ldi	r30, 0x04	; 4
 8a2:	0c 94 0e 07 	jmp	0xe1c	; 0xe1c <__epilogue_restores__+0x1c>

000008a6 <vfprintf>:
 8a6:	ab e0       	ldi	r26, 0x0B	; 11
 8a8:	b0 e0       	ldi	r27, 0x00	; 0
 8aa:	e9 e5       	ldi	r30, 0x59	; 89
 8ac:	f4 e0       	ldi	r31, 0x04	; 4
 8ae:	0c 94 e4 06 	jmp	0xdc8	; 0xdc8 <__prologue_saves__>
 8b2:	6c 01       	movw	r12, r24
 8b4:	7b 01       	movw	r14, r22
 8b6:	8a 01       	movw	r16, r20
 8b8:	fc 01       	movw	r30, r24
 8ba:	17 82       	std	Z+7, r1	; 0x07
 8bc:	16 82       	std	Z+6, r1	; 0x06
 8be:	83 81       	ldd	r24, Z+3	; 0x03
 8c0:	81 ff       	sbrs	r24, 1
 8c2:	cc c1       	rjmp	.+920    	; 0xc5c <vfprintf+0x3b6>
 8c4:	ce 01       	movw	r24, r28
 8c6:	01 96       	adiw	r24, 0x01	; 1
 8c8:	3c 01       	movw	r6, r24
 8ca:	f6 01       	movw	r30, r12
 8cc:	93 81       	ldd	r25, Z+3	; 0x03
 8ce:	f7 01       	movw	r30, r14
 8d0:	93 fd       	sbrc	r25, 3
 8d2:	85 91       	lpm	r24, Z+
 8d4:	93 ff       	sbrs	r25, 3
 8d6:	81 91       	ld	r24, Z+
 8d8:	7f 01       	movw	r14, r30
 8da:	88 23       	and	r24, r24
 8dc:	09 f4       	brne	.+2      	; 0x8e0 <vfprintf+0x3a>
 8de:	ba c1       	rjmp	.+884    	; 0xc54 <vfprintf+0x3ae>
 8e0:	85 32       	cpi	r24, 0x25	; 37
 8e2:	39 f4       	brne	.+14     	; 0x8f2 <vfprintf+0x4c>
 8e4:	93 fd       	sbrc	r25, 3
 8e6:	85 91       	lpm	r24, Z+
 8e8:	93 ff       	sbrs	r25, 3
 8ea:	81 91       	ld	r24, Z+
 8ec:	7f 01       	movw	r14, r30
 8ee:	85 32       	cpi	r24, 0x25	; 37
 8f0:	29 f4       	brne	.+10     	; 0x8fc <vfprintf+0x56>
 8f2:	b6 01       	movw	r22, r12
 8f4:	90 e0       	ldi	r25, 0x00	; 0
 8f6:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 8fa:	e7 cf       	rjmp	.-50     	; 0x8ca <vfprintf+0x24>
 8fc:	91 2c       	mov	r9, r1
 8fe:	21 2c       	mov	r2, r1
 900:	31 2c       	mov	r3, r1
 902:	ff e1       	ldi	r31, 0x1F	; 31
 904:	f3 15       	cp	r31, r3
 906:	d8 f0       	brcs	.+54     	; 0x93e <vfprintf+0x98>
 908:	8b 32       	cpi	r24, 0x2B	; 43
 90a:	79 f0       	breq	.+30     	; 0x92a <vfprintf+0x84>
 90c:	38 f4       	brcc	.+14     	; 0x91c <vfprintf+0x76>
 90e:	80 32       	cpi	r24, 0x20	; 32
 910:	79 f0       	breq	.+30     	; 0x930 <vfprintf+0x8a>
 912:	83 32       	cpi	r24, 0x23	; 35
 914:	a1 f4       	brne	.+40     	; 0x93e <vfprintf+0x98>
 916:	23 2d       	mov	r18, r3
 918:	20 61       	ori	r18, 0x10	; 16
 91a:	1d c0       	rjmp	.+58     	; 0x956 <vfprintf+0xb0>
 91c:	8d 32       	cpi	r24, 0x2D	; 45
 91e:	61 f0       	breq	.+24     	; 0x938 <vfprintf+0x92>
 920:	80 33       	cpi	r24, 0x30	; 48
 922:	69 f4       	brne	.+26     	; 0x93e <vfprintf+0x98>
 924:	23 2d       	mov	r18, r3
 926:	21 60       	ori	r18, 0x01	; 1
 928:	16 c0       	rjmp	.+44     	; 0x956 <vfprintf+0xb0>
 92a:	83 2d       	mov	r24, r3
 92c:	82 60       	ori	r24, 0x02	; 2
 92e:	38 2e       	mov	r3, r24
 930:	e3 2d       	mov	r30, r3
 932:	e4 60       	ori	r30, 0x04	; 4
 934:	3e 2e       	mov	r3, r30
 936:	2a c0       	rjmp	.+84     	; 0x98c <vfprintf+0xe6>
 938:	f3 2d       	mov	r31, r3
 93a:	f8 60       	ori	r31, 0x08	; 8
 93c:	1d c0       	rjmp	.+58     	; 0x978 <vfprintf+0xd2>
 93e:	37 fc       	sbrc	r3, 7
 940:	2d c0       	rjmp	.+90     	; 0x99c <vfprintf+0xf6>
 942:	20 ed       	ldi	r18, 0xD0	; 208
 944:	28 0f       	add	r18, r24
 946:	2a 30       	cpi	r18, 0x0A	; 10
 948:	40 f0       	brcs	.+16     	; 0x95a <vfprintf+0xb4>
 94a:	8e 32       	cpi	r24, 0x2E	; 46
 94c:	b9 f4       	brne	.+46     	; 0x97c <vfprintf+0xd6>
 94e:	36 fc       	sbrc	r3, 6
 950:	81 c1       	rjmp	.+770    	; 0xc54 <vfprintf+0x3ae>
 952:	23 2d       	mov	r18, r3
 954:	20 64       	ori	r18, 0x40	; 64
 956:	32 2e       	mov	r3, r18
 958:	19 c0       	rjmp	.+50     	; 0x98c <vfprintf+0xe6>
 95a:	36 fe       	sbrs	r3, 6
 95c:	06 c0       	rjmp	.+12     	; 0x96a <vfprintf+0xc4>
 95e:	8a e0       	ldi	r24, 0x0A	; 10
 960:	98 9e       	mul	r9, r24
 962:	20 0d       	add	r18, r0
 964:	11 24       	eor	r1, r1
 966:	92 2e       	mov	r9, r18
 968:	11 c0       	rjmp	.+34     	; 0x98c <vfprintf+0xe6>
 96a:	ea e0       	ldi	r30, 0x0A	; 10
 96c:	2e 9e       	mul	r2, r30
 96e:	20 0d       	add	r18, r0
 970:	11 24       	eor	r1, r1
 972:	22 2e       	mov	r2, r18
 974:	f3 2d       	mov	r31, r3
 976:	f0 62       	ori	r31, 0x20	; 32
 978:	3f 2e       	mov	r3, r31
 97a:	08 c0       	rjmp	.+16     	; 0x98c <vfprintf+0xe6>
 97c:	8c 36       	cpi	r24, 0x6C	; 108
 97e:	21 f4       	brne	.+8      	; 0x988 <vfprintf+0xe2>
 980:	83 2d       	mov	r24, r3
 982:	80 68       	ori	r24, 0x80	; 128
 984:	38 2e       	mov	r3, r24
 986:	02 c0       	rjmp	.+4      	; 0x98c <vfprintf+0xe6>
 988:	88 36       	cpi	r24, 0x68	; 104
 98a:	41 f4       	brne	.+16     	; 0x99c <vfprintf+0xf6>
 98c:	f7 01       	movw	r30, r14
 98e:	93 fd       	sbrc	r25, 3
 990:	85 91       	lpm	r24, Z+
 992:	93 ff       	sbrs	r25, 3
 994:	81 91       	ld	r24, Z+
 996:	7f 01       	movw	r14, r30
 998:	81 11       	cpse	r24, r1
 99a:	b3 cf       	rjmp	.-154    	; 0x902 <vfprintf+0x5c>
 99c:	98 2f       	mov	r25, r24
 99e:	9f 7d       	andi	r25, 0xDF	; 223
 9a0:	95 54       	subi	r25, 0x45	; 69
 9a2:	93 30       	cpi	r25, 0x03	; 3
 9a4:	28 f4       	brcc	.+10     	; 0x9b0 <vfprintf+0x10a>
 9a6:	0c 5f       	subi	r16, 0xFC	; 252
 9a8:	1f 4f       	sbci	r17, 0xFF	; 255
 9aa:	9f e3       	ldi	r25, 0x3F	; 63
 9ac:	99 83       	std	Y+1, r25	; 0x01
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <vfprintf+0x124>
 9b0:	83 36       	cpi	r24, 0x63	; 99
 9b2:	31 f0       	breq	.+12     	; 0x9c0 <vfprintf+0x11a>
 9b4:	83 37       	cpi	r24, 0x73	; 115
 9b6:	71 f0       	breq	.+28     	; 0x9d4 <vfprintf+0x12e>
 9b8:	83 35       	cpi	r24, 0x53	; 83
 9ba:	09 f0       	breq	.+2      	; 0x9be <vfprintf+0x118>
 9bc:	59 c0       	rjmp	.+178    	; 0xa70 <vfprintf+0x1ca>
 9be:	21 c0       	rjmp	.+66     	; 0xa02 <vfprintf+0x15c>
 9c0:	f8 01       	movw	r30, r16
 9c2:	80 81       	ld	r24, Z
 9c4:	89 83       	std	Y+1, r24	; 0x01
 9c6:	0e 5f       	subi	r16, 0xFE	; 254
 9c8:	1f 4f       	sbci	r17, 0xFF	; 255
 9ca:	88 24       	eor	r8, r8
 9cc:	83 94       	inc	r8
 9ce:	91 2c       	mov	r9, r1
 9d0:	53 01       	movw	r10, r6
 9d2:	13 c0       	rjmp	.+38     	; 0x9fa <vfprintf+0x154>
 9d4:	28 01       	movw	r4, r16
 9d6:	f2 e0       	ldi	r31, 0x02	; 2
 9d8:	4f 0e       	add	r4, r31
 9da:	51 1c       	adc	r5, r1
 9dc:	f8 01       	movw	r30, r16
 9de:	a0 80       	ld	r10, Z
 9e0:	b1 80       	ldd	r11, Z+1	; 0x01
 9e2:	36 fe       	sbrs	r3, 6
 9e4:	03 c0       	rjmp	.+6      	; 0x9ec <vfprintf+0x146>
 9e6:	69 2d       	mov	r22, r9
 9e8:	70 e0       	ldi	r23, 0x00	; 0
 9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <vfprintf+0x14a>
 9ec:	6f ef       	ldi	r22, 0xFF	; 255
 9ee:	7f ef       	ldi	r23, 0xFF	; 255
 9f0:	c5 01       	movw	r24, r10
 9f2:	0e 94 3f 06 	call	0xc7e	; 0xc7e <strnlen>
 9f6:	4c 01       	movw	r8, r24
 9f8:	82 01       	movw	r16, r4
 9fa:	f3 2d       	mov	r31, r3
 9fc:	ff 77       	andi	r31, 0x7F	; 127
 9fe:	3f 2e       	mov	r3, r31
 a00:	16 c0       	rjmp	.+44     	; 0xa2e <vfprintf+0x188>
 a02:	28 01       	movw	r4, r16
 a04:	22 e0       	ldi	r18, 0x02	; 2
 a06:	42 0e       	add	r4, r18
 a08:	51 1c       	adc	r5, r1
 a0a:	f8 01       	movw	r30, r16
 a0c:	a0 80       	ld	r10, Z
 a0e:	b1 80       	ldd	r11, Z+1	; 0x01
 a10:	36 fe       	sbrs	r3, 6
 a12:	03 c0       	rjmp	.+6      	; 0xa1a <vfprintf+0x174>
 a14:	69 2d       	mov	r22, r9
 a16:	70 e0       	ldi	r23, 0x00	; 0
 a18:	02 c0       	rjmp	.+4      	; 0xa1e <vfprintf+0x178>
 a1a:	6f ef       	ldi	r22, 0xFF	; 255
 a1c:	7f ef       	ldi	r23, 0xFF	; 255
 a1e:	c5 01       	movw	r24, r10
 a20:	0e 94 34 06 	call	0xc68	; 0xc68 <strnlen_P>
 a24:	4c 01       	movw	r8, r24
 a26:	f3 2d       	mov	r31, r3
 a28:	f0 68       	ori	r31, 0x80	; 128
 a2a:	3f 2e       	mov	r3, r31
 a2c:	82 01       	movw	r16, r4
 a2e:	33 fc       	sbrc	r3, 3
 a30:	1b c0       	rjmp	.+54     	; 0xa68 <vfprintf+0x1c2>
 a32:	82 2d       	mov	r24, r2
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	88 16       	cp	r8, r24
 a38:	99 06       	cpc	r9, r25
 a3a:	b0 f4       	brcc	.+44     	; 0xa68 <vfprintf+0x1c2>
 a3c:	b6 01       	movw	r22, r12
 a3e:	80 e2       	ldi	r24, 0x20	; 32
 a40:	90 e0       	ldi	r25, 0x00	; 0
 a42:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 a46:	2a 94       	dec	r2
 a48:	f4 cf       	rjmp	.-24     	; 0xa32 <vfprintf+0x18c>
 a4a:	f5 01       	movw	r30, r10
 a4c:	37 fc       	sbrc	r3, 7
 a4e:	85 91       	lpm	r24, Z+
 a50:	37 fe       	sbrs	r3, 7
 a52:	81 91       	ld	r24, Z+
 a54:	5f 01       	movw	r10, r30
 a56:	b6 01       	movw	r22, r12
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 a5e:	21 10       	cpse	r2, r1
 a60:	2a 94       	dec	r2
 a62:	21 e0       	ldi	r18, 0x01	; 1
 a64:	82 1a       	sub	r8, r18
 a66:	91 08       	sbc	r9, r1
 a68:	81 14       	cp	r8, r1
 a6a:	91 04       	cpc	r9, r1
 a6c:	71 f7       	brne	.-36     	; 0xa4a <vfprintf+0x1a4>
 a6e:	e8 c0       	rjmp	.+464    	; 0xc40 <vfprintf+0x39a>
 a70:	84 36       	cpi	r24, 0x64	; 100
 a72:	11 f0       	breq	.+4      	; 0xa78 <vfprintf+0x1d2>
 a74:	89 36       	cpi	r24, 0x69	; 105
 a76:	41 f5       	brne	.+80     	; 0xac8 <vfprintf+0x222>
 a78:	f8 01       	movw	r30, r16
 a7a:	37 fe       	sbrs	r3, 7
 a7c:	07 c0       	rjmp	.+14     	; 0xa8c <vfprintf+0x1e6>
 a7e:	60 81       	ld	r22, Z
 a80:	71 81       	ldd	r23, Z+1	; 0x01
 a82:	82 81       	ldd	r24, Z+2	; 0x02
 a84:	93 81       	ldd	r25, Z+3	; 0x03
 a86:	0c 5f       	subi	r16, 0xFC	; 252
 a88:	1f 4f       	sbci	r17, 0xFF	; 255
 a8a:	08 c0       	rjmp	.+16     	; 0xa9c <vfprintf+0x1f6>
 a8c:	60 81       	ld	r22, Z
 a8e:	71 81       	ldd	r23, Z+1	; 0x01
 a90:	07 2e       	mov	r0, r23
 a92:	00 0c       	add	r0, r0
 a94:	88 0b       	sbc	r24, r24
 a96:	99 0b       	sbc	r25, r25
 a98:	0e 5f       	subi	r16, 0xFE	; 254
 a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 a9c:	f3 2d       	mov	r31, r3
 a9e:	ff 76       	andi	r31, 0x6F	; 111
 aa0:	3f 2e       	mov	r3, r31
 aa2:	97 ff       	sbrs	r25, 7
 aa4:	09 c0       	rjmp	.+18     	; 0xab8 <vfprintf+0x212>
 aa6:	90 95       	com	r25
 aa8:	80 95       	com	r24
 aaa:	70 95       	com	r23
 aac:	61 95       	neg	r22
 aae:	7f 4f       	sbci	r23, 0xFF	; 255
 ab0:	8f 4f       	sbci	r24, 0xFF	; 255
 ab2:	9f 4f       	sbci	r25, 0xFF	; 255
 ab4:	f0 68       	ori	r31, 0x80	; 128
 ab6:	3f 2e       	mov	r3, r31
 ab8:	2a e0       	ldi	r18, 0x0A	; 10
 aba:	30 e0       	ldi	r19, 0x00	; 0
 abc:	a3 01       	movw	r20, r6
 abe:	0e 94 86 06 	call	0xd0c	; 0xd0c <__ultoa_invert>
 ac2:	88 2e       	mov	r8, r24
 ac4:	86 18       	sub	r8, r6
 ac6:	45 c0       	rjmp	.+138    	; 0xb52 <vfprintf+0x2ac>
 ac8:	85 37       	cpi	r24, 0x75	; 117
 aca:	31 f4       	brne	.+12     	; 0xad8 <vfprintf+0x232>
 acc:	23 2d       	mov	r18, r3
 ace:	2f 7e       	andi	r18, 0xEF	; 239
 ad0:	b2 2e       	mov	r11, r18
 ad2:	2a e0       	ldi	r18, 0x0A	; 10
 ad4:	30 e0       	ldi	r19, 0x00	; 0
 ad6:	25 c0       	rjmp	.+74     	; 0xb22 <vfprintf+0x27c>
 ad8:	93 2d       	mov	r25, r3
 ada:	99 7f       	andi	r25, 0xF9	; 249
 adc:	b9 2e       	mov	r11, r25
 ade:	8f 36       	cpi	r24, 0x6F	; 111
 ae0:	c1 f0       	breq	.+48     	; 0xb12 <vfprintf+0x26c>
 ae2:	18 f4       	brcc	.+6      	; 0xaea <vfprintf+0x244>
 ae4:	88 35       	cpi	r24, 0x58	; 88
 ae6:	79 f0       	breq	.+30     	; 0xb06 <vfprintf+0x260>
 ae8:	b5 c0       	rjmp	.+362    	; 0xc54 <vfprintf+0x3ae>
 aea:	80 37       	cpi	r24, 0x70	; 112
 aec:	19 f0       	breq	.+6      	; 0xaf4 <vfprintf+0x24e>
 aee:	88 37       	cpi	r24, 0x78	; 120
 af0:	21 f0       	breq	.+8      	; 0xafa <vfprintf+0x254>
 af2:	b0 c0       	rjmp	.+352    	; 0xc54 <vfprintf+0x3ae>
 af4:	e9 2f       	mov	r30, r25
 af6:	e0 61       	ori	r30, 0x10	; 16
 af8:	be 2e       	mov	r11, r30
 afa:	b4 fe       	sbrs	r11, 4
 afc:	0d c0       	rjmp	.+26     	; 0xb18 <vfprintf+0x272>
 afe:	fb 2d       	mov	r31, r11
 b00:	f4 60       	ori	r31, 0x04	; 4
 b02:	bf 2e       	mov	r11, r31
 b04:	09 c0       	rjmp	.+18     	; 0xb18 <vfprintf+0x272>
 b06:	34 fe       	sbrs	r3, 4
 b08:	0a c0       	rjmp	.+20     	; 0xb1e <vfprintf+0x278>
 b0a:	29 2f       	mov	r18, r25
 b0c:	26 60       	ori	r18, 0x06	; 6
 b0e:	b2 2e       	mov	r11, r18
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <vfprintf+0x278>
 b12:	28 e0       	ldi	r18, 0x08	; 8
 b14:	30 e0       	ldi	r19, 0x00	; 0
 b16:	05 c0       	rjmp	.+10     	; 0xb22 <vfprintf+0x27c>
 b18:	20 e1       	ldi	r18, 0x10	; 16
 b1a:	30 e0       	ldi	r19, 0x00	; 0
 b1c:	02 c0       	rjmp	.+4      	; 0xb22 <vfprintf+0x27c>
 b1e:	20 e1       	ldi	r18, 0x10	; 16
 b20:	32 e0       	ldi	r19, 0x02	; 2
 b22:	f8 01       	movw	r30, r16
 b24:	b7 fe       	sbrs	r11, 7
 b26:	07 c0       	rjmp	.+14     	; 0xb36 <vfprintf+0x290>
 b28:	60 81       	ld	r22, Z
 b2a:	71 81       	ldd	r23, Z+1	; 0x01
 b2c:	82 81       	ldd	r24, Z+2	; 0x02
 b2e:	93 81       	ldd	r25, Z+3	; 0x03
 b30:	0c 5f       	subi	r16, 0xFC	; 252
 b32:	1f 4f       	sbci	r17, 0xFF	; 255
 b34:	06 c0       	rjmp	.+12     	; 0xb42 <vfprintf+0x29c>
 b36:	60 81       	ld	r22, Z
 b38:	71 81       	ldd	r23, Z+1	; 0x01
 b3a:	80 e0       	ldi	r24, 0x00	; 0
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 5f       	subi	r16, 0xFE	; 254
 b40:	1f 4f       	sbci	r17, 0xFF	; 255
 b42:	a3 01       	movw	r20, r6
 b44:	0e 94 86 06 	call	0xd0c	; 0xd0c <__ultoa_invert>
 b48:	88 2e       	mov	r8, r24
 b4a:	86 18       	sub	r8, r6
 b4c:	fb 2d       	mov	r31, r11
 b4e:	ff 77       	andi	r31, 0x7F	; 127
 b50:	3f 2e       	mov	r3, r31
 b52:	36 fe       	sbrs	r3, 6
 b54:	0d c0       	rjmp	.+26     	; 0xb70 <vfprintf+0x2ca>
 b56:	23 2d       	mov	r18, r3
 b58:	2e 7f       	andi	r18, 0xFE	; 254
 b5a:	a2 2e       	mov	r10, r18
 b5c:	89 14       	cp	r8, r9
 b5e:	58 f4       	brcc	.+22     	; 0xb76 <vfprintf+0x2d0>
 b60:	34 fe       	sbrs	r3, 4
 b62:	0b c0       	rjmp	.+22     	; 0xb7a <vfprintf+0x2d4>
 b64:	32 fc       	sbrc	r3, 2
 b66:	09 c0       	rjmp	.+18     	; 0xb7a <vfprintf+0x2d4>
 b68:	83 2d       	mov	r24, r3
 b6a:	8e 7e       	andi	r24, 0xEE	; 238
 b6c:	a8 2e       	mov	r10, r24
 b6e:	05 c0       	rjmp	.+10     	; 0xb7a <vfprintf+0x2d4>
 b70:	b8 2c       	mov	r11, r8
 b72:	a3 2c       	mov	r10, r3
 b74:	03 c0       	rjmp	.+6      	; 0xb7c <vfprintf+0x2d6>
 b76:	b8 2c       	mov	r11, r8
 b78:	01 c0       	rjmp	.+2      	; 0xb7c <vfprintf+0x2d6>
 b7a:	b9 2c       	mov	r11, r9
 b7c:	a4 fe       	sbrs	r10, 4
 b7e:	0f c0       	rjmp	.+30     	; 0xb9e <vfprintf+0x2f8>
 b80:	fe 01       	movw	r30, r28
 b82:	e8 0d       	add	r30, r8
 b84:	f1 1d       	adc	r31, r1
 b86:	80 81       	ld	r24, Z
 b88:	80 33       	cpi	r24, 0x30	; 48
 b8a:	21 f4       	brne	.+8      	; 0xb94 <vfprintf+0x2ee>
 b8c:	9a 2d       	mov	r25, r10
 b8e:	99 7e       	andi	r25, 0xE9	; 233
 b90:	a9 2e       	mov	r10, r25
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <vfprintf+0x300>
 b94:	a2 fe       	sbrs	r10, 2
 b96:	06 c0       	rjmp	.+12     	; 0xba4 <vfprintf+0x2fe>
 b98:	b3 94       	inc	r11
 b9a:	b3 94       	inc	r11
 b9c:	04 c0       	rjmp	.+8      	; 0xba6 <vfprintf+0x300>
 b9e:	8a 2d       	mov	r24, r10
 ba0:	86 78       	andi	r24, 0x86	; 134
 ba2:	09 f0       	breq	.+2      	; 0xba6 <vfprintf+0x300>
 ba4:	b3 94       	inc	r11
 ba6:	a3 fc       	sbrc	r10, 3
 ba8:	11 c0       	rjmp	.+34     	; 0xbcc <vfprintf+0x326>
 baa:	a0 fe       	sbrs	r10, 0
 bac:	06 c0       	rjmp	.+12     	; 0xbba <vfprintf+0x314>
 bae:	b2 14       	cp	r11, r2
 bb0:	88 f4       	brcc	.+34     	; 0xbd4 <vfprintf+0x32e>
 bb2:	28 0c       	add	r2, r8
 bb4:	92 2c       	mov	r9, r2
 bb6:	9b 18       	sub	r9, r11
 bb8:	0e c0       	rjmp	.+28     	; 0xbd6 <vfprintf+0x330>
 bba:	b2 14       	cp	r11, r2
 bbc:	60 f4       	brcc	.+24     	; 0xbd6 <vfprintf+0x330>
 bbe:	b6 01       	movw	r22, r12
 bc0:	80 e2       	ldi	r24, 0x20	; 32
 bc2:	90 e0       	ldi	r25, 0x00	; 0
 bc4:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 bc8:	b3 94       	inc	r11
 bca:	f7 cf       	rjmp	.-18     	; 0xbba <vfprintf+0x314>
 bcc:	b2 14       	cp	r11, r2
 bce:	18 f4       	brcc	.+6      	; 0xbd6 <vfprintf+0x330>
 bd0:	2b 18       	sub	r2, r11
 bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <vfprintf+0x332>
 bd4:	98 2c       	mov	r9, r8
 bd6:	21 2c       	mov	r2, r1
 bd8:	a4 fe       	sbrs	r10, 4
 bda:	10 c0       	rjmp	.+32     	; 0xbfc <vfprintf+0x356>
 bdc:	b6 01       	movw	r22, r12
 bde:	80 e3       	ldi	r24, 0x30	; 48
 be0:	90 e0       	ldi	r25, 0x00	; 0
 be2:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 be6:	a2 fe       	sbrs	r10, 2
 be8:	17 c0       	rjmp	.+46     	; 0xc18 <vfprintf+0x372>
 bea:	a1 fc       	sbrc	r10, 1
 bec:	03 c0       	rjmp	.+6      	; 0xbf4 <vfprintf+0x34e>
 bee:	88 e7       	ldi	r24, 0x78	; 120
 bf0:	90 e0       	ldi	r25, 0x00	; 0
 bf2:	02 c0       	rjmp	.+4      	; 0xbf8 <vfprintf+0x352>
 bf4:	88 e5       	ldi	r24, 0x58	; 88
 bf6:	90 e0       	ldi	r25, 0x00	; 0
 bf8:	b6 01       	movw	r22, r12
 bfa:	0c c0       	rjmp	.+24     	; 0xc14 <vfprintf+0x36e>
 bfc:	8a 2d       	mov	r24, r10
 bfe:	86 78       	andi	r24, 0x86	; 134
 c00:	59 f0       	breq	.+22     	; 0xc18 <vfprintf+0x372>
 c02:	a1 fe       	sbrs	r10, 1
 c04:	02 c0       	rjmp	.+4      	; 0xc0a <vfprintf+0x364>
 c06:	8b e2       	ldi	r24, 0x2B	; 43
 c08:	01 c0       	rjmp	.+2      	; 0xc0c <vfprintf+0x366>
 c0a:	80 e2       	ldi	r24, 0x20	; 32
 c0c:	a7 fc       	sbrc	r10, 7
 c0e:	8d e2       	ldi	r24, 0x2D	; 45
 c10:	b6 01       	movw	r22, r12
 c12:	90 e0       	ldi	r25, 0x00	; 0
 c14:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c18:	89 14       	cp	r8, r9
 c1a:	38 f4       	brcc	.+14     	; 0xc2a <vfprintf+0x384>
 c1c:	b6 01       	movw	r22, r12
 c1e:	80 e3       	ldi	r24, 0x30	; 48
 c20:	90 e0       	ldi	r25, 0x00	; 0
 c22:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c26:	9a 94       	dec	r9
 c28:	f7 cf       	rjmp	.-18     	; 0xc18 <vfprintf+0x372>
 c2a:	8a 94       	dec	r8
 c2c:	f3 01       	movw	r30, r6
 c2e:	e8 0d       	add	r30, r8
 c30:	f1 1d       	adc	r31, r1
 c32:	80 81       	ld	r24, Z
 c34:	b6 01       	movw	r22, r12
 c36:	90 e0       	ldi	r25, 0x00	; 0
 c38:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c3c:	81 10       	cpse	r8, r1
 c3e:	f5 cf       	rjmp	.-22     	; 0xc2a <vfprintf+0x384>
 c40:	22 20       	and	r2, r2
 c42:	09 f4       	brne	.+2      	; 0xc46 <vfprintf+0x3a0>
 c44:	42 ce       	rjmp	.-892    	; 0x8ca <vfprintf+0x24>
 c46:	b6 01       	movw	r22, r12
 c48:	80 e2       	ldi	r24, 0x20	; 32
 c4a:	90 e0       	ldi	r25, 0x00	; 0
 c4c:	0e 94 4a 06 	call	0xc94	; 0xc94 <fputc>
 c50:	2a 94       	dec	r2
 c52:	f6 cf       	rjmp	.-20     	; 0xc40 <vfprintf+0x39a>
 c54:	f6 01       	movw	r30, r12
 c56:	86 81       	ldd	r24, Z+6	; 0x06
 c58:	97 81       	ldd	r25, Z+7	; 0x07
 c5a:	02 c0       	rjmp	.+4      	; 0xc60 <vfprintf+0x3ba>
 c5c:	8f ef       	ldi	r24, 0xFF	; 255
 c5e:	9f ef       	ldi	r25, 0xFF	; 255
 c60:	2b 96       	adiw	r28, 0x0b	; 11
 c62:	e2 e1       	ldi	r30, 0x12	; 18
 c64:	0c 94 00 07 	jmp	0xe00	; 0xe00 <__epilogue_restores__>

00000c68 <strnlen_P>:
 c68:	fc 01       	movw	r30, r24
 c6a:	05 90       	lpm	r0, Z+
 c6c:	61 50       	subi	r22, 0x01	; 1
 c6e:	70 40       	sbci	r23, 0x00	; 0
 c70:	01 10       	cpse	r0, r1
 c72:	d8 f7       	brcc	.-10     	; 0xc6a <strnlen_P+0x2>
 c74:	80 95       	com	r24
 c76:	90 95       	com	r25
 c78:	8e 0f       	add	r24, r30
 c7a:	9f 1f       	adc	r25, r31
 c7c:	08 95       	ret

00000c7e <strnlen>:
 c7e:	fc 01       	movw	r30, r24
 c80:	61 50       	subi	r22, 0x01	; 1
 c82:	70 40       	sbci	r23, 0x00	; 0
 c84:	01 90       	ld	r0, Z+
 c86:	01 10       	cpse	r0, r1
 c88:	d8 f7       	brcc	.-10     	; 0xc80 <strnlen+0x2>
 c8a:	80 95       	com	r24
 c8c:	90 95       	com	r25
 c8e:	8e 0f       	add	r24, r30
 c90:	9f 1f       	adc	r25, r31
 c92:	08 95       	ret

00000c94 <fputc>:
 c94:	0f 93       	push	r16
 c96:	1f 93       	push	r17
 c98:	cf 93       	push	r28
 c9a:	df 93       	push	r29
 c9c:	fb 01       	movw	r30, r22
 c9e:	23 81       	ldd	r18, Z+3	; 0x03
 ca0:	21 fd       	sbrc	r18, 1
 ca2:	03 c0       	rjmp	.+6      	; 0xcaa <fputc+0x16>
 ca4:	8f ef       	ldi	r24, 0xFF	; 255
 ca6:	9f ef       	ldi	r25, 0xFF	; 255
 ca8:	2c c0       	rjmp	.+88     	; 0xd02 <fputc+0x6e>
 caa:	22 ff       	sbrs	r18, 2
 cac:	16 c0       	rjmp	.+44     	; 0xcda <fputc+0x46>
 cae:	46 81       	ldd	r20, Z+6	; 0x06
 cb0:	57 81       	ldd	r21, Z+7	; 0x07
 cb2:	24 81       	ldd	r18, Z+4	; 0x04
 cb4:	35 81       	ldd	r19, Z+5	; 0x05
 cb6:	42 17       	cp	r20, r18
 cb8:	53 07       	cpc	r21, r19
 cba:	44 f4       	brge	.+16     	; 0xccc <fputc+0x38>
 cbc:	a0 81       	ld	r26, Z
 cbe:	b1 81       	ldd	r27, Z+1	; 0x01
 cc0:	9d 01       	movw	r18, r26
 cc2:	2f 5f       	subi	r18, 0xFF	; 255
 cc4:	3f 4f       	sbci	r19, 0xFF	; 255
 cc6:	31 83       	std	Z+1, r19	; 0x01
 cc8:	20 83       	st	Z, r18
 cca:	8c 93       	st	X, r24
 ccc:	26 81       	ldd	r18, Z+6	; 0x06
 cce:	37 81       	ldd	r19, Z+7	; 0x07
 cd0:	2f 5f       	subi	r18, 0xFF	; 255
 cd2:	3f 4f       	sbci	r19, 0xFF	; 255
 cd4:	37 83       	std	Z+7, r19	; 0x07
 cd6:	26 83       	std	Z+6, r18	; 0x06
 cd8:	14 c0       	rjmp	.+40     	; 0xd02 <fputc+0x6e>
 cda:	8b 01       	movw	r16, r22
 cdc:	ec 01       	movw	r28, r24
 cde:	fb 01       	movw	r30, r22
 ce0:	00 84       	ldd	r0, Z+8	; 0x08
 ce2:	f1 85       	ldd	r31, Z+9	; 0x09
 ce4:	e0 2d       	mov	r30, r0
 ce6:	09 95       	icall
 ce8:	89 2b       	or	r24, r25
 cea:	e1 f6       	brne	.-72     	; 0xca4 <fputc+0x10>
 cec:	d8 01       	movw	r26, r16
 cee:	16 96       	adiw	r26, 0x06	; 6
 cf0:	8d 91       	ld	r24, X+
 cf2:	9c 91       	ld	r25, X
 cf4:	17 97       	sbiw	r26, 0x07	; 7
 cf6:	01 96       	adiw	r24, 0x01	; 1
 cf8:	17 96       	adiw	r26, 0x07	; 7
 cfa:	9c 93       	st	X, r25
 cfc:	8e 93       	st	-X, r24
 cfe:	16 97       	sbiw	r26, 0x06	; 6
 d00:	ce 01       	movw	r24, r28
 d02:	df 91       	pop	r29
 d04:	cf 91       	pop	r28
 d06:	1f 91       	pop	r17
 d08:	0f 91       	pop	r16
 d0a:	08 95       	ret

00000d0c <__ultoa_invert>:
 d0c:	fa 01       	movw	r30, r20
 d0e:	aa 27       	eor	r26, r26
 d10:	28 30       	cpi	r18, 0x08	; 8
 d12:	51 f1       	breq	.+84     	; 0xd68 <__ultoa_invert+0x5c>
 d14:	20 31       	cpi	r18, 0x10	; 16
 d16:	81 f1       	breq	.+96     	; 0xd78 <__ultoa_invert+0x6c>
 d18:	e8 94       	clt
 d1a:	6f 93       	push	r22
 d1c:	6e 7f       	andi	r22, 0xFE	; 254
 d1e:	6e 5f       	subi	r22, 0xFE	; 254
 d20:	7f 4f       	sbci	r23, 0xFF	; 255
 d22:	8f 4f       	sbci	r24, 0xFF	; 255
 d24:	9f 4f       	sbci	r25, 0xFF	; 255
 d26:	af 4f       	sbci	r26, 0xFF	; 255
 d28:	b1 e0       	ldi	r27, 0x01	; 1
 d2a:	3e d0       	rcall	.+124    	; 0xda8 <__ultoa_invert+0x9c>
 d2c:	b4 e0       	ldi	r27, 0x04	; 4
 d2e:	3c d0       	rcall	.+120    	; 0xda8 <__ultoa_invert+0x9c>
 d30:	67 0f       	add	r22, r23
 d32:	78 1f       	adc	r23, r24
 d34:	89 1f       	adc	r24, r25
 d36:	9a 1f       	adc	r25, r26
 d38:	a1 1d       	adc	r26, r1
 d3a:	68 0f       	add	r22, r24
 d3c:	79 1f       	adc	r23, r25
 d3e:	8a 1f       	adc	r24, r26
 d40:	91 1d       	adc	r25, r1
 d42:	a1 1d       	adc	r26, r1
 d44:	6a 0f       	add	r22, r26
 d46:	71 1d       	adc	r23, r1
 d48:	81 1d       	adc	r24, r1
 d4a:	91 1d       	adc	r25, r1
 d4c:	a1 1d       	adc	r26, r1
 d4e:	20 d0       	rcall	.+64     	; 0xd90 <__ultoa_invert+0x84>
 d50:	09 f4       	brne	.+2      	; 0xd54 <__ultoa_invert+0x48>
 d52:	68 94       	set
 d54:	3f 91       	pop	r19
 d56:	2a e0       	ldi	r18, 0x0A	; 10
 d58:	26 9f       	mul	r18, r22
 d5a:	11 24       	eor	r1, r1
 d5c:	30 19       	sub	r19, r0
 d5e:	30 5d       	subi	r19, 0xD0	; 208
 d60:	31 93       	st	Z+, r19
 d62:	de f6       	brtc	.-74     	; 0xd1a <__ultoa_invert+0xe>
 d64:	cf 01       	movw	r24, r30
 d66:	08 95       	ret
 d68:	46 2f       	mov	r20, r22
 d6a:	47 70       	andi	r20, 0x07	; 7
 d6c:	40 5d       	subi	r20, 0xD0	; 208
 d6e:	41 93       	st	Z+, r20
 d70:	b3 e0       	ldi	r27, 0x03	; 3
 d72:	0f d0       	rcall	.+30     	; 0xd92 <__ultoa_invert+0x86>
 d74:	c9 f7       	brne	.-14     	; 0xd68 <__ultoa_invert+0x5c>
 d76:	f6 cf       	rjmp	.-20     	; 0xd64 <__ultoa_invert+0x58>
 d78:	46 2f       	mov	r20, r22
 d7a:	4f 70       	andi	r20, 0x0F	; 15
 d7c:	40 5d       	subi	r20, 0xD0	; 208
 d7e:	4a 33       	cpi	r20, 0x3A	; 58
 d80:	18 f0       	brcs	.+6      	; 0xd88 <__ultoa_invert+0x7c>
 d82:	49 5d       	subi	r20, 0xD9	; 217
 d84:	31 fd       	sbrc	r19, 1
 d86:	40 52       	subi	r20, 0x20	; 32
 d88:	41 93       	st	Z+, r20
 d8a:	02 d0       	rcall	.+4      	; 0xd90 <__ultoa_invert+0x84>
 d8c:	a9 f7       	brne	.-22     	; 0xd78 <__ultoa_invert+0x6c>
 d8e:	ea cf       	rjmp	.-44     	; 0xd64 <__ultoa_invert+0x58>
 d90:	b4 e0       	ldi	r27, 0x04	; 4
 d92:	a6 95       	lsr	r26
 d94:	97 95       	ror	r25
 d96:	87 95       	ror	r24
 d98:	77 95       	ror	r23
 d9a:	67 95       	ror	r22
 d9c:	ba 95       	dec	r27
 d9e:	c9 f7       	brne	.-14     	; 0xd92 <__ultoa_invert+0x86>
 da0:	00 97       	sbiw	r24, 0x00	; 0
 da2:	61 05       	cpc	r22, r1
 da4:	71 05       	cpc	r23, r1
 da6:	08 95       	ret
 da8:	9b 01       	movw	r18, r22
 daa:	ac 01       	movw	r20, r24
 dac:	0a 2e       	mov	r0, r26
 dae:	06 94       	lsr	r0
 db0:	57 95       	ror	r21
 db2:	47 95       	ror	r20
 db4:	37 95       	ror	r19
 db6:	27 95       	ror	r18
 db8:	ba 95       	dec	r27
 dba:	c9 f7       	brne	.-14     	; 0xdae <__ultoa_invert+0xa2>
 dbc:	62 0f       	add	r22, r18
 dbe:	73 1f       	adc	r23, r19
 dc0:	84 1f       	adc	r24, r20
 dc2:	95 1f       	adc	r25, r21
 dc4:	a0 1d       	adc	r26, r0
 dc6:	08 95       	ret

00000dc8 <__prologue_saves__>:
 dc8:	2f 92       	push	r2
 dca:	3f 92       	push	r3
 dcc:	4f 92       	push	r4
 dce:	5f 92       	push	r5
 dd0:	6f 92       	push	r6
 dd2:	7f 92       	push	r7
 dd4:	8f 92       	push	r8
 dd6:	9f 92       	push	r9
 dd8:	af 92       	push	r10
 dda:	bf 92       	push	r11
 ddc:	cf 92       	push	r12
 dde:	df 92       	push	r13
 de0:	ef 92       	push	r14
 de2:	ff 92       	push	r15
 de4:	0f 93       	push	r16
 de6:	1f 93       	push	r17
 de8:	cf 93       	push	r28
 dea:	df 93       	push	r29
 dec:	cd b7       	in	r28, 0x3d	; 61
 dee:	de b7       	in	r29, 0x3e	; 62
 df0:	ca 1b       	sub	r28, r26
 df2:	db 0b       	sbc	r29, r27
 df4:	0f b6       	in	r0, 0x3f	; 63
 df6:	f8 94       	cli
 df8:	de bf       	out	0x3e, r29	; 62
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	cd bf       	out	0x3d, r28	; 61
 dfe:	09 94       	ijmp

00000e00 <__epilogue_restores__>:
 e00:	2a 88       	ldd	r2, Y+18	; 0x12
 e02:	39 88       	ldd	r3, Y+17	; 0x11
 e04:	48 88       	ldd	r4, Y+16	; 0x10
 e06:	5f 84       	ldd	r5, Y+15	; 0x0f
 e08:	6e 84       	ldd	r6, Y+14	; 0x0e
 e0a:	7d 84       	ldd	r7, Y+13	; 0x0d
 e0c:	8c 84       	ldd	r8, Y+12	; 0x0c
 e0e:	9b 84       	ldd	r9, Y+11	; 0x0b
 e10:	aa 84       	ldd	r10, Y+10	; 0x0a
 e12:	b9 84       	ldd	r11, Y+9	; 0x09
 e14:	c8 84       	ldd	r12, Y+8	; 0x08
 e16:	df 80       	ldd	r13, Y+7	; 0x07
 e18:	ee 80       	ldd	r14, Y+6	; 0x06
 e1a:	fd 80       	ldd	r15, Y+5	; 0x05
 e1c:	0c 81       	ldd	r16, Y+4	; 0x04
 e1e:	1b 81       	ldd	r17, Y+3	; 0x03
 e20:	aa 81       	ldd	r26, Y+2	; 0x02
 e22:	b9 81       	ldd	r27, Y+1	; 0x01
 e24:	ce 0f       	add	r28, r30
 e26:	d1 1d       	adc	r29, r1
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	de bf       	out	0x3e, r29	; 62
 e2e:	0f be       	out	0x3f, r0	; 63
 e30:	cd bf       	out	0x3d, r28	; 61
 e32:	ed 01       	movw	r28, r26
 e34:	08 95       	ret

00000e36 <_exit>:
 e36:	f8 94       	cli

00000e38 <__stop_program>:
 e38:	ff cf       	rjmp	.-2      	; 0xe38 <__stop_program>
