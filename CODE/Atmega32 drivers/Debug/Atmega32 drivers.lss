
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000148e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  0000148e  00001522  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000ea  008000ea  000015ac  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001608  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002f0  00000000  00000000  00001644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000483b  00000000  00000000  00001934  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000013dd  00000000  00000000  0000616f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000188a  00000000  00000000  0000754c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000070c  00000000  00000000  00008dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a02  00000000  00000000  000094e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c65  00000000  00000000  00009ee6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  0000bb4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 92 00 	jmp	0x124	; 0x124 <__vector_1>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 bb 04 	jmp	0x976	; 0x976 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f4 e1       	ldi	r31, 0x14	; 20
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3e       	cpi	r26, 0xEA	; 234
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	aa ee       	ldi	r26, 0xEA	; 234
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 3f       	cpi	r26, 0xF0	; 240
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 45 0a 	jmp	0x148a	; 0x148a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
u8 remLen				= 0;
u8 pktRecState			= 0; // 0 no packets, 1 publish type, 2 remLen


int main()
{
      92:	cf 93       	push	r28
      94:	df 93       	push	r29
      96:	00 d0       	rcall	.+0      	; 0x98 <main+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <main+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
	u8 data = 0;
	u8 tempstr[4]={0};
      9e:	19 82       	std	Y+1, r1	; 0x01
      a0:	1a 82       	std	Y+2, r1	; 0x02
      a2:	1b 82       	std	Y+3, r1	; 0x03
      a4:	1c 82       	std	Y+4, r1	; 0x04
	u8 temp2  = 1;	
	UART_INIT(9600);
      a6:	80 e8       	ldi	r24, 0x80	; 128
      a8:	95 e2       	ldi	r25, 0x25	; 37
      aa:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <UART_INIT>
	MQTT_Connect("1111");
      ae:	87 e6       	ldi	r24, 0x67	; 103
      b0:	90 e0       	ldi	r25, 0x00	; 0
      b2:	0e 94 41 05 	call	0xa82	; 0xa82 <MQTT_Connect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      b6:	2f ef       	ldi	r18, 0xFF	; 255
      b8:	89 e6       	ldi	r24, 0x69	; 105
      ba:	98 e1       	ldi	r25, 0x18	; 24
      bc:	21 50       	subi	r18, 0x01	; 1
      be:	80 40       	sbci	r24, 0x00	; 0
      c0:	90 40       	sbci	r25, 0x00	; 0
      c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x2a>
      c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x34>
      c6:	00 00       	nop
	_delay_ms(1000);
	MQTT_Subscribe("NTI/Control");
      c8:	8c e6       	ldi	r24, 0x6C	; 108
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <MQTT_Subscribe>
	Project_Init();
      d0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <Project_Init>
	//sei();
	u8 password[5]={0};
	turnOnFireAlarm();	
      d4:	0e 94 db 05 	call	0xbb6	; 0xbb6 <turnOnFireAlarm>

int main()
{
	u8 data = 0;
	u8 tempstr[4]={0};
	u8 temp2  = 1;	
      d8:	ff 24       	eor	r15, r15
      da:	f3 94       	inc	r15
	u8 password[5]={0};
	turnOnFireAlarm();	
	while(1)
	{
		//Get_Password(password);
		AnalogSensors();
      dc:	0e 94 3e 06 	call	0xc7c	; 0xc7c <AnalogSensors>
		itoa(temp2,tempstr,10);
      e0:	4a e0       	ldi	r20, 0x0A	; 10
      e2:	50 e0       	ldi	r21, 0x00	; 0
      e4:	8e 01       	movw	r16, r28
      e6:	0f 5f       	subi	r16, 0xFF	; 255
      e8:	1f 4f       	sbci	r17, 0xFF	; 255
      ea:	b8 01       	movw	r22, r16
      ec:	8f 2d       	mov	r24, r15
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 1b 07 	call	0xe36	; 0xe36 <itoa>
		MQTT_Publish("G/Temp",tempstr,strlen(tempstr));
      f4:	f8 01       	movw	r30, r16
      f6:	01 90       	ld	r0, Z+
      f8:	00 20       	and	r0, r0
      fa:	e9 f7       	brne	.-6      	; 0xf6 <main+0x64>
      fc:	31 97       	sbiw	r30, 0x01	; 1
      fe:	af 01       	movw	r20, r30
     100:	40 1b       	sub	r20, r16
     102:	51 0b       	sbc	r21, r17
     104:	b8 01       	movw	r22, r16
     106:	88 e7       	ldi	r24, 0x78	; 120
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 77 05 	call	0xaee	; 0xaee <MQTT_Publish>
		temp2++;
     10e:	f3 94       	inc	r15
     110:	2f ef       	ldi	r18, 0xFF	; 255
     112:	89 e6       	ldi	r24, 0x69	; 105
     114:	98 e1       	ldi	r25, 0x18	; 24
     116:	21 50       	subi	r18, 0x01	; 1
     118:	80 40       	sbci	r24, 0x00	; 0
     11a:	90 40       	sbci	r25, 0x00	; 0
     11c:	e1 f7       	brne	.-8      	; 0x116 <main+0x84>
     11e:	00 c0       	rjmp	.+0      	; 0x120 <main+0x8e>
     120:	00 00       	nop
     122:	dc cf       	rjmp	.-72     	; 0xdc <main+0x4a>

00000124 <__vector_1>:
	}
}


ISR(INT0_vect)
{
     124:	1f 92       	push	r1
     126:	0f 92       	push	r0
     128:	0f b6       	in	r0, 0x3f	; 63
     12a:	0f 92       	push	r0
     12c:	11 24       	eor	r1, r1
     12e:	2f 93       	push	r18
     130:	3f 93       	push	r19
     132:	4f 93       	push	r20
     134:	5f 93       	push	r21
     136:	6f 93       	push	r22
     138:	7f 93       	push	r23
     13a:	8f 93       	push	r24
     13c:	9f 93       	push	r25
     13e:	af 93       	push	r26
     140:	bf 93       	push	r27
     142:	ef 93       	push	r30
     144:	ff 93       	push	r31
	ptrINT();
     146:	e0 91 ea 00 	lds	r30, 0x00EA	; 0x8000ea <__data_end>
     14a:	f0 91 eb 00 	lds	r31, 0x00EB	; 0x8000eb <__data_end+0x1>
     14e:	09 95       	icall
}
     150:	ff 91       	pop	r31
     152:	ef 91       	pop	r30
     154:	bf 91       	pop	r27
     156:	af 91       	pop	r26
     158:	9f 91       	pop	r25
     15a:	8f 91       	pop	r24
     15c:	7f 91       	pop	r23
     15e:	6f 91       	pop	r22
     160:	5f 91       	pop	r21
     162:	4f 91       	pop	r20
     164:	3f 91       	pop	r19
     166:	2f 91       	pop	r18
     168:	0f 90       	pop	r0
     16a:	0f be       	out	0x3f, r0	; 63
     16c:	0f 90       	pop	r0
     16e:	1f 90       	pop	r1
     170:	18 95       	reti

00000172 <DHT_start>:
 */ 
#include "DHT.h"
#include <string.h>
void DHT_start(void)
{
	pinDirection(DHT_PIN,OUTPUT);		
     172:	61 e0       	ldi	r22, 0x01	; 1
     174:	82 e1       	ldi	r24, 0x12	; 18
     176:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
     17a:	60 e0       	ldi	r22, 0x00	; 0
     17c:	82 e1       	ldi	r24, 0x12	; 18
     17e:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     182:	8f e3       	ldi	r24, 0x3F	; 63
     184:	9c e9       	ldi	r25, 0x9C	; 156
     186:	01 97       	sbiw	r24, 0x01	; 1
     188:	f1 f7       	brne	.-4      	; 0x186 <DHT_start+0x14>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <DHT_start+0x1a>
     18c:	00 00       	nop
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
     18e:	61 e0       	ldi	r22, 0x01	; 1
     190:	82 e1       	ldi	r24, 0x12	; 18
     192:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     196:	08 95       	ret

00000198 <DHT_read>:
}

u8 DHT_read(void)
{
     198:	cf 93       	push	r28
     19a:	df 93       	push	r29
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     19c:	d0 e0       	ldi	r29, 0x00	; 0
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
     19e:	c0 e0       	ldi	r28, 0x00	; 0
	for (i=0;i<8;i++)
     1a0:	1b c0       	rjmp	.+54     	; 0x1d8 <DHT_read+0x40>
	{
		while (readPin(DHT_PIN)==0);
     1a2:	82 e1       	ldi	r24, 0x12	; 18
     1a4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <readPin>
     1a8:	88 23       	and	r24, r24
     1aa:	d9 f3       	breq	.-10     	; 0x1a2 <DHT_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1ac:	80 e5       	ldi	r24, 0x50	; 80
     1ae:	8a 95       	dec	r24
     1b0:	f1 f7       	brne	.-4      	; 0x1ae <DHT_read+0x16>
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     1b2:	82 e1       	ldi	r24, 0x12	; 18
     1b4:	0e 94 58 04 	call	0x8b0	; 0x8b0 <readPin>
     1b8:	81 11       	cpse	r24, r1
     1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <DHT_read+0x28>
		{
			bitLogic=bitLogic<<1;
     1bc:	cc 0f       	add	r28, r28
     1be:	06 c0       	rjmp	.+12     	; 0x1cc <DHT_read+0x34>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     1c0:	8c 2f       	mov	r24, r28
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	88 0f       	add	r24, r24
     1c6:	99 1f       	adc	r25, r25
     1c8:	c8 2f       	mov	r28, r24
     1ca:	c1 60       	ori	r28, 0x01	; 1
		}
		
		while(readPin(DHT_PIN));
     1cc:	82 e1       	ldi	r24, 0x12	; 18
     1ce:	0e 94 58 04 	call	0x8b0	; 0x8b0 <readPin>
     1d2:	81 11       	cpse	r24, r1
     1d4:	fb cf       	rjmp	.-10     	; 0x1cc <DHT_read+0x34>
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     1d6:	df 5f       	subi	r29, 0xFF	; 255
     1d8:	d8 30       	cpi	r29, 0x08	; 8
     1da:	18 f3       	brcs	.-58     	; 0x1a2 <DHT_read+0xa>
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
}
     1dc:	8c 2f       	mov	r24, r28
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <DHT_Response>:

void DHT_Response(void)
{
	pinDirection(DHT_PIN,INPUT);
     1e4:	60 e0       	ldi	r22, 0x00	; 0
     1e6:	82 e1       	ldi	r24, 0x12	; 18
     1e8:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
	while(readPin(DHT_PIN));
     1ec:	82 e1       	ldi	r24, 0x12	; 18
     1ee:	0e 94 58 04 	call	0x8b0	; 0x8b0 <readPin>
     1f2:	81 11       	cpse	r24, r1
     1f4:	fb cf       	rjmp	.-10     	; 0x1ec <DHT_Response+0x8>
	while(!readPin(DHT_PIN));
     1f6:	82 e1       	ldi	r24, 0x12	; 18
     1f8:	0e 94 58 04 	call	0x8b0	; 0x8b0 <readPin>
     1fc:	88 23       	and	r24, r24
     1fe:	d9 f3       	breq	.-10     	; 0x1f6 <DHT_Response+0x12>
	while(readPin(DHT_PIN));
     200:	82 e1       	ldi	r24, 0x12	; 18
     202:	0e 94 58 04 	call	0x8b0	; 0x8b0 <readPin>
     206:	81 11       	cpse	r24, r1
     208:	fb cf       	rjmp	.-10     	; 0x200 <DHT_Response+0x1c>
}
     20a:	08 95       	ret

0000020c <intTostring>:
	
}


void intTostring(u16 hum_1,u16 temp_1,u8* temp,u8* hum )
{
     20c:	4f 92       	push	r4
     20e:	5f 92       	push	r5
     210:	6f 92       	push	r6
     212:	7f 92       	push	r7
     214:	8f 92       	push	r8
     216:	9f 92       	push	r9
     218:	af 92       	push	r10
     21a:	bf 92       	push	r11
     21c:	cf 92       	push	r12
     21e:	df 92       	push	r13
     220:	ef 92       	push	r14
     222:	ff 92       	push	r15
     224:	0f 93       	push	r16
     226:	1f 93       	push	r17
     228:	cf 93       	push	r28
     22a:	df 93       	push	r29
     22c:	cd b7       	in	r28, 0x3d	; 61
     22e:	de b7       	in	r29, 0x3e	; 62
     230:	66 97       	sbiw	r28, 0x16	; 22
     232:	0f b6       	in	r0, 0x3f	; 63
     234:	f8 94       	cli
     236:	de bf       	out	0x3e, r29	; 62
     238:	0f be       	out	0x3f, r0	; 63
     23a:	cd bf       	out	0x3d, r28	; 61
     23c:	3c 01       	movw	r6, r24
     23e:	5b 01       	movw	r10, r22
     240:	4a 01       	movw	r8, r20
     242:	42 2e       	mov	r4, r18
     244:	53 2e       	mov	r5, r19
	u8 dot[]=".";
     246:	8e e2       	ldi	r24, 0x2E	; 46
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	9a 83       	std	Y+2, r25	; 0x02
     24c:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_2[10]={0},hum_2[10]={0};
     24e:	8a e0       	ldi	r24, 0x0A	; 10
     250:	fe 01       	movw	r30, r28
     252:	33 96       	adiw	r30, 0x03	; 3
     254:	df 01       	movw	r26, r30
     256:	98 2f       	mov	r25, r24
     258:	1d 92       	st	X+, r1
     25a:	9a 95       	dec	r25
     25c:	e9 f7       	brne	.-6      	; 0x258 <intTostring+0x4c>
     25e:	3a 96       	adiw	r30, 0x0a	; 10
     260:	df 01       	movw	r26, r30
     262:	1d 92       	st	X+, r1
     264:	8a 95       	dec	r24
     266:	e9 f7       	brne	.-6      	; 0x262 <intTostring+0x56>
			if (GETBit(temp_1,15)==1)
     268:	77 23       	and	r23, r23
     26a:	34 f4       	brge	.+12     	; 0x278 <intTostring+0x6c>
			{
				CLRBit(temp_1,15);
     26c:	e8 94       	clt
     26e:	b7 f8       	bld	r11, 7
				temp[0]='-';
     270:	8d e2       	ldi	r24, 0x2D	; 45
     272:	fa 01       	movw	r30, r20
     274:	81 93       	st	Z+, r24
     276:	4f 01       	movw	r8, r30
				temp++;
			}
			sprintf(temp,"%u",(temp_1)/10);
     278:	95 01       	movw	r18, r10
     27a:	ad ec       	ldi	r26, 0xCD	; 205
     27c:	bc ec       	ldi	r27, 0xCC	; 204
     27e:	0e 94 01 07 	call	0xe02	; 0xe02 <__umulhisi3>
     282:	6c 01       	movw	r12, r24
     284:	d6 94       	lsr	r13
     286:	c7 94       	ror	r12
     288:	d6 94       	lsr	r13
     28a:	c7 94       	ror	r12
     28c:	d6 94       	lsr	r13
     28e:	c7 94       	ror	r12
     290:	df 92       	push	r13
     292:	cf 92       	push	r12
     294:	0f e7       	ldi	r16, 0x7F	; 127
     296:	10 e0       	ldi	r17, 0x00	; 0
     298:	1f 93       	push	r17
     29a:	0f 93       	push	r16
     29c:	9f 92       	push	r9
     29e:	8f 92       	push	r8
     2a0:	0e 94 4b 07 	call	0xe96	; 0xe96 <sprintf>
			sprintf(hum,"%u",(hum_1)/10);
     2a4:	93 01       	movw	r18, r6
     2a6:	ad ec       	ldi	r26, 0xCD	; 205
     2a8:	bc ec       	ldi	r27, 0xCC	; 204
     2aa:	0e 94 01 07 	call	0xe02	; 0xe02 <__umulhisi3>
     2ae:	7c 01       	movw	r14, r24
     2b0:	f6 94       	lsr	r15
     2b2:	e7 94       	ror	r14
     2b4:	f6 94       	lsr	r15
     2b6:	e7 94       	ror	r14
     2b8:	f6 94       	lsr	r15
     2ba:	e7 94       	ror	r14
     2bc:	ff 92       	push	r15
     2be:	ef 92       	push	r14
     2c0:	1f 93       	push	r17
     2c2:	0f 93       	push	r16
     2c4:	5f 92       	push	r5
     2c6:	4f 92       	push	r4
     2c8:	0e 94 4b 07 	call	0xe96	; 0xe96 <sprintf>
			
			sprintf(temp_2,"%u",((temp_1)%10));
     2cc:	c6 01       	movw	r24, r12
     2ce:	88 0f       	add	r24, r24
     2d0:	99 1f       	adc	r25, r25
     2d2:	cc 0c       	add	r12, r12
     2d4:	dd 1c       	adc	r13, r13
     2d6:	cc 0c       	add	r12, r12
     2d8:	dd 1c       	adc	r13, r13
     2da:	cc 0c       	add	r12, r12
     2dc:	dd 1c       	adc	r13, r13
     2de:	c8 0e       	add	r12, r24
     2e0:	d9 1e       	adc	r13, r25
     2e2:	ac 18       	sub	r10, r12
     2e4:	bd 08       	sbc	r11, r13
     2e6:	bf 92       	push	r11
     2e8:	af 92       	push	r10
     2ea:	1f 93       	push	r17
     2ec:	0f 93       	push	r16
     2ee:	6e 01       	movw	r12, r28
     2f0:	f3 e0       	ldi	r31, 0x03	; 3
     2f2:	cf 0e       	add	r12, r31
     2f4:	d1 1c       	adc	r13, r1
     2f6:	df 92       	push	r13
     2f8:	cf 92       	push	r12
     2fa:	0e 94 4b 07 	call	0xe96	; 0xe96 <sprintf>
			sprintf(hum_2,"%u",((hum_1)%10));
     2fe:	c7 01       	movw	r24, r14
     300:	88 0f       	add	r24, r24
     302:	99 1f       	adc	r25, r25
     304:	ee 0c       	add	r14, r14
     306:	ff 1c       	adc	r15, r15
     308:	ee 0c       	add	r14, r14
     30a:	ff 1c       	adc	r15, r15
     30c:	ee 0c       	add	r14, r14
     30e:	ff 1c       	adc	r15, r15
     310:	e8 0e       	add	r14, r24
     312:	f9 1e       	adc	r15, r25
     314:	6e 18       	sub	r6, r14
     316:	7f 08       	sbc	r7, r15
     318:	7f 92       	push	r7
     31a:	6f 92       	push	r6
     31c:	1f 93       	push	r17
     31e:	0f 93       	push	r16
     320:	8e 01       	movw	r16, r28
     322:	03 5f       	subi	r16, 0xF3	; 243
     324:	1f 4f       	sbci	r17, 0xFF	; 255
     326:	1f 93       	push	r17
     328:	0f 93       	push	r16
     32a:	0e 94 4b 07 	call	0xe96	; 0xe96 <sprintf>
			
			strcat(hum,dot);
     32e:	be 01       	movw	r22, r28
     330:	6f 5f       	subi	r22, 0xFF	; 255
     332:	7f 4f       	sbci	r23, 0xFF	; 255
     334:	84 2d       	mov	r24, r4
     336:	95 2d       	mov	r25, r5
     338:	0e 94 10 07 	call	0xe20	; 0xe20 <strcat>
			strcat(temp,dot);
     33c:	be 01       	movw	r22, r28
     33e:	6f 5f       	subi	r22, 0xFF	; 255
     340:	7f 4f       	sbci	r23, 0xFF	; 255
     342:	c4 01       	movw	r24, r8
     344:	0e 94 10 07 	call	0xe20	; 0xe20 <strcat>
			strcat(hum,hum_2);
     348:	b8 01       	movw	r22, r16
     34a:	84 2d       	mov	r24, r4
     34c:	95 2d       	mov	r25, r5
     34e:	0e 94 10 07 	call	0xe20	; 0xe20 <strcat>
			strcat(temp,temp_2);
     352:	b6 01       	movw	r22, r12
     354:	c4 01       	movw	r24, r8
     356:	0e 94 10 07 	call	0xe20	; 0xe20 <strcat>
     35a:	0f b6       	in	r0, 0x3f	; 63
     35c:	f8 94       	cli
     35e:	de bf       	out	0x3e, r29	; 62
     360:	0f be       	out	0x3f, r0	; 63
     362:	cd bf       	out	0x3d, r28	; 61
     364:	66 96       	adiw	r28, 0x16	; 22
     366:	0f b6       	in	r0, 0x3f	; 63
     368:	f8 94       	cli
     36a:	de bf       	out	0x3e, r29	; 62
     36c:	0f be       	out	0x3f, r0	; 63
     36e:	cd bf       	out	0x3d, r28	; 61
     370:	df 91       	pop	r29
     372:	cf 91       	pop	r28
     374:	1f 91       	pop	r17
     376:	0f 91       	pop	r16
     378:	ff 90       	pop	r15
     37a:	ef 90       	pop	r14
     37c:	df 90       	pop	r13
     37e:	cf 90       	pop	r12
     380:	bf 90       	pop	r11
     382:	af 90       	pop	r10
     384:	9f 90       	pop	r9
     386:	8f 90       	pop	r8
     388:	7f 90       	pop	r7
     38a:	6f 90       	pop	r6
     38c:	5f 90       	pop	r5
     38e:	4f 90       	pop	r4
     390:	08 95       	ret

00000392 <DHT_Represent>:
	while(!readPin(DHT_PIN));
	while(readPin(DHT_PIN));
}

BOOL DHT_Represent(u8* hum,u8* temp)
{
     392:	df 92       	push	r13
     394:	ef 92       	push	r14
     396:	ff 92       	push	r15
     398:	0f 93       	push	r16
     39a:	1f 93       	push	r17
     39c:	cf 93       	push	r28
     39e:	df 93       	push	r29
     3a0:	7c 01       	movw	r14, r24
     3a2:	8b 01       	movw	r16, r22
	u16 temp_1=0,hum_1=0;
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
	DHT_start();
     3a4:	0e 94 b9 00 	call	0x172	; 0x172 <DHT_start>
	DHT_Response();
     3a8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <DHT_Response>
	humidity_I=DHT_read();
     3ac:	0e 94 cc 00 	call	0x198	; 0x198 <DHT_read>
     3b0:	d8 2f       	mov	r29, r24
	humidity_D=DHT_read();
     3b2:	0e 94 cc 00 	call	0x198	; 0x198 <DHT_read>
     3b6:	d8 2e       	mov	r13, r24
	temp_I=DHT_read();
     3b8:	0e 94 cc 00 	call	0x198	; 0x198 <DHT_read>
     3bc:	c8 2f       	mov	r28, r24
	temp_D=DHT_read();
     3be:	0e 94 cc 00 	call	0x198	; 0x198 <DHT_read>
	
		hum_1=((humidity_I<<8)|humidity_D);
     3c2:	ed 2f       	mov	r30, r29
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	fe 2f       	mov	r31, r30
     3c8:	ee 27       	eor	r30, r30
		temp_1=((temp_I<<8)|temp_D);
     3ca:	6c 2f       	mov	r22, r28
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	76 2f       	mov	r23, r22
     3d0:	66 27       	eor	r22, r22
     3d2:	68 2b       	or	r22, r24
		
		intTostring(hum_1,temp_1,temp,hum);
     3d4:	97 01       	movw	r18, r14
     3d6:	a8 01       	movw	r20, r16
     3d8:	cf 01       	movw	r24, r30
     3da:	8d 29       	or	r24, r13
     3dc:	0e 94 06 01 	call	0x20c	; 0x20c <intTostring>
		return TRUE;
	
}
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	1f 91       	pop	r17
     3e8:	0f 91       	pop	r16
     3ea:	ff 90       	pop	r15
     3ec:	ef 90       	pop	r14
     3ee:	df 90       	pop	r13
     3f0:	08 95       	ret

000003f2 <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
     3f2:	41 e0       	ldi	r20, 0x01	; 1
     3f4:	6f e0       	ldi	r22, 0x0F	; 15
     3f6:	87 e3       	ldi	r24, 0x37	; 55
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	0e 94 ac 04 	call	0x958	; 0x958 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
     3fe:	41 e0       	ldi	r20, 0x01	; 1
     400:	6f e0       	ldi	r22, 0x0F	; 15
     402:	88 e3       	ldi	r24, 0x38	; 56
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
     40a:	40 e0       	ldi	r20, 0x00	; 0
     40c:	60 e7       	ldi	r22, 0x70	; 112
     40e:	87 e3       	ldi	r24, 0x37	; 55
     410:	90 e0       	ldi	r25, 0x00	; 0
     412:	0e 94 ac 04 	call	0x958	; 0x958 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	60 e7       	ldi	r22, 0x70	; 112
     41a:	88 e3       	ldi	r24, 0x38	; 56
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
     422:	08 95       	ret

00000424 <LCD_latch>:

void disp_charXY(u8 row,u8 col,u8 letter)
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
     424:	61 e0       	ldi	r22, 0x01	; 1
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     42c:	85 e8       	ldi	r24, 0x85	; 133
     42e:	8a 95       	dec	r24
     430:	f1 f7       	brne	.-4      	; 0x42e <LCD_latch+0xa>
     432:	00 00       	nop
     434:	60 e0       	ldi	r22, 0x00	; 0
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     43c:	85 e8       	ldi	r24, 0x85	; 133
     43e:	8a 95       	dec	r24
     440:	f1 f7       	brne	.-4      	; 0x43e <LCD_latch+0x1a>
     442:	00 00       	nop
     444:	08 95       	ret

00000446 <SendToLCD>:
     446:	cf 93       	push	r28
     448:	c8 2f       	mov	r28, r24
     44a:	40 e0       	ldi	r20, 0x00	; 0
     44c:	60 ef       	ldi	r22, 0xF0	; 240
     44e:	8b e3       	ldi	r24, 0x3B	; 59
     450:	90 e0       	ldi	r25, 0x00	; 0
     452:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
     456:	6c 2f       	mov	r22, r28
     458:	60 7f       	andi	r22, 0xF0	; 240
     45a:	41 e0       	ldi	r20, 0x01	; 1
     45c:	8b e3       	ldi	r24, 0x3B	; 59
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
     464:	0e 94 12 02 	call	0x424	; 0x424 <LCD_latch>
     468:	40 e0       	ldi	r20, 0x00	; 0
     46a:	60 ef       	ldi	r22, 0xF0	; 240
     46c:	8b e3       	ldi	r24, 0x3B	; 59
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
     474:	80 e1       	ldi	r24, 0x10	; 16
     476:	c8 9f       	mul	r28, r24
     478:	b0 01       	movw	r22, r0
     47a:	11 24       	eor	r1, r1
     47c:	41 e0       	ldi	r20, 0x01	; 1
     47e:	8b e3       	ldi	r24, 0x3B	; 59
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
     486:	0e 94 12 02 	call	0x424	; 0x424 <LCD_latch>
     48a:	85 e8       	ldi	r24, 0x85	; 133
     48c:	8a 95       	dec	r24
     48e:	f1 f7       	brne	.-4      	; 0x48c <SendToLCD+0x46>
     490:	00 00       	nop
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <LCD_send_cmd>:
     496:	cf 93       	push	r28
     498:	c8 2f       	mov	r28, r24
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     4a2:	8c 2f       	mov	r24, r28
     4a4:	0e 94 23 02 	call	0x446	; 0x446 <SendToLCD>
     4a8:	cf 91       	pop	r28
     4aa:	08 95       	ret

000004ac <LCD_CLEAR>:
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     4b2:	8f e9       	ldi	r24, 0x9F	; 159
     4b4:	9f e0       	ldi	r25, 0x0F	; 15
     4b6:	01 97       	sbiw	r24, 0x01	; 1
     4b8:	f1 f7       	brne	.-4      	; 0x4b6 <LCD_CLEAR+0xa>
     4ba:	00 c0       	rjmp	.+0      	; 0x4bc <LCD_CLEAR+0x10>
     4bc:	00 00       	nop
     4be:	08 95       	ret

000004c0 <LCD_ret_Home>:
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     4c6:	8f e9       	ldi	r24, 0x9F	; 159
     4c8:	9f e0       	ldi	r25, 0x0F	; 15
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	f1 f7       	brne	.-4      	; 0x4ca <LCD_ret_Home+0xa>
     4ce:	00 c0       	rjmp	.+0      	; 0x4d0 <LCD_ret_Home+0x10>
     4d0:	00 00       	nop
     4d2:	08 95       	ret

000004d4 <LCD_init>:
     4d4:	41 e0       	ldi	r20, 0x01	; 1
     4d6:	60 ef       	ldi	r22, 0xF0	; 240
     4d8:	8a e3       	ldi	r24, 0x3A	; 58
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	0e 94 ac 04 	call	0x958	; 0x958 <pinsDirection>
     4e0:	41 e0       	ldi	r20, 0x01	; 1
     4e2:	6c e0       	ldi	r22, 0x0C	; 12
     4e4:	8a e3       	ldi	r24, 0x3A	; 58
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	0e 94 ac 04 	call	0x958	; 0x958 <pinsDirection>
     4ec:	2f ef       	ldi	r18, 0xFF	; 255
     4ee:	89 ef       	ldi	r24, 0xF9	; 249
     4f0:	90 e0       	ldi	r25, 0x00	; 0
     4f2:	21 50       	subi	r18, 0x01	; 1
     4f4:	80 40       	sbci	r24, 0x00	; 0
     4f6:	90 40       	sbci	r25, 0x00	; 0
     4f8:	e1 f7       	brne	.-8      	; 0x4f2 <LCD_init+0x1e>
     4fa:	00 c0       	rjmp	.+0      	; 0x4fc <LCD_init+0x28>
     4fc:	00 00       	nop
     4fe:	0e 94 60 02 	call	0x4c0	; 0x4c0 <LCD_ret_Home>
     502:	86 e0       	ldi	r24, 0x06	; 6
     504:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     508:	8c e0       	ldi	r24, 0x0C	; 12
     50a:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     50e:	80 e1       	ldi	r24, 0x10	; 16
     510:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     514:	88 e2       	ldi	r24, 0x28	; 40
     516:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     51a:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_CLEAR>
     51e:	08 95       	ret

00000520 <LCD_send_data>:
     520:	cf 93       	push	r28
     522:	c8 2f       	mov	r28, r24
     524:	61 e0       	ldi	r22, 0x01	; 1
     526:	82 e0       	ldi	r24, 0x02	; 2
     528:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     52c:	8c 2f       	mov	r24, r28
     52e:	0e 94 23 02 	call	0x446	; 0x446 <SendToLCD>
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <disp_char>:
     536:	0e 94 90 02 	call	0x520	; 0x520 <LCD_send_data>
     53a:	08 95       	ret

0000053c <disp_str>:
     53c:	0f 93       	push	r16
     53e:	1f 93       	push	r17
     540:	cf 93       	push	r28
     542:	8c 01       	movw	r16, r24
     544:	c0 e0       	ldi	r28, 0x00	; 0
     546:	03 c0       	rjmp	.+6      	; 0x54e <disp_str+0x12>
     548:	0e 94 9b 02 	call	0x536	; 0x536 <disp_char>
     54c:	cf 5f       	subi	r28, 0xFF	; 255
     54e:	f8 01       	movw	r30, r16
     550:	ec 0f       	add	r30, r28
     552:	f1 1d       	adc	r31, r1
     554:	80 81       	ld	r24, Z
     556:	81 11       	cpse	r24, r1
     558:	f7 cf       	rjmp	.-18     	; 0x548 <disp_str+0xc>
     55a:	cf 91       	pop	r28
     55c:	1f 91       	pop	r17
     55e:	0f 91       	pop	r16
     560:	08 95       	ret

00000562 <LCD_GOTXY>:
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	29 f4       	brne	.+10     	; 0x570 <LCD_GOTXY+0xe>
     566:	8f e7       	ldi	r24, 0x7F	; 127
     568:	86 0f       	add	r24, r22
     56a:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     56e:	08 95       	ret
     570:	82 30       	cpi	r24, 0x02	; 2
     572:	29 f4       	brne	.+10     	; 0x57e <LCD_GOTXY+0x1c>
     574:	8f eb       	ldi	r24, 0xBF	; 191
     576:	86 0f       	add	r24, r22
     578:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     57c:	08 95       	ret
     57e:	83 30       	cpi	r24, 0x03	; 3
     580:	29 f4       	brne	.+10     	; 0x58c <LCD_GOTXY+0x2a>
     582:	8f e8       	ldi	r24, 0x8F	; 143
     584:	86 0f       	add	r24, r22
     586:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     58a:	08 95       	ret
     58c:	84 30       	cpi	r24, 0x04	; 4
     58e:	21 f4       	brne	.+8      	; 0x598 <LCD_GOTXY+0x36>
     590:	8f ec       	ldi	r24, 0xCF	; 207
     592:	86 0f       	add	r24, r22
     594:	0e 94 4b 02 	call	0x496	; 0x496 <LCD_send_cmd>
     598:	08 95       	ret

0000059a <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
     59e:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     5a0:	0e 94 b1 02 	call	0x562	; 0x562 <LCD_GOTXY>
	disp_str(str);
     5a4:	ce 01       	movw	r24, r28
     5a6:	0e 94 9e 02 	call	0x53c	; 0x53c <disp_str>
}
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <disp_int>:


void disp_int(u32 intvalue)
{
     5b0:	0f 93       	push	r16
     5b2:	1f 93       	push	r17
     5b4:	cf 93       	push	r28
     5b6:	df 93       	push	r29
     5b8:	cd b7       	in	r28, 0x3d	; 61
     5ba:	de b7       	in	r29, 0x3e	; 62
     5bc:	2b 97       	sbiw	r28, 0x0b	; 11
     5be:	0f b6       	in	r0, 0x3f	; 63
     5c0:	f8 94       	cli
     5c2:	de bf       	out	0x3e, r29	; 62
     5c4:	0f be       	out	0x3f, r0	; 63
     5c6:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     5c8:	8e 01       	movw	r16, r28
     5ca:	0f 5f       	subi	r16, 0xFF	; 255
     5cc:	1f 4f       	sbci	r17, 0xFF	; 255
     5ce:	2b e0       	ldi	r18, 0x0B	; 11
     5d0:	f8 01       	movw	r30, r16
     5d2:	11 92       	st	Z+, r1
     5d4:	2a 95       	dec	r18
     5d6:	e9 f7       	brne	.-6      	; 0x5d2 <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     5d8:	9f 93       	push	r25
     5da:	8f 93       	push	r24
     5dc:	7f 93       	push	r23
     5de:	6f 93       	push	r22
     5e0:	8f e7       	ldi	r24, 0x7F	; 127
     5e2:	90 e0       	ldi	r25, 0x00	; 0
     5e4:	9f 93       	push	r25
     5e6:	8f 93       	push	r24
     5e8:	1f 93       	push	r17
     5ea:	0f 93       	push	r16
     5ec:	0e 94 4b 07 	call	0xe96	; 0xe96 <sprintf>
		disp_str(string);
     5f0:	c8 01       	movw	r24, r16
     5f2:	0e 94 9e 02 	call	0x53c	; 0x53c <disp_str>
}
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	2b 96       	adiw	r28, 0x0b	; 11
     602:	0f b6       	in	r0, 0x3f	; 63
     604:	f8 94       	cli
     606:	de bf       	out	0x3e, r29	; 62
     608:	0f be       	out	0x3f, r0	; 63
     60a:	cd bf       	out	0x3d, r28	; 61
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <Callback>:
		
		case INT_0:
		MCUCR|=sense_control;
		break;
		case INT_1:
		MCUCR|=(sense_control<<2);
     616:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__data_end+0x1>
     61a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__data_end>
     61e:	08 95       	ret

00000620 <GLOBAL_INT_EN>:
	}
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	60 e8       	ldi	r22, 0x80	; 128
     624:	8f e5       	ldi	r24, 0x5F	; 95
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	0e 94 9d 04 	call	0x93a	; 0x93a <writePins>
     62c:	08 95       	ret

0000062e <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
     62e:	87 b1       	in	r24, 0x07	; 7
     630:	80 64       	ori	r24, 0x40	; 64
     632:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
     634:	86 b1       	in	r24, 0x06	; 6
     636:	87 68       	ori	r24, 0x87	; 135
     638:	86 b9       	out	0x06, r24	; 6
     63a:	08 95       	ret

0000063c <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
     63c:	97 b1       	in	r25, 0x07	; 7
     63e:	90 7e       	andi	r25, 0xE0	; 224
     640:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
     642:	97 b1       	in	r25, 0x07	; 7
     644:	89 2b       	or	r24, r25
     646:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
     648:	86 b1       	in	r24, 0x06	; 6
     64a:	80 64       	ori	r24, 0x40	; 64
     64c:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
     64e:	36 99       	sbic	0x06, 6	; 6
     650:	fe cf       	rjmp	.-4      	; 0x64e <read_analog+0x12>
	return (ADC);		
     652:	84 b1       	in	r24, 0x04	; 4
     654:	95 b1       	in	r25, 0x05	; 5
}
     656:	08 95       	ret

00000658 <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
     658:	88 30       	cpi	r24, 0x08	; 8
     65a:	f8 f4       	brcc	.+62     	; 0x69a <writePin+0x42>
		if(logic==HIGH)
     65c:	61 30       	cpi	r22, 0x01	; 1
     65e:	69 f4       	brne	.+26     	; 0x67a <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
     660:	4b b3       	in	r20, 0x1b	; 27
     662:	21 e0       	ldi	r18, 0x01	; 1
     664:	30 e0       	ldi	r19, 0x00	; 0
     666:	b9 01       	movw	r22, r18
     668:	02 c0       	rjmp	.+4      	; 0x66e <writePin+0x16>
     66a:	66 0f       	add	r22, r22
     66c:	77 1f       	adc	r23, r23
     66e:	8a 95       	dec	r24
     670:	e2 f7       	brpl	.-8      	; 0x66a <writePin+0x12>
     672:	cb 01       	movw	r24, r22
     674:	84 2b       	or	r24, r20
     676:	8b bb       	out	0x1b, r24	; 27
     678:	08 95       	ret
		else if(logic==LOW)
     67a:	61 11       	cpse	r22, r1
     67c:	82 c0       	rjmp	.+260    	; 0x782 <writePin+0x12a>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
     67e:	4b b3       	in	r20, 0x1b	; 27
     680:	21 e0       	ldi	r18, 0x01	; 1
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	b9 01       	movw	r22, r18
     686:	02 c0       	rjmp	.+4      	; 0x68c <writePin+0x34>
     688:	66 0f       	add	r22, r22
     68a:	77 1f       	adc	r23, r23
     68c:	8a 95       	dec	r24
     68e:	e2 f7       	brpl	.-8      	; 0x688 <writePin+0x30>
     690:	cb 01       	movw	r24, r22
     692:	80 95       	com	r24
     694:	84 23       	and	r24, r20
     696:	8b bb       	out	0x1b, r24	; 27
     698:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
     69a:	98 ef       	ldi	r25, 0xF8	; 248
     69c:	98 0f       	add	r25, r24
     69e:	98 30       	cpi	r25, 0x08	; 8
     6a0:	18 f5       	brcc	.+70     	; 0x6e8 <writePin+0x90>
		if(logic==HIGH)
     6a2:	61 30       	cpi	r22, 0x01	; 1
     6a4:	79 f4       	brne	.+30     	; 0x6c4 <writePin+0x6c>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
     6a6:	48 b3       	in	r20, 0x18	; 24
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	08 97       	sbiw	r24, 0x08	; 8
     6ac:	21 e0       	ldi	r18, 0x01	; 1
     6ae:	30 e0       	ldi	r19, 0x00	; 0
     6b0:	b9 01       	movw	r22, r18
     6b2:	02 c0       	rjmp	.+4      	; 0x6b8 <writePin+0x60>
     6b4:	66 0f       	add	r22, r22
     6b6:	77 1f       	adc	r23, r23
     6b8:	8a 95       	dec	r24
     6ba:	e2 f7       	brpl	.-8      	; 0x6b4 <writePin+0x5c>
     6bc:	cb 01       	movw	r24, r22
     6be:	84 2b       	or	r24, r20
     6c0:	88 bb       	out	0x18, r24	; 24
     6c2:	08 95       	ret
		else if(logic==LOW)
     6c4:	61 11       	cpse	r22, r1
     6c6:	5d c0       	rjmp	.+186    	; 0x782 <writePin+0x12a>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
     6c8:	48 b3       	in	r20, 0x18	; 24
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	08 97       	sbiw	r24, 0x08	; 8
     6ce:	21 e0       	ldi	r18, 0x01	; 1
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	b9 01       	movw	r22, r18
     6d4:	02 c0       	rjmp	.+4      	; 0x6da <writePin+0x82>
     6d6:	66 0f       	add	r22, r22
     6d8:	77 1f       	adc	r23, r23
     6da:	8a 95       	dec	r24
     6dc:	e2 f7       	brpl	.-8      	; 0x6d6 <writePin+0x7e>
     6de:	cb 01       	movw	r24, r22
     6e0:	80 95       	com	r24
     6e2:	84 23       	and	r24, r20
     6e4:	88 bb       	out	0x18, r24	; 24
     6e6:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
     6e8:	90 ef       	ldi	r25, 0xF0	; 240
     6ea:	98 0f       	add	r25, r24
     6ec:	98 30       	cpi	r25, 0x08	; 8
     6ee:	18 f5       	brcc	.+70     	; 0x736 <writePin+0xde>
		if(logic==HIGH)
     6f0:	61 30       	cpi	r22, 0x01	; 1
     6f2:	79 f4       	brne	.+30     	; 0x712 <writePin+0xba>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
     6f4:	45 b3       	in	r20, 0x15	; 21
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	40 97       	sbiw	r24, 0x10	; 16
     6fa:	21 e0       	ldi	r18, 0x01	; 1
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	b9 01       	movw	r22, r18
     700:	02 c0       	rjmp	.+4      	; 0x706 <writePin+0xae>
     702:	66 0f       	add	r22, r22
     704:	77 1f       	adc	r23, r23
     706:	8a 95       	dec	r24
     708:	e2 f7       	brpl	.-8      	; 0x702 <writePin+0xaa>
     70a:	cb 01       	movw	r24, r22
     70c:	84 2b       	or	r24, r20
     70e:	85 bb       	out	0x15, r24	; 21
     710:	08 95       	ret
		else if(logic==LOW)
     712:	61 11       	cpse	r22, r1
     714:	36 c0       	rjmp	.+108    	; 0x782 <writePin+0x12a>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
     716:	45 b3       	in	r20, 0x15	; 21
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	40 97       	sbiw	r24, 0x10	; 16
     71c:	21 e0       	ldi	r18, 0x01	; 1
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	b9 01       	movw	r22, r18
     722:	02 c0       	rjmp	.+4      	; 0x728 <writePin+0xd0>
     724:	66 0f       	add	r22, r22
     726:	77 1f       	adc	r23, r23
     728:	8a 95       	dec	r24
     72a:	e2 f7       	brpl	.-8      	; 0x724 <writePin+0xcc>
     72c:	cb 01       	movw	r24, r22
     72e:	80 95       	com	r24
     730:	84 23       	and	r24, r20
     732:	85 bb       	out	0x15, r24	; 21
     734:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
     736:	98 ee       	ldi	r25, 0xE8	; 232
     738:	98 0f       	add	r25, r24
     73a:	98 30       	cpi	r25, 0x08	; 8
     73c:	10 f5       	brcc	.+68     	; 0x782 <writePin+0x12a>
		if(logic==HIGH)
     73e:	61 30       	cpi	r22, 0x01	; 1
     740:	79 f4       	brne	.+30     	; 0x760 <writePin+0x108>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
     742:	42 b3       	in	r20, 0x12	; 18
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	48 97       	sbiw	r24, 0x18	; 24
     748:	21 e0       	ldi	r18, 0x01	; 1
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	b9 01       	movw	r22, r18
     74e:	02 c0       	rjmp	.+4      	; 0x754 <writePin+0xfc>
     750:	66 0f       	add	r22, r22
     752:	77 1f       	adc	r23, r23
     754:	8a 95       	dec	r24
     756:	e2 f7       	brpl	.-8      	; 0x750 <writePin+0xf8>
     758:	cb 01       	movw	r24, r22
     75a:	84 2b       	or	r24, r20
     75c:	82 bb       	out	0x12, r24	; 18
     75e:	08 95       	ret
		else if(logic==LOW)
     760:	61 11       	cpse	r22, r1
     762:	0f c0       	rjmp	.+30     	; 0x782 <writePin+0x12a>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
     764:	42 b3       	in	r20, 0x12	; 18
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	48 97       	sbiw	r24, 0x18	; 24
     76a:	21 e0       	ldi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	b9 01       	movw	r22, r18
     770:	02 c0       	rjmp	.+4      	; 0x776 <writePin+0x11e>
     772:	66 0f       	add	r22, r22
     774:	77 1f       	adc	r23, r23
     776:	8a 95       	dec	r24
     778:	e2 f7       	brpl	.-8      	; 0x772 <writePin+0x11a>
     77a:	cb 01       	movw	r24, r22
     77c:	80 95       	com	r24
     77e:	84 23       	and	r24, r20
     780:	82 bb       	out	0x12, r24	; 18
     782:	08 95       	ret

00000784 <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
     784:	88 30       	cpi	r24, 0x08	; 8
     786:	f8 f4       	brcc	.+62     	; 0x7c6 <pinDirection+0x42>
		if(direction == OUTPUT)
     788:	61 30       	cpi	r22, 0x01	; 1
     78a:	69 f4       	brne	.+26     	; 0x7a6 <pinDirection+0x22>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
     78c:	4a b3       	in	r20, 0x1a	; 26
     78e:	21 e0       	ldi	r18, 0x01	; 1
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	b9 01       	movw	r22, r18
     794:	02 c0       	rjmp	.+4      	; 0x79a <pinDirection+0x16>
     796:	66 0f       	add	r22, r22
     798:	77 1f       	adc	r23, r23
     79a:	8a 95       	dec	r24
     79c:	e2 f7       	brpl	.-8      	; 0x796 <pinDirection+0x12>
     79e:	cb 01       	movw	r24, r22
     7a0:	84 2b       	or	r24, r20
     7a2:	8a bb       	out	0x1a, r24	; 26
     7a4:	08 95       	ret
		else if(direction == INPUT)
     7a6:	61 11       	cpse	r22, r1
     7a8:	82 c0       	rjmp	.+260    	; 0x8ae <__stack+0x4f>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
     7aa:	4a b3       	in	r20, 0x1a	; 26
     7ac:	21 e0       	ldi	r18, 0x01	; 1
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	b9 01       	movw	r22, r18
     7b2:	02 c0       	rjmp	.+4      	; 0x7b8 <pinDirection+0x34>
     7b4:	66 0f       	add	r22, r22
     7b6:	77 1f       	adc	r23, r23
     7b8:	8a 95       	dec	r24
     7ba:	e2 f7       	brpl	.-8      	; 0x7b4 <pinDirection+0x30>
     7bc:	cb 01       	movw	r24, r22
     7be:	80 95       	com	r24
     7c0:	84 23       	and	r24, r20
     7c2:	8a bb       	out	0x1a, r24	; 26
     7c4:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
     7c6:	98 ef       	ldi	r25, 0xF8	; 248
     7c8:	98 0f       	add	r25, r24
     7ca:	98 30       	cpi	r25, 0x08	; 8
     7cc:	18 f5       	brcc	.+70     	; 0x814 <pinDirection+0x90>
		if(direction == OUTPUT)
     7ce:	61 30       	cpi	r22, 0x01	; 1
     7d0:	79 f4       	brne	.+30     	; 0x7f0 <pinDirection+0x6c>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
     7d2:	47 b3       	in	r20, 0x17	; 23
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	08 97       	sbiw	r24, 0x08	; 8
     7d8:	21 e0       	ldi	r18, 0x01	; 1
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	b9 01       	movw	r22, r18
     7de:	02 c0       	rjmp	.+4      	; 0x7e4 <pinDirection+0x60>
     7e0:	66 0f       	add	r22, r22
     7e2:	77 1f       	adc	r23, r23
     7e4:	8a 95       	dec	r24
     7e6:	e2 f7       	brpl	.-8      	; 0x7e0 <pinDirection+0x5c>
     7e8:	cb 01       	movw	r24, r22
     7ea:	84 2b       	or	r24, r20
     7ec:	87 bb       	out	0x17, r24	; 23
     7ee:	08 95       	ret
		else if(direction == LOW)
     7f0:	61 11       	cpse	r22, r1
     7f2:	5d c0       	rjmp	.+186    	; 0x8ae <__stack+0x4f>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
     7f4:	47 b3       	in	r20, 0x17	; 23
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 97       	sbiw	r24, 0x08	; 8
     7fa:	21 e0       	ldi	r18, 0x01	; 1
     7fc:	30 e0       	ldi	r19, 0x00	; 0
     7fe:	b9 01       	movw	r22, r18
     800:	02 c0       	rjmp	.+4      	; 0x806 <pinDirection+0x82>
     802:	66 0f       	add	r22, r22
     804:	77 1f       	adc	r23, r23
     806:	8a 95       	dec	r24
     808:	e2 f7       	brpl	.-8      	; 0x802 <pinDirection+0x7e>
     80a:	cb 01       	movw	r24, r22
     80c:	80 95       	com	r24
     80e:	84 23       	and	r24, r20
     810:	87 bb       	out	0x17, r24	; 23
     812:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
     814:	90 ef       	ldi	r25, 0xF0	; 240
     816:	98 0f       	add	r25, r24
     818:	98 30       	cpi	r25, 0x08	; 8
     81a:	18 f5       	brcc	.+70     	; 0x862 <__stack+0x3>
		if(direction == OUTPUT)
     81c:	61 30       	cpi	r22, 0x01	; 1
     81e:	79 f4       	brne	.+30     	; 0x83e <pinDirection+0xba>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
     820:	44 b3       	in	r20, 0x14	; 20
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	40 97       	sbiw	r24, 0x10	; 16
     826:	21 e0       	ldi	r18, 0x01	; 1
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	b9 01       	movw	r22, r18
     82c:	02 c0       	rjmp	.+4      	; 0x832 <pinDirection+0xae>
     82e:	66 0f       	add	r22, r22
     830:	77 1f       	adc	r23, r23
     832:	8a 95       	dec	r24
     834:	e2 f7       	brpl	.-8      	; 0x82e <pinDirection+0xaa>
     836:	cb 01       	movw	r24, r22
     838:	84 2b       	or	r24, r20
     83a:	84 bb       	out	0x14, r24	; 20
     83c:	08 95       	ret
		else if(direction==INPUT)
     83e:	61 11       	cpse	r22, r1
     840:	36 c0       	rjmp	.+108    	; 0x8ae <__stack+0x4f>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
     842:	44 b3       	in	r20, 0x14	; 20
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	40 97       	sbiw	r24, 0x10	; 16
     848:	21 e0       	ldi	r18, 0x01	; 1
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	b9 01       	movw	r22, r18
     84e:	02 c0       	rjmp	.+4      	; 0x854 <pinDirection+0xd0>
     850:	66 0f       	add	r22, r22
     852:	77 1f       	adc	r23, r23
     854:	8a 95       	dec	r24
     856:	e2 f7       	brpl	.-8      	; 0x850 <pinDirection+0xcc>
     858:	cb 01       	movw	r24, r22
     85a:	80 95       	com	r24
     85c:	84 23       	and	r24, r20
     85e:	84 bb       	out	0x14, r24	; 20
     860:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
     862:	98 ee       	ldi	r25, 0xE8	; 232
     864:	98 0f       	add	r25, r24
     866:	98 30       	cpi	r25, 0x08	; 8
     868:	10 f5       	brcc	.+68     	; 0x8ae <__stack+0x4f>
		if(direction == OUTPUT)
     86a:	61 30       	cpi	r22, 0x01	; 1
     86c:	79 f4       	brne	.+30     	; 0x88c <__stack+0x2d>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
     86e:	41 b3       	in	r20, 0x11	; 17
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	48 97       	sbiw	r24, 0x18	; 24
     874:	21 e0       	ldi	r18, 0x01	; 1
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	b9 01       	movw	r22, r18
     87a:	02 c0       	rjmp	.+4      	; 0x880 <__stack+0x21>
     87c:	66 0f       	add	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	8a 95       	dec	r24
     882:	e2 f7       	brpl	.-8      	; 0x87c <__stack+0x1d>
     884:	cb 01       	movw	r24, r22
     886:	84 2b       	or	r24, r20
     888:	81 bb       	out	0x11, r24	; 17
     88a:	08 95       	ret
		else if(direction == INPUT)
     88c:	61 11       	cpse	r22, r1
     88e:	0f c0       	rjmp	.+30     	; 0x8ae <__stack+0x4f>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
     890:	41 b3       	in	r20, 0x11	; 17
     892:	90 e0       	ldi	r25, 0x00	; 0
     894:	48 97       	sbiw	r24, 0x18	; 24
     896:	21 e0       	ldi	r18, 0x01	; 1
     898:	30 e0       	ldi	r19, 0x00	; 0
     89a:	b9 01       	movw	r22, r18
     89c:	02 c0       	rjmp	.+4      	; 0x8a2 <__stack+0x43>
     89e:	66 0f       	add	r22, r22
     8a0:	77 1f       	adc	r23, r23
     8a2:	8a 95       	dec	r24
     8a4:	e2 f7       	brpl	.-8      	; 0x89e <__stack+0x3f>
     8a6:	cb 01       	movw	r24, r22
     8a8:	80 95       	com	r24
     8aa:	84 23       	and	r24, r20
     8ac:	81 bb       	out	0x11, r24	; 17
     8ae:	08 95       	ret

000008b0 <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
     8b0:	88 30       	cpi	r24, 0x08	; 8
     8b2:	58 f4       	brcc	.+22     	; 0x8ca <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
     8b4:	29 b3       	in	r18, 0x19	; 25
     8b6:	30 e0       	ldi	r19, 0x00	; 0
     8b8:	a9 01       	movw	r20, r18
     8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <readPin+0x10>
     8bc:	55 95       	asr	r21
     8be:	47 95       	ror	r20
     8c0:	8a 95       	dec	r24
     8c2:	e2 f7       	brpl	.-8      	; 0x8bc <readPin+0xc>
     8c4:	ca 01       	movw	r24, r20
     8c6:	81 70       	andi	r24, 0x01	; 1
     8c8:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
     8ca:	98 ef       	ldi	r25, 0xF8	; 248
     8cc:	98 0f       	add	r25, r24
     8ce:	98 30       	cpi	r25, 0x08	; 8
     8d0:	70 f4       	brcc	.+28     	; 0x8ee <readPin+0x3e>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
     8d2:	96 b3       	in	r25, 0x16	; 22
     8d4:	28 2f       	mov	r18, r24
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	28 50       	subi	r18, 0x08	; 8
     8da:	31 09       	sbc	r19, r1
     8dc:	89 2f       	mov	r24, r25
     8de:	90 e0       	ldi	r25, 0x00	; 0
     8e0:	02 c0       	rjmp	.+4      	; 0x8e6 <readPin+0x36>
     8e2:	95 95       	asr	r25
     8e4:	87 95       	ror	r24
     8e6:	2a 95       	dec	r18
     8e8:	e2 f7       	brpl	.-8      	; 0x8e2 <readPin+0x32>
     8ea:	81 70       	andi	r24, 0x01	; 1
     8ec:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
     8ee:	90 ef       	ldi	r25, 0xF0	; 240
     8f0:	98 0f       	add	r25, r24
     8f2:	98 30       	cpi	r25, 0x08	; 8
     8f4:	70 f4       	brcc	.+28     	; 0x912 <readPin+0x62>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
     8f6:	93 b3       	in	r25, 0x13	; 19
     8f8:	28 2f       	mov	r18, r24
     8fa:	30 e0       	ldi	r19, 0x00	; 0
     8fc:	20 51       	subi	r18, 0x10	; 16
     8fe:	31 09       	sbc	r19, r1
     900:	89 2f       	mov	r24, r25
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	02 c0       	rjmp	.+4      	; 0x90a <readPin+0x5a>
     906:	95 95       	asr	r25
     908:	87 95       	ror	r24
     90a:	2a 95       	dec	r18
     90c:	e2 f7       	brpl	.-8      	; 0x906 <readPin+0x56>
     90e:	81 70       	andi	r24, 0x01	; 1
     910:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
     912:	98 ee       	ldi	r25, 0xE8	; 232
     914:	98 0f       	add	r25, r24
     916:	98 30       	cpi	r25, 0x08	; 8
     918:	70 f4       	brcc	.+28     	; 0x936 <readPin+0x86>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
     91a:	90 b3       	in	r25, 0x10	; 16
     91c:	28 2f       	mov	r18, r24
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	28 51       	subi	r18, 0x18	; 24
     922:	31 09       	sbc	r19, r1
     924:	89 2f       	mov	r24, r25
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	02 c0       	rjmp	.+4      	; 0x92e <readPin+0x7e>
     92a:	95 95       	asr	r25
     92c:	87 95       	ror	r24
     92e:	2a 95       	dec	r18
     930:	e2 f7       	brpl	.-8      	; 0x92a <readPin+0x7a>
     932:	81 70       	andi	r24, 0x01	; 1
     934:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     936:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
     938:	08 95       	ret

0000093a <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     93a:	41 30       	cpi	r20, 0x01	; 1
     93c:	29 f4       	brne	.+10     	; 0x948 <writePins+0xe>
		SETBits(*port,mask);
     93e:	fc 01       	movw	r30, r24
     940:	20 81       	ld	r18, Z
     942:	62 2b       	or	r22, r18
     944:	60 83       	st	Z, r22
     946:	08 95       	ret
	else if(logic==LOW)
     948:	41 11       	cpse	r20, r1
     94a:	05 c0       	rjmp	.+10     	; 0x956 <writePins+0x1c>
		CLRBits(*port,mask);
     94c:	fc 01       	movw	r30, r24
     94e:	20 81       	ld	r18, Z
     950:	60 95       	com	r22
     952:	62 23       	and	r22, r18
     954:	60 83       	st	Z, r22
     956:	08 95       	ret

00000958 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     958:	41 30       	cpi	r20, 0x01	; 1
     95a:	29 f4       	brne	.+10     	; 0x966 <pinsDirection+0xe>
		SETBits(*ddr,mask);
     95c:	fc 01       	movw	r30, r24
     95e:	20 81       	ld	r18, Z
     960:	62 2b       	or	r22, r18
     962:	60 83       	st	Z, r22
     964:	08 95       	ret
	else if(direction == INPUT)
     966:	41 11       	cpse	r20, r1
     968:	05 c0       	rjmp	.+10     	; 0x974 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     96a:	fc 01       	movw	r30, r24
     96c:	20 81       	ld	r18, Z
     96e:	60 95       	com	r22
     970:	62 23       	and	r22, r18
     972:	60 83       	st	Z, r22
     974:	08 95       	ret

00000976 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
     976:	1f 92       	push	r1
     978:	0f 92       	push	r0
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	0f 92       	push	r0
     97e:	11 24       	eor	r1, r1
     980:	8f 93       	push	r24
     982:	9f 93       	push	r25
     984:	af 93       	push	r26
     986:	bf 93       	push	r27
	overflow++;	
     988:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <overflow>
     98c:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <overflow+0x1>
     990:	a0 91 ee 00 	lds	r26, 0x00EE	; 0x8000ee <overflow+0x2>
     994:	b0 91 ef 00 	lds	r27, 0x00EF	; 0x8000ef <overflow+0x3>
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	a1 1d       	adc	r26, r1
     99c:	b1 1d       	adc	r27, r1
     99e:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <overflow>
     9a2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <overflow+0x1>
     9a6:	a0 93 ee 00 	sts	0x00EE, r26	; 0x8000ee <overflow+0x2>
     9aa:	b0 93 ef 00 	sts	0x00EF, r27	; 0x8000ef <overflow+0x3>
}
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <UART_INIT>:
	}
	else{
		result = FALSE;
	}
	return result;
}
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	aa 1f       	adc	r26, r26
     9ca:	bb 1f       	adc	r27, r27
     9cc:	88 0f       	add	r24, r24
     9ce:	99 1f       	adc	r25, r25
     9d0:	aa 1f       	adc	r26, r26
     9d2:	bb 1f       	adc	r27, r27
     9d4:	9c 01       	movw	r18, r24
     9d6:	ad 01       	movw	r20, r26
     9d8:	22 0f       	add	r18, r18
     9da:	33 1f       	adc	r19, r19
     9dc:	44 1f       	adc	r20, r20
     9de:	55 1f       	adc	r21, r21
     9e0:	22 0f       	add	r18, r18
     9e2:	33 1f       	adc	r19, r19
     9e4:	44 1f       	adc	r20, r20
     9e6:	55 1f       	adc	r21, r21
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	72 e1       	ldi	r23, 0x12	; 18
     9ec:	8a e7       	ldi	r24, 0x7A	; 122
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	0e 94 df 06 	call	0xdbe	; 0xdbe <__udivmodsi4>
     9f4:	21 50       	subi	r18, 0x01	; 1
     9f6:	31 09       	sbc	r19, r1
     9f8:	30 bd       	out	0x20, r19	; 32
     9fa:	29 b9       	out	0x09, r18	; 9
     9fc:	8a b1       	in	r24, 0x0a	; 10
     9fe:	88 60       	ori	r24, 0x08	; 8
     a00:	8a b9       	out	0x0a, r24	; 10
     a02:	8a b1       	in	r24, 0x0a	; 10
     a04:	80 61       	ori	r24, 0x10	; 16
     a06:	8a b9       	out	0x0a, r24	; 10
     a08:	86 e8       	ldi	r24, 0x86	; 134
     a0a:	80 bd       	out	0x20, r24	; 32
     a0c:	0e 94 10 03 	call	0x620	; 0x620 <GLOBAL_INT_EN>
     a10:	08 95       	ret

00000a12 <UART_TX>:
     a12:	8c b9       	out	0x0c, r24	; 12
     a14:	5d 9b       	sbis	0x0b, 5	; 11
     a16:	fe cf       	rjmp	.-4      	; 0xa14 <UART_TX+0x2>
     a18:	08 95       	ret

00000a1a <Uart_SendStr>:

void	Uart_SendStr(u8* str){
     a1a:	cf 92       	push	r12
     a1c:	df 92       	push	r13
     a1e:	ef 92       	push	r14
     a20:	ff 92       	push	r15
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	ec 01       	movw	r28, r24
	u32 ind = 0;
     a28:	c1 2c       	mov	r12, r1
     a2a:	d1 2c       	mov	r13, r1
     a2c:	76 01       	movw	r14, r12
	while(str[ind] != 0){
     a2e:	07 c0       	rjmp	.+14     	; 0xa3e <Uart_SendStr+0x24>
		UART_TX(str[ind]);
     a30:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
		ind++;
     a34:	8f ef       	ldi	r24, 0xFF	; 255
     a36:	c8 1a       	sub	r12, r24
     a38:	d8 0a       	sbc	r13, r24
     a3a:	e8 0a       	sbc	r14, r24
     a3c:	f8 0a       	sbc	r15, r24
	return result;
}

void	Uart_SendStr(u8* str){
	u32 ind = 0;
	while(str[ind] != 0){
     a3e:	fe 01       	movw	r30, r28
     a40:	ec 0d       	add	r30, r12
     a42:	fd 1d       	adc	r31, r13
     a44:	80 81       	ld	r24, Z
     a46:	81 11       	cpse	r24, r1
     a48:	f3 cf       	rjmp	.-26     	; 0xa30 <Uart_SendStr+0x16>
		UART_TX(str[ind]);
		ind++;
	}
     a4a:	df 91       	pop	r29
     a4c:	cf 91       	pop	r28
     a4e:	ff 90       	pop	r15
     a50:	ef 90       	pop	r14
     a52:	df 90       	pop	r13
     a54:	cf 90       	pop	r12
     a56:	08 95       	ret

00000a58 <sendUTFStr>:
 */ 
#include "MQTT.h"

u16 PID = 1;
u8 proName[] = "MQTT";
void sendUTFStr(u8* str){
     a58:	cf 93       	push	r28
     a5a:	df 93       	push	r29
     a5c:	ec 01       	movw	r28, r24
	UART_TX(0x00); // MSB = 0 because packet len < 256
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(strlen(str));
     a64:	fe 01       	movw	r30, r28
     a66:	01 90       	ld	r0, Z+
     a68:	00 20       	and	r0, r0
     a6a:	e9 f7       	brne	.-6      	; 0xa66 <sendUTFStr+0xe>
     a6c:	cf 01       	movw	r24, r30
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	8c 1b       	sub	r24, r28
     a72:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	Uart_SendStr(str);
     a76:	ce 01       	movw	r24, r28
     a78:	0e 94 0d 05 	call	0xa1a	; 0xa1a <Uart_SendStr>
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <MQTT_Connect>:
void MQTT_Connect(u8* id){
     a82:	0f 93       	push	r16
     a84:	1f 93       	push	r17
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	8c 01       	movw	r16, r24
	u8 RL = (2 + strlen(proName)) + 1 + 1 + 2 + ( 2 + strlen(id));
     a8c:	e0 e6       	ldi	r30, 0x60	; 96
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	01 90       	ld	r0, Z+
     a92:	00 20       	and	r0, r0
     a94:	e9 f7       	brne	.-6      	; 0xa90 <MQTT_Connect+0xe>
     a96:	31 97       	sbiw	r30, 0x01	; 1
     a98:	ef 01       	movw	r28, r30
     a9a:	c0 56       	subi	r28, 0x60	; 96
     a9c:	d0 40       	sbci	r29, 0x00	; 0
     a9e:	fc 01       	movw	r30, r24
     aa0:	01 90       	ld	r0, Z+
     aa2:	00 20       	and	r0, r0
     aa4:	e9 f7       	brne	.-6      	; 0xaa0 <MQTT_Connect+0x1e>
     aa6:	31 97       	sbiw	r30, 0x01	; 1
     aa8:	e8 1b       	sub	r30, r24
     aaa:	f9 0b       	sbc	r31, r25
     aac:	ec 0f       	add	r30, r28
     aae:	c8 e0       	ldi	r28, 0x08	; 8
     ab0:	ce 0f       	add	r28, r30
	UART_TX(0x10);
     ab2:	80 e1       	ldi	r24, 0x10	; 16
     ab4:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(RL);
     ab8:	8c 2f       	mov	r24, r28
     aba:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	sendUTFStr(proName);
     abe:	80 e6       	ldi	r24, 0x60	; 96
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 2c 05 	call	0xa58	; 0xa58 <sendUTFStr>
	UART_TX(0x04);
     ac6:	84 e0       	ldi	r24, 0x04	; 4
     ac8:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(0x02);
     acc:	82 e0       	ldi	r24, 0x02	; 2
     ace:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(0xFF);
     ad2:	8f ef       	ldi	r24, 0xFF	; 255
     ad4:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(0xFF);
     ad8:	8f ef       	ldi	r24, 0xFF	; 255
     ada:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	sendUTFStr(id);
     ade:	c8 01       	movw	r24, r16
     ae0:	0e 94 2c 05 	call	0xa58	; 0xa58 <sendUTFStr>
}
     ae4:	df 91       	pop	r29
     ae6:	cf 91       	pop	r28
     ae8:	1f 91       	pop	r17
     aea:	0f 91       	pop	r16
     aec:	08 95       	ret

00000aee <MQTT_Publish>:
void MQTT_Publish(u8* topic, u8* msgPtr, u8 msgLen){
     aee:	ef 92       	push	r14
     af0:	ff 92       	push	r15
     af2:	0f 93       	push	r16
     af4:	1f 93       	push	r17
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	7c 01       	movw	r14, r24
     afc:	8b 01       	movw	r16, r22
     afe:	d4 2f       	mov	r29, r20
	u8 RL = (2 + strlen(topic)) + msgLen;
     b00:	fc 01       	movw	r30, r24
     b02:	01 90       	ld	r0, Z+
     b04:	00 20       	and	r0, r0
     b06:	e9 f7       	brne	.-6      	; 0xb02 <MQTT_Publish+0x14>
     b08:	31 97       	sbiw	r30, 0x01	; 1
     b0a:	e8 1b       	sub	r30, r24
     b0c:	f9 0b       	sbc	r31, r25
     b0e:	e4 0f       	add	r30, r20
     b10:	c2 e0       	ldi	r28, 0x02	; 2
     b12:	ce 0f       	add	r28, r30
	u8 ind = 0;
	UART_TX(0x30);
     b14:	80 e3       	ldi	r24, 0x30	; 48
     b16:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(RL);
     b1a:	8c 2f       	mov	r24, r28
     b1c:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	sendUTFStr(topic);
     b20:	c7 01       	movw	r24, r14
     b22:	0e 94 2c 05 	call	0xa58	; 0xa58 <sendUTFStr>
	for (ind = 0; ind < msgLen; ind++)
     b26:	c0 e0       	ldi	r28, 0x00	; 0
     b28:	07 c0       	rjmp	.+14     	; 0xb38 <MQTT_Publish+0x4a>
	{
		UART_TX(msgPtr[ind]);
     b2a:	f8 01       	movw	r30, r16
     b2c:	ec 0f       	add	r30, r28
     b2e:	f1 1d       	adc	r31, r1
     b30:	80 81       	ld	r24, Z
     b32:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	u8 RL = (2 + strlen(topic)) + msgLen;
	u8 ind = 0;
	UART_TX(0x30);
	UART_TX(RL);
	sendUTFStr(topic);
	for (ind = 0; ind < msgLen; ind++)
     b36:	cf 5f       	subi	r28, 0xFF	; 255
     b38:	cd 17       	cp	r28, r29
     b3a:	b8 f3       	brcs	.-18     	; 0xb2a <MQTT_Publish+0x3c>
	{
		UART_TX(msgPtr[ind]);
	}
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <MQTT_Subscribe>:
void MQTT_Subscribe(u8* topic){
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	8c 01       	movw	r16, r24
	u8 RL = 2 + (2 + strlen(topic)) + 1;
     b52:	fc 01       	movw	r30, r24
     b54:	01 90       	ld	r0, Z+
     b56:	00 20       	and	r0, r0
     b58:	e9 f7       	brne	.-6      	; 0xb54 <MQTT_Subscribe+0xa>
     b5a:	31 97       	sbiw	r30, 0x01	; 1
     b5c:	e8 1b       	sub	r30, r24
     b5e:	f9 0b       	sbc	r31, r25
     b60:	c5 e0       	ldi	r28, 0x05	; 5
     b62:	ce 0f       	add	r28, r30
	UART_TX(0x82);
     b64:	82 e8       	ldi	r24, 0x82	; 130
     b66:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX(RL);
     b6a:	8c 2f       	mov	r24, r28
     b6c:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	
	UART_TX((u8)(PID>>8)); // MSB
     b70:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <PID+0x1>
     b74:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	UART_TX((u8)(PID));
     b78:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <PID>
     b7c:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
	PID++;
     b80:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <PID>
     b84:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <PID+0x1>
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	90 93 66 00 	sts	0x0066, r25	; 0x800066 <PID+0x1>
     b8e:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <PID>
	
	sendUTFStr(topic);	
     b92:	c8 01       	movw	r24, r16
     b94:	0e 94 2c 05 	call	0xa58	; 0xa58 <sendUTFStr>
	UART_TX(0x00);
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	0e 94 09 05 	call	0xa12	; 0xa12 <UART_TX>
     b9e:	cf 91       	pop	r28
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <FireAlarm>:
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
}
     ba6:	92 b3       	in	r25, 0x12	; 18
     ba8:	88 e0       	ldi	r24, 0x08	; 8
     baa:	89 27       	eor	r24, r25
     bac:	82 bb       	out	0x12, r24	; 18
     bae:	88 b3       	in	r24, 0x18	; 24
     bb0:	80 58       	subi	r24, 0x80	; 128
     bb2:	88 bb       	out	0x18, r24	; 24
     bb4:	08 95       	ret

00000bb6 <turnOnFireAlarm>:
     bb6:	83 ed       	ldi	r24, 0xD3	; 211
     bb8:	95 e0       	ldi	r25, 0x05	; 5
     bba:	0e 94 0b 03 	call	0x616	; 0x616 <Callback>
     bbe:	08 95       	ret

00000bc0 <Project_Init>:
     bc0:	0e 94 f9 01 	call	0x3f2	; 0x3f2 <KEYPAD_Init>
     bc4:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <LCD_init>
     bc8:	0e 94 17 03 	call	0x62e	; 0x62e <ADC_init>
     bcc:	61 e0       	ldi	r22, 0x01	; 1
     bce:	84 e1       	ldi	r24, 0x14	; 20
     bd0:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
     bd4:	61 e0       	ldi	r22, 0x01	; 1
     bd6:	8f e0       	ldi	r24, 0x0F	; 15
     bd8:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
     bdc:	61 e0       	ldi	r22, 0x01	; 1
     bde:	8c e1       	ldi	r24, 0x1C	; 28
     be0:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
     be4:	61 e0       	ldi	r22, 0x01	; 1
     be6:	8d e1       	ldi	r24, 0x1D	; 29
     be8:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
     bec:	61 e0       	ldi	r22, 0x01	; 1
     bee:	8b e1       	ldi	r24, 0x1B	; 27
     bf0:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	8a e1       	ldi	r24, 0x1A	; 26
     bf8:	0e 94 c2 03 	call	0x784	; 0x784 <pinDirection>
     bfc:	08 95       	ret

00000bfe <temp>:
	MQTT_Publish("G/light",tempstr,strlen(tempstr));
	_delay_ms(1000);
}

void temp(void)
{
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	c8 57       	subi	r28, 0x78	; 120
     c08:	d1 09       	sbc	r29, r1
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	f8 94       	cli
     c0e:	de bf       	out	0x3e, r29	; 62
     c10:	0f be       	out	0x3f, r0	; 63
     c12:	cd bf       	out	0x3d, r28	; 61
	u8 temp[60];
	u8 hum[60];
	disp_strXY(3,1,"Humid=     %RH");
     c14:	4c ea       	ldi	r20, 0xAC	; 172
     c16:	50 e0       	ldi	r21, 0x00	; 0
     c18:	61 e0       	ldi	r22, 0x01	; 1
     c1a:	83 e0       	ldi	r24, 0x03	; 3
     c1c:	0e 94 cd 02 	call	0x59a	; 0x59a <disp_strXY>
	disp_strXY(4,1,"temp=      Deg.c");
     c20:	4b eb       	ldi	r20, 0xBB	; 187
     c22:	50 e0       	ldi	r21, 0x00	; 0
     c24:	61 e0       	ldi	r22, 0x01	; 1
     c26:	84 e0       	ldi	r24, 0x04	; 4
     c28:	0e 94 cd 02 	call	0x59a	; 0x59a <disp_strXY>
	DHT_Represent(hum,temp);
     c2c:	be 01       	movw	r22, r28
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
     c30:	7f 4f       	sbci	r23, 0xFF	; 255
     c32:	ce 01       	movw	r24, r28
     c34:	cd 96       	adiw	r24, 0x3d	; 61
     c36:	0e 94 c9 01 	call	0x392	; 0x392 <DHT_Represent>
	disp_strXY(3,7,hum);
     c3a:	ae 01       	movw	r20, r28
     c3c:	43 5c       	subi	r20, 0xC3	; 195
     c3e:	5f 4f       	sbci	r21, 0xFF	; 255
     c40:	67 e0       	ldi	r22, 0x07	; 7
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	0e 94 cd 02 	call	0x59a	; 0x59a <disp_strXY>
	disp_strXY(4,6,temp);
     c48:	ae 01       	movw	r20, r28
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	66 e0       	ldi	r22, 0x06	; 6
     c50:	84 e0       	ldi	r24, 0x04	; 4
     c52:	0e 94 cd 02 	call	0x59a	; 0x59a <disp_strXY>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c56:	2f ef       	ldi	r18, 0xFF	; 255
     c58:	84 e3       	ldi	r24, 0x34	; 52
     c5a:	9c e0       	ldi	r25, 0x0C	; 12
     c5c:	21 50       	subi	r18, 0x01	; 1
     c5e:	80 40       	sbci	r24, 0x00	; 0
     c60:	90 40       	sbci	r25, 0x00	; 0
     c62:	e1 f7       	brne	.-8      	; 0xc5c <temp+0x5e>
     c64:	00 c0       	rjmp	.+0      	; 0xc66 <temp+0x68>
     c66:	00 00       	nop
	_delay_ms(500);
}
     c68:	c8 58       	subi	r28, 0x88	; 136
     c6a:	df 4f       	sbci	r29, 0xFF	; 255
     c6c:	0f b6       	in	r0, 0x3f	; 63
     c6e:	f8 94       	cli
     c70:	de bf       	out	0x3e, r29	; 62
     c72:	0f be       	out	0x3f, r0	; 63
     c74:	cd bf       	out	0x3d, r28	; 61
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <AnalogSensors>:
	disp_intXY(2,6,trials);
	Get_Password(password);	
}

void AnalogSensors(void)
{
     c7c:	af 92       	push	r10
     c7e:	bf 92       	push	r11
     c80:	cf 92       	push	r12
     c82:	df 92       	push	r13
     c84:	ef 92       	push	r14
     c86:	ff 92       	push	r15
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	00 d0       	rcall	.+0      	; 0xc92 <AnalogSensors+0x16>
     c92:	00 d0       	rcall	.+0      	; 0xc94 <AnalogSensors+0x18>
     c94:	cd b7       	in	r28, 0x3d	; 61
     c96:	de b7       	in	r29, 0x3e	; 62
	u8 tempstr[4]={0};
     c98:	19 82       	std	Y+1, r1	; 0x01
     c9a:	1a 82       	std	Y+2, r1	; 0x02
     c9c:	1b 82       	std	Y+3, r1	; 0x03
     c9e:	1c 82       	std	Y+4, r1	; 0x04
	LCD_CLEAR();
     ca0:	0e 94 56 02 	call	0x4ac	; 0x4ac <LCD_CLEAR>
	u16 LDR=0;
	u16 soil=0;
	soil=read_analog(SOILSENSOR);
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	0e 94 1e 03 	call	0x63c	; 0x63c <read_analog>
     cac:	8c 01       	movw	r16, r24
	LDR=read_analog(LDRSENSOR);
     cae:	81 e0       	ldi	r24, 0x01	; 1
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	0e 94 1e 03 	call	0x63c	; 0x63c <read_analog>
     cb6:	7c 01       	movw	r14, r24
	soil=(100-(soil*100UL)/1019UL);
     cb8:	98 01       	movw	r18, r16
     cba:	a4 e6       	ldi	r26, 0x64	; 100
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	0e 94 01 07 	call	0xe02	; 0xe02 <__umulhisi3>
     cc2:	2b ef       	ldi	r18, 0xFB	; 251
     cc4:	33 e0       	ldi	r19, 0x03	; 3
     cc6:	40 e0       	ldi	r20, 0x00	; 0
     cc8:	50 e0       	ldi	r21, 0x00	; 0
     cca:	0e 94 df 06 	call	0xdbe	; 0xdbe <__udivmodsi4>
     cce:	04 e6       	ldi	r16, 0x64	; 100
     cd0:	10 e0       	ldi	r17, 0x00	; 0
     cd2:	02 1b       	sub	r16, r18
     cd4:	13 0b       	sbc	r17, r19
	LDR=((LDR*100UL)/407UL);
     cd6:	97 01       	movw	r18, r14
     cd8:	a4 e6       	ldi	r26, 0x64	; 100
     cda:	b0 e0       	ldi	r27, 0x00	; 0
     cdc:	0e 94 01 07 	call	0xe02	; 0xe02 <__umulhisi3>
     ce0:	27 e9       	ldi	r18, 0x97	; 151
     ce2:	31 e0       	ldi	r19, 0x01	; 1
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	0e 94 df 06 	call	0xdbe	; 0xdbe <__udivmodsi4>
     cec:	69 01       	movw	r12, r18
     cee:	7a 01       	movw	r14, r20
     cf0:	59 01       	movw	r10, r18
	disp_strXY(1,1,"soil water=");
     cf2:	4c ec       	ldi	r20, 0xCC	; 204
     cf4:	50 e0       	ldi	r21, 0x00	; 0
     cf6:	61 e0       	ldi	r22, 0x01	; 1
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	0e 94 cd 02 	call	0x59a	; 0x59a <disp_strXY>
	disp_int(soil);
     cfe:	b8 01       	movw	r22, r16
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <disp_int>
	disp_char('%');
     d08:	85 e2       	ldi	r24, 0x25	; 37
     d0a:	0e 94 9b 02 	call	0x536	; 0x536 <disp_char>
	disp_strXY(2,1,"Light = ");
     d0e:	48 ed       	ldi	r20, 0xD8	; 216
     d10:	50 e0       	ldi	r21, 0x00	; 0
     d12:	61 e0       	ldi	r22, 0x01	; 1
     d14:	82 e0       	ldi	r24, 0x02	; 2
     d16:	0e 94 cd 02 	call	0x59a	; 0x59a <disp_strXY>
	disp_int(LDR);
     d1a:	c7 01       	movw	r24, r14
     d1c:	b6 01       	movw	r22, r12
     d1e:	88 27       	eor	r24, r24
     d20:	99 27       	eor	r25, r25
     d22:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <disp_int>
	disp_char('%');
     d26:	85 e2       	ldi	r24, 0x25	; 37
     d28:	0e 94 9b 02 	call	0x536	; 0x536 <disp_char>
	//controlling planets irrigation 
	if (soil<=30)//turn on pump
     d2c:	0f 31       	cpi	r16, 0x1F	; 31
     d2e:	11 05       	cpc	r17, r1
     d30:	28 f4       	brcc	.+10     	; 0xd3c <AnalogSensors+0xc0>
	{
		writePin(SOIL_PUMP,HIGH);
     d32:	61 e0       	ldi	r22, 0x01	; 1
     d34:	8c e1       	ldi	r24, 0x1C	; 28
     d36:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     d3a:	04 c0       	rjmp	.+8      	; 0xd44 <AnalogSensors+0xc8>
	}
	else
	{
		writePin(SOIL_PUMP,LOW);
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	8c e1       	ldi	r24, 0x1C	; 28
     d40:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
	}
	//controlling outer lights
	if (LDR<30)//turn on lights
     d44:	2e e1       	ldi	r18, 0x1E	; 30
     d46:	a2 16       	cp	r10, r18
     d48:	b1 04       	cpc	r11, r1
     d4a:	28 f4       	brcc	.+10     	; 0xd56 <AnalogSensors+0xda>
	{
		writePin(OUTERLIGHT,HIGH);
     d4c:	61 e0       	ldi	r22, 0x01	; 1
     d4e:	8d e1       	ldi	r24, 0x1D	; 29
     d50:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
     d54:	04 c0       	rjmp	.+8      	; 0xd5e <AnalogSensors+0xe2>
	}
	else
	{
		writePin(OUTERLIGHT,LOW);
     d56:	60 e0       	ldi	r22, 0x00	; 0
     d58:	8d e1       	ldi	r24, 0x1D	; 29
     d5a:	0e 94 2c 03 	call	0x658	; 0x658 <writePin>
	}
	
	temp();
     d5e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <temp>
	itoa(LDR,tempstr,10);
     d62:	4a e0       	ldi	r20, 0x0A	; 10
     d64:	50 e0       	ldi	r21, 0x00	; 0
     d66:	8e 01       	movw	r16, r28
     d68:	0f 5f       	subi	r16, 0xFF	; 255
     d6a:	1f 4f       	sbci	r17, 0xFF	; 255
     d6c:	b8 01       	movw	r22, r16
     d6e:	c6 01       	movw	r24, r12
     d70:	0e 94 1b 07 	call	0xe36	; 0xe36 <itoa>
	MQTT_Publish("G/light",tempstr,strlen(tempstr));
     d74:	f8 01       	movw	r30, r16
     d76:	01 90       	ld	r0, Z+
     d78:	00 20       	and	r0, r0
     d7a:	e9 f7       	brne	.-6      	; 0xd76 <AnalogSensors+0xfa>
     d7c:	31 97       	sbiw	r30, 0x01	; 1
     d7e:	af 01       	movw	r20, r30
     d80:	40 1b       	sub	r20, r16
     d82:	51 0b       	sbc	r21, r17
     d84:	b8 01       	movw	r22, r16
     d86:	81 ee       	ldi	r24, 0xE1	; 225
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 77 05 	call	0xaee	; 0xaee <MQTT_Publish>
     d8e:	8f ef       	ldi	r24, 0xFF	; 255
     d90:	99 e6       	ldi	r25, 0x69	; 105
     d92:	28 e1       	ldi	r18, 0x18	; 24
     d94:	81 50       	subi	r24, 0x01	; 1
     d96:	90 40       	sbci	r25, 0x00	; 0
     d98:	20 40       	sbci	r18, 0x00	; 0
     d9a:	e1 f7       	brne	.-8      	; 0xd94 <AnalogSensors+0x118>
     d9c:	00 c0       	rjmp	.+0      	; 0xd9e <AnalogSensors+0x122>
     d9e:	00 00       	nop
	_delay_ms(1000);
}
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	0f 90       	pop	r0
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	1f 91       	pop	r17
     dae:	0f 91       	pop	r16
     db0:	ff 90       	pop	r15
     db2:	ef 90       	pop	r14
     db4:	df 90       	pop	r13
     db6:	cf 90       	pop	r12
     db8:	bf 90       	pop	r11
     dba:	af 90       	pop	r10
     dbc:	08 95       	ret

00000dbe <__udivmodsi4>:
     dbe:	a1 e2       	ldi	r26, 0x21	; 33
     dc0:	1a 2e       	mov	r1, r26
     dc2:	aa 1b       	sub	r26, r26
     dc4:	bb 1b       	sub	r27, r27
     dc6:	fd 01       	movw	r30, r26
     dc8:	0d c0       	rjmp	.+26     	; 0xde4 <__udivmodsi4_ep>

00000dca <__udivmodsi4_loop>:
     dca:	aa 1f       	adc	r26, r26
     dcc:	bb 1f       	adc	r27, r27
     dce:	ee 1f       	adc	r30, r30
     dd0:	ff 1f       	adc	r31, r31
     dd2:	a2 17       	cp	r26, r18
     dd4:	b3 07       	cpc	r27, r19
     dd6:	e4 07       	cpc	r30, r20
     dd8:	f5 07       	cpc	r31, r21
     dda:	20 f0       	brcs	.+8      	; 0xde4 <__udivmodsi4_ep>
     ddc:	a2 1b       	sub	r26, r18
     dde:	b3 0b       	sbc	r27, r19
     de0:	e4 0b       	sbc	r30, r20
     de2:	f5 0b       	sbc	r31, r21

00000de4 <__udivmodsi4_ep>:
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	99 1f       	adc	r25, r25
     dec:	1a 94       	dec	r1
     dee:	69 f7       	brne	.-38     	; 0xdca <__udivmodsi4_loop>
     df0:	60 95       	com	r22
     df2:	70 95       	com	r23
     df4:	80 95       	com	r24
     df6:	90 95       	com	r25
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	bd 01       	movw	r22, r26
     dfe:	cf 01       	movw	r24, r30
     e00:	08 95       	ret

00000e02 <__umulhisi3>:
     e02:	a2 9f       	mul	r26, r18
     e04:	b0 01       	movw	r22, r0
     e06:	b3 9f       	mul	r27, r19
     e08:	c0 01       	movw	r24, r0
     e0a:	a3 9f       	mul	r26, r19
     e0c:	70 0d       	add	r23, r0
     e0e:	81 1d       	adc	r24, r1
     e10:	11 24       	eor	r1, r1
     e12:	91 1d       	adc	r25, r1
     e14:	b2 9f       	mul	r27, r18
     e16:	70 0d       	add	r23, r0
     e18:	81 1d       	adc	r24, r1
     e1a:	11 24       	eor	r1, r1
     e1c:	91 1d       	adc	r25, r1
     e1e:	08 95       	ret

00000e20 <strcat>:
     e20:	fb 01       	movw	r30, r22
     e22:	dc 01       	movw	r26, r24
     e24:	0d 90       	ld	r0, X+
     e26:	00 20       	and	r0, r0
     e28:	e9 f7       	brne	.-6      	; 0xe24 <strcat+0x4>
     e2a:	11 97       	sbiw	r26, 0x01	; 1
     e2c:	01 90       	ld	r0, Z+
     e2e:	0d 92       	st	X+, r0
     e30:	00 20       	and	r0, r0
     e32:	e1 f7       	brne	.-8      	; 0xe2c <strcat+0xc>
     e34:	08 95       	ret

00000e36 <itoa>:
     e36:	45 32       	cpi	r20, 0x25	; 37
     e38:	51 05       	cpc	r21, r1
     e3a:	20 f4       	brcc	.+8      	; 0xe44 <itoa+0xe>
     e3c:	42 30       	cpi	r20, 0x02	; 2
     e3e:	10 f0       	brcs	.+4      	; 0xe44 <itoa+0xe>
     e40:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__itoa_ncheck>
     e44:	fb 01       	movw	r30, r22
     e46:	10 82       	st	Z, r1
     e48:	cb 01       	movw	r24, r22
     e4a:	08 95       	ret

00000e4c <__itoa_ncheck>:
     e4c:	bb 27       	eor	r27, r27
     e4e:	4a 30       	cpi	r20, 0x0A	; 10
     e50:	31 f4       	brne	.+12     	; 0xe5e <__itoa_ncheck+0x12>
     e52:	99 23       	and	r25, r25
     e54:	22 f4       	brpl	.+8      	; 0xe5e <__itoa_ncheck+0x12>
     e56:	bd e2       	ldi	r27, 0x2D	; 45
     e58:	90 95       	com	r25
     e5a:	81 95       	neg	r24
     e5c:	9f 4f       	sbci	r25, 0xFF	; 255
     e5e:	0c 94 32 07 	jmp	0xe64	; 0xe64 <__utoa_common>

00000e62 <__utoa_ncheck>:
     e62:	bb 27       	eor	r27, r27

00000e64 <__utoa_common>:
     e64:	fb 01       	movw	r30, r22
     e66:	55 27       	eor	r21, r21
     e68:	aa 27       	eor	r26, r26
     e6a:	88 0f       	add	r24, r24
     e6c:	99 1f       	adc	r25, r25
     e6e:	aa 1f       	adc	r26, r26
     e70:	a4 17       	cp	r26, r20
     e72:	10 f0       	brcs	.+4      	; 0xe78 <__utoa_common+0x14>
     e74:	a4 1b       	sub	r26, r20
     e76:	83 95       	inc	r24
     e78:	50 51       	subi	r21, 0x10	; 16
     e7a:	b9 f7       	brne	.-18     	; 0xe6a <__utoa_common+0x6>
     e7c:	a0 5d       	subi	r26, 0xD0	; 208
     e7e:	aa 33       	cpi	r26, 0x3A	; 58
     e80:	08 f0       	brcs	.+2      	; 0xe84 <__utoa_common+0x20>
     e82:	a9 5d       	subi	r26, 0xD9	; 217
     e84:	a1 93       	st	Z+, r26
     e86:	00 97       	sbiw	r24, 0x00	; 0
     e88:	79 f7       	brne	.-34     	; 0xe68 <__utoa_common+0x4>
     e8a:	b1 11       	cpse	r27, r1
     e8c:	b1 93       	st	Z+, r27
     e8e:	11 92       	st	Z+, r1
     e90:	cb 01       	movw	r24, r22
     e92:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <strrev>

00000e96 <sprintf>:
     e96:	ae e0       	ldi	r26, 0x0E	; 14
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e5       	ldi	r30, 0x51	; 81
     e9c:	f7 e0       	ldi	r31, 0x07	; 7
     e9e:	0c 94 1c 0a 	jmp	0x1438	; 0x1438 <__prologue_saves__+0x1c>
     ea2:	0d 89       	ldd	r16, Y+21	; 0x15
     ea4:	1e 89       	ldd	r17, Y+22	; 0x16
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	8c 83       	std	Y+4, r24	; 0x04
     eaa:	1a 83       	std	Y+2, r17	; 0x02
     eac:	09 83       	std	Y+1, r16	; 0x01
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	9f e7       	ldi	r25, 0x7F	; 127
     eb2:	9e 83       	std	Y+6, r25	; 0x06
     eb4:	8d 83       	std	Y+5, r24	; 0x05
     eb6:	ae 01       	movw	r20, r28
     eb8:	47 5e       	subi	r20, 0xE7	; 231
     eba:	5f 4f       	sbci	r21, 0xFF	; 255
     ebc:	6f 89       	ldd	r22, Y+23	; 0x17
     ebe:	78 8d       	ldd	r23, Y+24	; 0x18
     ec0:	ce 01       	movw	r24, r28
     ec2:	01 96       	adiw	r24, 0x01	; 1
     ec4:	0e 94 6d 07 	call	0xeda	; 0xeda <vfprintf>
     ec8:	ef 81       	ldd	r30, Y+7	; 0x07
     eca:	f8 85       	ldd	r31, Y+8	; 0x08
     ecc:	e0 0f       	add	r30, r16
     ece:	f1 1f       	adc	r31, r17
     ed0:	10 82       	st	Z, r1
     ed2:	2e 96       	adiw	r28, 0x0e	; 14
     ed4:	e4 e0       	ldi	r30, 0x04	; 4
     ed6:	0c 94 38 0a 	jmp	0x1470	; 0x1470 <__epilogue_restores__+0x1c>

00000eda <vfprintf>:
     eda:	ab e0       	ldi	r26, 0x0B	; 11
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e3 e7       	ldi	r30, 0x73	; 115
     ee0:	f7 e0       	ldi	r31, 0x07	; 7
     ee2:	0c 94 0e 0a 	jmp	0x141c	; 0x141c <__prologue_saves__>
     ee6:	6c 01       	movw	r12, r24
     ee8:	7b 01       	movw	r14, r22
     eea:	8a 01       	movw	r16, r20
     eec:	fc 01       	movw	r30, r24
     eee:	17 82       	std	Z+7, r1	; 0x07
     ef0:	16 82       	std	Z+6, r1	; 0x06
     ef2:	83 81       	ldd	r24, Z+3	; 0x03
     ef4:	81 ff       	sbrs	r24, 1
     ef6:	cc c1       	rjmp	.+920    	; 0x1290 <vfprintf+0x3b6>
     ef8:	ce 01       	movw	r24, r28
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	3c 01       	movw	r6, r24
     efe:	f6 01       	movw	r30, r12
     f00:	93 81       	ldd	r25, Z+3	; 0x03
     f02:	f7 01       	movw	r30, r14
     f04:	93 fd       	sbrc	r25, 3
     f06:	85 91       	lpm	r24, Z+
     f08:	93 ff       	sbrs	r25, 3
     f0a:	81 91       	ld	r24, Z+
     f0c:	7f 01       	movw	r14, r30
     f0e:	88 23       	and	r24, r24
     f10:	09 f4       	brne	.+2      	; 0xf14 <vfprintf+0x3a>
     f12:	ba c1       	rjmp	.+884    	; 0x1288 <vfprintf+0x3ae>
     f14:	85 32       	cpi	r24, 0x25	; 37
     f16:	39 f4       	brne	.+14     	; 0xf26 <vfprintf+0x4c>
     f18:	93 fd       	sbrc	r25, 3
     f1a:	85 91       	lpm	r24, Z+
     f1c:	93 ff       	sbrs	r25, 3
     f1e:	81 91       	ld	r24, Z+
     f20:	7f 01       	movw	r14, r30
     f22:	85 32       	cpi	r24, 0x25	; 37
     f24:	29 f4       	brne	.+10     	; 0xf30 <vfprintf+0x56>
     f26:	b6 01       	movw	r22, r12
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
     f2e:	e7 cf       	rjmp	.-50     	; 0xefe <vfprintf+0x24>
     f30:	91 2c       	mov	r9, r1
     f32:	21 2c       	mov	r2, r1
     f34:	31 2c       	mov	r3, r1
     f36:	ff e1       	ldi	r31, 0x1F	; 31
     f38:	f3 15       	cp	r31, r3
     f3a:	d8 f0       	brcs	.+54     	; 0xf72 <vfprintf+0x98>
     f3c:	8b 32       	cpi	r24, 0x2B	; 43
     f3e:	79 f0       	breq	.+30     	; 0xf5e <vfprintf+0x84>
     f40:	38 f4       	brcc	.+14     	; 0xf50 <vfprintf+0x76>
     f42:	80 32       	cpi	r24, 0x20	; 32
     f44:	79 f0       	breq	.+30     	; 0xf64 <vfprintf+0x8a>
     f46:	83 32       	cpi	r24, 0x23	; 35
     f48:	a1 f4       	brne	.+40     	; 0xf72 <vfprintf+0x98>
     f4a:	23 2d       	mov	r18, r3
     f4c:	20 61       	ori	r18, 0x10	; 16
     f4e:	1d c0       	rjmp	.+58     	; 0xf8a <vfprintf+0xb0>
     f50:	8d 32       	cpi	r24, 0x2D	; 45
     f52:	61 f0       	breq	.+24     	; 0xf6c <vfprintf+0x92>
     f54:	80 33       	cpi	r24, 0x30	; 48
     f56:	69 f4       	brne	.+26     	; 0xf72 <vfprintf+0x98>
     f58:	23 2d       	mov	r18, r3
     f5a:	21 60       	ori	r18, 0x01	; 1
     f5c:	16 c0       	rjmp	.+44     	; 0xf8a <vfprintf+0xb0>
     f5e:	83 2d       	mov	r24, r3
     f60:	82 60       	ori	r24, 0x02	; 2
     f62:	38 2e       	mov	r3, r24
     f64:	e3 2d       	mov	r30, r3
     f66:	e4 60       	ori	r30, 0x04	; 4
     f68:	3e 2e       	mov	r3, r30
     f6a:	2a c0       	rjmp	.+84     	; 0xfc0 <vfprintf+0xe6>
     f6c:	f3 2d       	mov	r31, r3
     f6e:	f8 60       	ori	r31, 0x08	; 8
     f70:	1d c0       	rjmp	.+58     	; 0xfac <vfprintf+0xd2>
     f72:	37 fc       	sbrc	r3, 7
     f74:	2d c0       	rjmp	.+90     	; 0xfd0 <vfprintf+0xf6>
     f76:	20 ed       	ldi	r18, 0xD0	; 208
     f78:	28 0f       	add	r18, r24
     f7a:	2a 30       	cpi	r18, 0x0A	; 10
     f7c:	40 f0       	brcs	.+16     	; 0xf8e <vfprintf+0xb4>
     f7e:	8e 32       	cpi	r24, 0x2E	; 46
     f80:	b9 f4       	brne	.+46     	; 0xfb0 <vfprintf+0xd6>
     f82:	36 fc       	sbrc	r3, 6
     f84:	81 c1       	rjmp	.+770    	; 0x1288 <vfprintf+0x3ae>
     f86:	23 2d       	mov	r18, r3
     f88:	20 64       	ori	r18, 0x40	; 64
     f8a:	32 2e       	mov	r3, r18
     f8c:	19 c0       	rjmp	.+50     	; 0xfc0 <vfprintf+0xe6>
     f8e:	36 fe       	sbrs	r3, 6
     f90:	06 c0       	rjmp	.+12     	; 0xf9e <vfprintf+0xc4>
     f92:	8a e0       	ldi	r24, 0x0A	; 10
     f94:	98 9e       	mul	r9, r24
     f96:	20 0d       	add	r18, r0
     f98:	11 24       	eor	r1, r1
     f9a:	92 2e       	mov	r9, r18
     f9c:	11 c0       	rjmp	.+34     	; 0xfc0 <vfprintf+0xe6>
     f9e:	ea e0       	ldi	r30, 0x0A	; 10
     fa0:	2e 9e       	mul	r2, r30
     fa2:	20 0d       	add	r18, r0
     fa4:	11 24       	eor	r1, r1
     fa6:	22 2e       	mov	r2, r18
     fa8:	f3 2d       	mov	r31, r3
     faa:	f0 62       	ori	r31, 0x20	; 32
     fac:	3f 2e       	mov	r3, r31
     fae:	08 c0       	rjmp	.+16     	; 0xfc0 <vfprintf+0xe6>
     fb0:	8c 36       	cpi	r24, 0x6C	; 108
     fb2:	21 f4       	brne	.+8      	; 0xfbc <vfprintf+0xe2>
     fb4:	83 2d       	mov	r24, r3
     fb6:	80 68       	ori	r24, 0x80	; 128
     fb8:	38 2e       	mov	r3, r24
     fba:	02 c0       	rjmp	.+4      	; 0xfc0 <vfprintf+0xe6>
     fbc:	88 36       	cpi	r24, 0x68	; 104
     fbe:	41 f4       	brne	.+16     	; 0xfd0 <vfprintf+0xf6>
     fc0:	f7 01       	movw	r30, r14
     fc2:	93 fd       	sbrc	r25, 3
     fc4:	85 91       	lpm	r24, Z+
     fc6:	93 ff       	sbrs	r25, 3
     fc8:	81 91       	ld	r24, Z+
     fca:	7f 01       	movw	r14, r30
     fcc:	81 11       	cpse	r24, r1
     fce:	b3 cf       	rjmp	.-154    	; 0xf36 <vfprintf+0x5c>
     fd0:	98 2f       	mov	r25, r24
     fd2:	9f 7d       	andi	r25, 0xDF	; 223
     fd4:	95 54       	subi	r25, 0x45	; 69
     fd6:	93 30       	cpi	r25, 0x03	; 3
     fd8:	28 f4       	brcc	.+10     	; 0xfe4 <vfprintf+0x10a>
     fda:	0c 5f       	subi	r16, 0xFC	; 252
     fdc:	1f 4f       	sbci	r17, 0xFF	; 255
     fde:	9f e3       	ldi	r25, 0x3F	; 63
     fe0:	99 83       	std	Y+1, r25	; 0x01
     fe2:	0d c0       	rjmp	.+26     	; 0xffe <vfprintf+0x124>
     fe4:	83 36       	cpi	r24, 0x63	; 99
     fe6:	31 f0       	breq	.+12     	; 0xff4 <vfprintf+0x11a>
     fe8:	83 37       	cpi	r24, 0x73	; 115
     fea:	71 f0       	breq	.+28     	; 0x1008 <vfprintf+0x12e>
     fec:	83 35       	cpi	r24, 0x53	; 83
     fee:	09 f0       	breq	.+2      	; 0xff2 <vfprintf+0x118>
     ff0:	59 c0       	rjmp	.+178    	; 0x10a4 <vfprintf+0x1ca>
     ff2:	21 c0       	rjmp	.+66     	; 0x1036 <vfprintf+0x15c>
     ff4:	f8 01       	movw	r30, r16
     ff6:	80 81       	ld	r24, Z
     ff8:	89 83       	std	Y+1, r24	; 0x01
     ffa:	0e 5f       	subi	r16, 0xFE	; 254
     ffc:	1f 4f       	sbci	r17, 0xFF	; 255
     ffe:	88 24       	eor	r8, r8
    1000:	83 94       	inc	r8
    1002:	91 2c       	mov	r9, r1
    1004:	53 01       	movw	r10, r6
    1006:	13 c0       	rjmp	.+38     	; 0x102e <vfprintf+0x154>
    1008:	28 01       	movw	r4, r16
    100a:	f2 e0       	ldi	r31, 0x02	; 2
    100c:	4f 0e       	add	r4, r31
    100e:	51 1c       	adc	r5, r1
    1010:	f8 01       	movw	r30, r16
    1012:	a0 80       	ld	r10, Z
    1014:	b1 80       	ldd	r11, Z+1	; 0x01
    1016:	36 fe       	sbrs	r3, 6
    1018:	03 c0       	rjmp	.+6      	; 0x1020 <vfprintf+0x146>
    101a:	69 2d       	mov	r22, r9
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	02 c0       	rjmp	.+4      	; 0x1024 <vfprintf+0x14a>
    1020:	6f ef       	ldi	r22, 0xFF	; 255
    1022:	7f ef       	ldi	r23, 0xFF	; 255
    1024:	c5 01       	movw	r24, r10
    1026:	0e 94 59 09 	call	0x12b2	; 0x12b2 <strnlen>
    102a:	4c 01       	movw	r8, r24
    102c:	82 01       	movw	r16, r4
    102e:	f3 2d       	mov	r31, r3
    1030:	ff 77       	andi	r31, 0x7F	; 127
    1032:	3f 2e       	mov	r3, r31
    1034:	16 c0       	rjmp	.+44     	; 0x1062 <vfprintf+0x188>
    1036:	28 01       	movw	r4, r16
    1038:	22 e0       	ldi	r18, 0x02	; 2
    103a:	42 0e       	add	r4, r18
    103c:	51 1c       	adc	r5, r1
    103e:	f8 01       	movw	r30, r16
    1040:	a0 80       	ld	r10, Z
    1042:	b1 80       	ldd	r11, Z+1	; 0x01
    1044:	36 fe       	sbrs	r3, 6
    1046:	03 c0       	rjmp	.+6      	; 0x104e <vfprintf+0x174>
    1048:	69 2d       	mov	r22, r9
    104a:	70 e0       	ldi	r23, 0x00	; 0
    104c:	02 c0       	rjmp	.+4      	; 0x1052 <vfprintf+0x178>
    104e:	6f ef       	ldi	r22, 0xFF	; 255
    1050:	7f ef       	ldi	r23, 0xFF	; 255
    1052:	c5 01       	movw	r24, r10
    1054:	0e 94 4e 09 	call	0x129c	; 0x129c <strnlen_P>
    1058:	4c 01       	movw	r8, r24
    105a:	f3 2d       	mov	r31, r3
    105c:	f0 68       	ori	r31, 0x80	; 128
    105e:	3f 2e       	mov	r3, r31
    1060:	82 01       	movw	r16, r4
    1062:	33 fc       	sbrc	r3, 3
    1064:	1b c0       	rjmp	.+54     	; 0x109c <vfprintf+0x1c2>
    1066:	82 2d       	mov	r24, r2
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	88 16       	cp	r8, r24
    106c:	99 06       	cpc	r9, r25
    106e:	b0 f4       	brcc	.+44     	; 0x109c <vfprintf+0x1c2>
    1070:	b6 01       	movw	r22, r12
    1072:	80 e2       	ldi	r24, 0x20	; 32
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    107a:	2a 94       	dec	r2
    107c:	f4 cf       	rjmp	.-24     	; 0x1066 <vfprintf+0x18c>
    107e:	f5 01       	movw	r30, r10
    1080:	37 fc       	sbrc	r3, 7
    1082:	85 91       	lpm	r24, Z+
    1084:	37 fe       	sbrs	r3, 7
    1086:	81 91       	ld	r24, Z+
    1088:	5f 01       	movw	r10, r30
    108a:	b6 01       	movw	r22, r12
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    1092:	21 10       	cpse	r2, r1
    1094:	2a 94       	dec	r2
    1096:	21 e0       	ldi	r18, 0x01	; 1
    1098:	82 1a       	sub	r8, r18
    109a:	91 08       	sbc	r9, r1
    109c:	81 14       	cp	r8, r1
    109e:	91 04       	cpc	r9, r1
    10a0:	71 f7       	brne	.-36     	; 0x107e <vfprintf+0x1a4>
    10a2:	e8 c0       	rjmp	.+464    	; 0x1274 <vfprintf+0x39a>
    10a4:	84 36       	cpi	r24, 0x64	; 100
    10a6:	11 f0       	breq	.+4      	; 0x10ac <vfprintf+0x1d2>
    10a8:	89 36       	cpi	r24, 0x69	; 105
    10aa:	41 f5       	brne	.+80     	; 0x10fc <vfprintf+0x222>
    10ac:	f8 01       	movw	r30, r16
    10ae:	37 fe       	sbrs	r3, 7
    10b0:	07 c0       	rjmp	.+14     	; 0x10c0 <vfprintf+0x1e6>
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	0c 5f       	subi	r16, 0xFC	; 252
    10bc:	1f 4f       	sbci	r17, 0xFF	; 255
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <vfprintf+0x1f6>
    10c0:	60 81       	ld	r22, Z
    10c2:	71 81       	ldd	r23, Z+1	; 0x01
    10c4:	07 2e       	mov	r0, r23
    10c6:	00 0c       	add	r0, r0
    10c8:	88 0b       	sbc	r24, r24
    10ca:	99 0b       	sbc	r25, r25
    10cc:	0e 5f       	subi	r16, 0xFE	; 254
    10ce:	1f 4f       	sbci	r17, 0xFF	; 255
    10d0:	f3 2d       	mov	r31, r3
    10d2:	ff 76       	andi	r31, 0x6F	; 111
    10d4:	3f 2e       	mov	r3, r31
    10d6:	97 ff       	sbrs	r25, 7
    10d8:	09 c0       	rjmp	.+18     	; 0x10ec <vfprintf+0x212>
    10da:	90 95       	com	r25
    10dc:	80 95       	com	r24
    10de:	70 95       	com	r23
    10e0:	61 95       	neg	r22
    10e2:	7f 4f       	sbci	r23, 0xFF	; 255
    10e4:	8f 4f       	sbci	r24, 0xFF	; 255
    10e6:	9f 4f       	sbci	r25, 0xFF	; 255
    10e8:	f0 68       	ori	r31, 0x80	; 128
    10ea:	3f 2e       	mov	r3, r31
    10ec:	2a e0       	ldi	r18, 0x0A	; 10
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	a3 01       	movw	r20, r6
    10f2:	0e 94 b0 09 	call	0x1360	; 0x1360 <__ultoa_invert>
    10f6:	88 2e       	mov	r8, r24
    10f8:	86 18       	sub	r8, r6
    10fa:	45 c0       	rjmp	.+138    	; 0x1186 <vfprintf+0x2ac>
    10fc:	85 37       	cpi	r24, 0x75	; 117
    10fe:	31 f4       	brne	.+12     	; 0x110c <vfprintf+0x232>
    1100:	23 2d       	mov	r18, r3
    1102:	2f 7e       	andi	r18, 0xEF	; 239
    1104:	b2 2e       	mov	r11, r18
    1106:	2a e0       	ldi	r18, 0x0A	; 10
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	25 c0       	rjmp	.+74     	; 0x1156 <vfprintf+0x27c>
    110c:	93 2d       	mov	r25, r3
    110e:	99 7f       	andi	r25, 0xF9	; 249
    1110:	b9 2e       	mov	r11, r25
    1112:	8f 36       	cpi	r24, 0x6F	; 111
    1114:	c1 f0       	breq	.+48     	; 0x1146 <vfprintf+0x26c>
    1116:	18 f4       	brcc	.+6      	; 0x111e <vfprintf+0x244>
    1118:	88 35       	cpi	r24, 0x58	; 88
    111a:	79 f0       	breq	.+30     	; 0x113a <vfprintf+0x260>
    111c:	b5 c0       	rjmp	.+362    	; 0x1288 <vfprintf+0x3ae>
    111e:	80 37       	cpi	r24, 0x70	; 112
    1120:	19 f0       	breq	.+6      	; 0x1128 <vfprintf+0x24e>
    1122:	88 37       	cpi	r24, 0x78	; 120
    1124:	21 f0       	breq	.+8      	; 0x112e <vfprintf+0x254>
    1126:	b0 c0       	rjmp	.+352    	; 0x1288 <vfprintf+0x3ae>
    1128:	e9 2f       	mov	r30, r25
    112a:	e0 61       	ori	r30, 0x10	; 16
    112c:	be 2e       	mov	r11, r30
    112e:	b4 fe       	sbrs	r11, 4
    1130:	0d c0       	rjmp	.+26     	; 0x114c <vfprintf+0x272>
    1132:	fb 2d       	mov	r31, r11
    1134:	f4 60       	ori	r31, 0x04	; 4
    1136:	bf 2e       	mov	r11, r31
    1138:	09 c0       	rjmp	.+18     	; 0x114c <vfprintf+0x272>
    113a:	34 fe       	sbrs	r3, 4
    113c:	0a c0       	rjmp	.+20     	; 0x1152 <vfprintf+0x278>
    113e:	29 2f       	mov	r18, r25
    1140:	26 60       	ori	r18, 0x06	; 6
    1142:	b2 2e       	mov	r11, r18
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <vfprintf+0x278>
    1146:	28 e0       	ldi	r18, 0x08	; 8
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	05 c0       	rjmp	.+10     	; 0x1156 <vfprintf+0x27c>
    114c:	20 e1       	ldi	r18, 0x10	; 16
    114e:	30 e0       	ldi	r19, 0x00	; 0
    1150:	02 c0       	rjmp	.+4      	; 0x1156 <vfprintf+0x27c>
    1152:	20 e1       	ldi	r18, 0x10	; 16
    1154:	32 e0       	ldi	r19, 0x02	; 2
    1156:	f8 01       	movw	r30, r16
    1158:	b7 fe       	sbrs	r11, 7
    115a:	07 c0       	rjmp	.+14     	; 0x116a <vfprintf+0x290>
    115c:	60 81       	ld	r22, Z
    115e:	71 81       	ldd	r23, Z+1	; 0x01
    1160:	82 81       	ldd	r24, Z+2	; 0x02
    1162:	93 81       	ldd	r25, Z+3	; 0x03
    1164:	0c 5f       	subi	r16, 0xFC	; 252
    1166:	1f 4f       	sbci	r17, 0xFF	; 255
    1168:	06 c0       	rjmp	.+12     	; 0x1176 <vfprintf+0x29c>
    116a:	60 81       	ld	r22, Z
    116c:	71 81       	ldd	r23, Z+1	; 0x01
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	0e 5f       	subi	r16, 0xFE	; 254
    1174:	1f 4f       	sbci	r17, 0xFF	; 255
    1176:	a3 01       	movw	r20, r6
    1178:	0e 94 b0 09 	call	0x1360	; 0x1360 <__ultoa_invert>
    117c:	88 2e       	mov	r8, r24
    117e:	86 18       	sub	r8, r6
    1180:	fb 2d       	mov	r31, r11
    1182:	ff 77       	andi	r31, 0x7F	; 127
    1184:	3f 2e       	mov	r3, r31
    1186:	36 fe       	sbrs	r3, 6
    1188:	0d c0       	rjmp	.+26     	; 0x11a4 <vfprintf+0x2ca>
    118a:	23 2d       	mov	r18, r3
    118c:	2e 7f       	andi	r18, 0xFE	; 254
    118e:	a2 2e       	mov	r10, r18
    1190:	89 14       	cp	r8, r9
    1192:	58 f4       	brcc	.+22     	; 0x11aa <vfprintf+0x2d0>
    1194:	34 fe       	sbrs	r3, 4
    1196:	0b c0       	rjmp	.+22     	; 0x11ae <vfprintf+0x2d4>
    1198:	32 fc       	sbrc	r3, 2
    119a:	09 c0       	rjmp	.+18     	; 0x11ae <vfprintf+0x2d4>
    119c:	83 2d       	mov	r24, r3
    119e:	8e 7e       	andi	r24, 0xEE	; 238
    11a0:	a8 2e       	mov	r10, r24
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <vfprintf+0x2d4>
    11a4:	b8 2c       	mov	r11, r8
    11a6:	a3 2c       	mov	r10, r3
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <vfprintf+0x2d6>
    11aa:	b8 2c       	mov	r11, r8
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <vfprintf+0x2d6>
    11ae:	b9 2c       	mov	r11, r9
    11b0:	a4 fe       	sbrs	r10, 4
    11b2:	0f c0       	rjmp	.+30     	; 0x11d2 <vfprintf+0x2f8>
    11b4:	fe 01       	movw	r30, r28
    11b6:	e8 0d       	add	r30, r8
    11b8:	f1 1d       	adc	r31, r1
    11ba:	80 81       	ld	r24, Z
    11bc:	80 33       	cpi	r24, 0x30	; 48
    11be:	21 f4       	brne	.+8      	; 0x11c8 <vfprintf+0x2ee>
    11c0:	9a 2d       	mov	r25, r10
    11c2:	99 7e       	andi	r25, 0xE9	; 233
    11c4:	a9 2e       	mov	r10, r25
    11c6:	09 c0       	rjmp	.+18     	; 0x11da <vfprintf+0x300>
    11c8:	a2 fe       	sbrs	r10, 2
    11ca:	06 c0       	rjmp	.+12     	; 0x11d8 <vfprintf+0x2fe>
    11cc:	b3 94       	inc	r11
    11ce:	b3 94       	inc	r11
    11d0:	04 c0       	rjmp	.+8      	; 0x11da <vfprintf+0x300>
    11d2:	8a 2d       	mov	r24, r10
    11d4:	86 78       	andi	r24, 0x86	; 134
    11d6:	09 f0       	breq	.+2      	; 0x11da <vfprintf+0x300>
    11d8:	b3 94       	inc	r11
    11da:	a3 fc       	sbrc	r10, 3
    11dc:	11 c0       	rjmp	.+34     	; 0x1200 <vfprintf+0x326>
    11de:	a0 fe       	sbrs	r10, 0
    11e0:	06 c0       	rjmp	.+12     	; 0x11ee <vfprintf+0x314>
    11e2:	b2 14       	cp	r11, r2
    11e4:	88 f4       	brcc	.+34     	; 0x1208 <vfprintf+0x32e>
    11e6:	28 0c       	add	r2, r8
    11e8:	92 2c       	mov	r9, r2
    11ea:	9b 18       	sub	r9, r11
    11ec:	0e c0       	rjmp	.+28     	; 0x120a <vfprintf+0x330>
    11ee:	b2 14       	cp	r11, r2
    11f0:	60 f4       	brcc	.+24     	; 0x120a <vfprintf+0x330>
    11f2:	b6 01       	movw	r22, r12
    11f4:	80 e2       	ldi	r24, 0x20	; 32
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    11fc:	b3 94       	inc	r11
    11fe:	f7 cf       	rjmp	.-18     	; 0x11ee <vfprintf+0x314>
    1200:	b2 14       	cp	r11, r2
    1202:	18 f4       	brcc	.+6      	; 0x120a <vfprintf+0x330>
    1204:	2b 18       	sub	r2, r11
    1206:	02 c0       	rjmp	.+4      	; 0x120c <vfprintf+0x332>
    1208:	98 2c       	mov	r9, r8
    120a:	21 2c       	mov	r2, r1
    120c:	a4 fe       	sbrs	r10, 4
    120e:	10 c0       	rjmp	.+32     	; 0x1230 <vfprintf+0x356>
    1210:	b6 01       	movw	r22, r12
    1212:	80 e3       	ldi	r24, 0x30	; 48
    1214:	90 e0       	ldi	r25, 0x00	; 0
    1216:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    121a:	a2 fe       	sbrs	r10, 2
    121c:	17 c0       	rjmp	.+46     	; 0x124c <vfprintf+0x372>
    121e:	a1 fc       	sbrc	r10, 1
    1220:	03 c0       	rjmp	.+6      	; 0x1228 <vfprintf+0x34e>
    1222:	88 e7       	ldi	r24, 0x78	; 120
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	02 c0       	rjmp	.+4      	; 0x122c <vfprintf+0x352>
    1228:	88 e5       	ldi	r24, 0x58	; 88
    122a:	90 e0       	ldi	r25, 0x00	; 0
    122c:	b6 01       	movw	r22, r12
    122e:	0c c0       	rjmp	.+24     	; 0x1248 <vfprintf+0x36e>
    1230:	8a 2d       	mov	r24, r10
    1232:	86 78       	andi	r24, 0x86	; 134
    1234:	59 f0       	breq	.+22     	; 0x124c <vfprintf+0x372>
    1236:	a1 fe       	sbrs	r10, 1
    1238:	02 c0       	rjmp	.+4      	; 0x123e <vfprintf+0x364>
    123a:	8b e2       	ldi	r24, 0x2B	; 43
    123c:	01 c0       	rjmp	.+2      	; 0x1240 <vfprintf+0x366>
    123e:	80 e2       	ldi	r24, 0x20	; 32
    1240:	a7 fc       	sbrc	r10, 7
    1242:	8d e2       	ldi	r24, 0x2D	; 45
    1244:	b6 01       	movw	r22, r12
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    124c:	89 14       	cp	r8, r9
    124e:	38 f4       	brcc	.+14     	; 0x125e <vfprintf+0x384>
    1250:	b6 01       	movw	r22, r12
    1252:	80 e3       	ldi	r24, 0x30	; 48
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    125a:	9a 94       	dec	r9
    125c:	f7 cf       	rjmp	.-18     	; 0x124c <vfprintf+0x372>
    125e:	8a 94       	dec	r8
    1260:	f3 01       	movw	r30, r6
    1262:	e8 0d       	add	r30, r8
    1264:	f1 1d       	adc	r31, r1
    1266:	80 81       	ld	r24, Z
    1268:	b6 01       	movw	r22, r12
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    1270:	81 10       	cpse	r8, r1
    1272:	f5 cf       	rjmp	.-22     	; 0x125e <vfprintf+0x384>
    1274:	22 20       	and	r2, r2
    1276:	09 f4       	brne	.+2      	; 0x127a <vfprintf+0x3a0>
    1278:	42 ce       	rjmp	.-892    	; 0xefe <vfprintf+0x24>
    127a:	b6 01       	movw	r22, r12
    127c:	80 e2       	ldi	r24, 0x20	; 32
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	0e 94 74 09 	call	0x12e8	; 0x12e8 <fputc>
    1284:	2a 94       	dec	r2
    1286:	f6 cf       	rjmp	.-20     	; 0x1274 <vfprintf+0x39a>
    1288:	f6 01       	movw	r30, r12
    128a:	86 81       	ldd	r24, Z+6	; 0x06
    128c:	97 81       	ldd	r25, Z+7	; 0x07
    128e:	02 c0       	rjmp	.+4      	; 0x1294 <vfprintf+0x3ba>
    1290:	8f ef       	ldi	r24, 0xFF	; 255
    1292:	9f ef       	ldi	r25, 0xFF	; 255
    1294:	2b 96       	adiw	r28, 0x0b	; 11
    1296:	e2 e1       	ldi	r30, 0x12	; 18
    1298:	0c 94 2a 0a 	jmp	0x1454	; 0x1454 <__epilogue_restores__>

0000129c <strnlen_P>:
    129c:	fc 01       	movw	r30, r24
    129e:	05 90       	lpm	r0, Z+
    12a0:	61 50       	subi	r22, 0x01	; 1
    12a2:	70 40       	sbci	r23, 0x00	; 0
    12a4:	01 10       	cpse	r0, r1
    12a6:	d8 f7       	brcc	.-10     	; 0x129e <strnlen_P+0x2>
    12a8:	80 95       	com	r24
    12aa:	90 95       	com	r25
    12ac:	8e 0f       	add	r24, r30
    12ae:	9f 1f       	adc	r25, r31
    12b0:	08 95       	ret

000012b2 <strnlen>:
    12b2:	fc 01       	movw	r30, r24
    12b4:	61 50       	subi	r22, 0x01	; 1
    12b6:	70 40       	sbci	r23, 0x00	; 0
    12b8:	01 90       	ld	r0, Z+
    12ba:	01 10       	cpse	r0, r1
    12bc:	d8 f7       	brcc	.-10     	; 0x12b4 <strnlen+0x2>
    12be:	80 95       	com	r24
    12c0:	90 95       	com	r25
    12c2:	8e 0f       	add	r24, r30
    12c4:	9f 1f       	adc	r25, r31
    12c6:	08 95       	ret

000012c8 <strrev>:
    12c8:	dc 01       	movw	r26, r24
    12ca:	fc 01       	movw	r30, r24
    12cc:	67 2f       	mov	r22, r23
    12ce:	71 91       	ld	r23, Z+
    12d0:	77 23       	and	r23, r23
    12d2:	e1 f7       	brne	.-8      	; 0x12cc <strrev+0x4>
    12d4:	32 97       	sbiw	r30, 0x02	; 2
    12d6:	04 c0       	rjmp	.+8      	; 0x12e0 <strrev+0x18>
    12d8:	7c 91       	ld	r23, X
    12da:	6d 93       	st	X+, r22
    12dc:	70 83       	st	Z, r23
    12de:	62 91       	ld	r22, -Z
    12e0:	ae 17       	cp	r26, r30
    12e2:	bf 07       	cpc	r27, r31
    12e4:	c8 f3       	brcs	.-14     	; 0x12d8 <strrev+0x10>
    12e6:	08 95       	ret

000012e8 <fputc>:
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	fb 01       	movw	r30, r22
    12f2:	23 81       	ldd	r18, Z+3	; 0x03
    12f4:	21 fd       	sbrc	r18, 1
    12f6:	03 c0       	rjmp	.+6      	; 0x12fe <fputc+0x16>
    12f8:	8f ef       	ldi	r24, 0xFF	; 255
    12fa:	9f ef       	ldi	r25, 0xFF	; 255
    12fc:	2c c0       	rjmp	.+88     	; 0x1356 <fputc+0x6e>
    12fe:	22 ff       	sbrs	r18, 2
    1300:	16 c0       	rjmp	.+44     	; 0x132e <fputc+0x46>
    1302:	46 81       	ldd	r20, Z+6	; 0x06
    1304:	57 81       	ldd	r21, Z+7	; 0x07
    1306:	24 81       	ldd	r18, Z+4	; 0x04
    1308:	35 81       	ldd	r19, Z+5	; 0x05
    130a:	42 17       	cp	r20, r18
    130c:	53 07       	cpc	r21, r19
    130e:	44 f4       	brge	.+16     	; 0x1320 <fputc+0x38>
    1310:	a0 81       	ld	r26, Z
    1312:	b1 81       	ldd	r27, Z+1	; 0x01
    1314:	9d 01       	movw	r18, r26
    1316:	2f 5f       	subi	r18, 0xFF	; 255
    1318:	3f 4f       	sbci	r19, 0xFF	; 255
    131a:	31 83       	std	Z+1, r19	; 0x01
    131c:	20 83       	st	Z, r18
    131e:	8c 93       	st	X, r24
    1320:	26 81       	ldd	r18, Z+6	; 0x06
    1322:	37 81       	ldd	r19, Z+7	; 0x07
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
    1328:	37 83       	std	Z+7, r19	; 0x07
    132a:	26 83       	std	Z+6, r18	; 0x06
    132c:	14 c0       	rjmp	.+40     	; 0x1356 <fputc+0x6e>
    132e:	8b 01       	movw	r16, r22
    1330:	ec 01       	movw	r28, r24
    1332:	fb 01       	movw	r30, r22
    1334:	00 84       	ldd	r0, Z+8	; 0x08
    1336:	f1 85       	ldd	r31, Z+9	; 0x09
    1338:	e0 2d       	mov	r30, r0
    133a:	09 95       	icall
    133c:	89 2b       	or	r24, r25
    133e:	e1 f6       	brne	.-72     	; 0x12f8 <fputc+0x10>
    1340:	d8 01       	movw	r26, r16
    1342:	16 96       	adiw	r26, 0x06	; 6
    1344:	8d 91       	ld	r24, X+
    1346:	9c 91       	ld	r25, X
    1348:	17 97       	sbiw	r26, 0x07	; 7
    134a:	01 96       	adiw	r24, 0x01	; 1
    134c:	17 96       	adiw	r26, 0x07	; 7
    134e:	9c 93       	st	X, r25
    1350:	8e 93       	st	-X, r24
    1352:	16 97       	sbiw	r26, 0x06	; 6
    1354:	ce 01       	movw	r24, r28
    1356:	df 91       	pop	r29
    1358:	cf 91       	pop	r28
    135a:	1f 91       	pop	r17
    135c:	0f 91       	pop	r16
    135e:	08 95       	ret

00001360 <__ultoa_invert>:
    1360:	fa 01       	movw	r30, r20
    1362:	aa 27       	eor	r26, r26
    1364:	28 30       	cpi	r18, 0x08	; 8
    1366:	51 f1       	breq	.+84     	; 0x13bc <__ultoa_invert+0x5c>
    1368:	20 31       	cpi	r18, 0x10	; 16
    136a:	81 f1       	breq	.+96     	; 0x13cc <__ultoa_invert+0x6c>
    136c:	e8 94       	clt
    136e:	6f 93       	push	r22
    1370:	6e 7f       	andi	r22, 0xFE	; 254
    1372:	6e 5f       	subi	r22, 0xFE	; 254
    1374:	7f 4f       	sbci	r23, 0xFF	; 255
    1376:	8f 4f       	sbci	r24, 0xFF	; 255
    1378:	9f 4f       	sbci	r25, 0xFF	; 255
    137a:	af 4f       	sbci	r26, 0xFF	; 255
    137c:	b1 e0       	ldi	r27, 0x01	; 1
    137e:	3e d0       	rcall	.+124    	; 0x13fc <__ultoa_invert+0x9c>
    1380:	b4 e0       	ldi	r27, 0x04	; 4
    1382:	3c d0       	rcall	.+120    	; 0x13fc <__ultoa_invert+0x9c>
    1384:	67 0f       	add	r22, r23
    1386:	78 1f       	adc	r23, r24
    1388:	89 1f       	adc	r24, r25
    138a:	9a 1f       	adc	r25, r26
    138c:	a1 1d       	adc	r26, r1
    138e:	68 0f       	add	r22, r24
    1390:	79 1f       	adc	r23, r25
    1392:	8a 1f       	adc	r24, r26
    1394:	91 1d       	adc	r25, r1
    1396:	a1 1d       	adc	r26, r1
    1398:	6a 0f       	add	r22, r26
    139a:	71 1d       	adc	r23, r1
    139c:	81 1d       	adc	r24, r1
    139e:	91 1d       	adc	r25, r1
    13a0:	a1 1d       	adc	r26, r1
    13a2:	20 d0       	rcall	.+64     	; 0x13e4 <__ultoa_invert+0x84>
    13a4:	09 f4       	brne	.+2      	; 0x13a8 <__ultoa_invert+0x48>
    13a6:	68 94       	set
    13a8:	3f 91       	pop	r19
    13aa:	2a e0       	ldi	r18, 0x0A	; 10
    13ac:	26 9f       	mul	r18, r22
    13ae:	11 24       	eor	r1, r1
    13b0:	30 19       	sub	r19, r0
    13b2:	30 5d       	subi	r19, 0xD0	; 208
    13b4:	31 93       	st	Z+, r19
    13b6:	de f6       	brtc	.-74     	; 0x136e <__ultoa_invert+0xe>
    13b8:	cf 01       	movw	r24, r30
    13ba:	08 95       	ret
    13bc:	46 2f       	mov	r20, r22
    13be:	47 70       	andi	r20, 0x07	; 7
    13c0:	40 5d       	subi	r20, 0xD0	; 208
    13c2:	41 93       	st	Z+, r20
    13c4:	b3 e0       	ldi	r27, 0x03	; 3
    13c6:	0f d0       	rcall	.+30     	; 0x13e6 <__ultoa_invert+0x86>
    13c8:	c9 f7       	brne	.-14     	; 0x13bc <__ultoa_invert+0x5c>
    13ca:	f6 cf       	rjmp	.-20     	; 0x13b8 <__ultoa_invert+0x58>
    13cc:	46 2f       	mov	r20, r22
    13ce:	4f 70       	andi	r20, 0x0F	; 15
    13d0:	40 5d       	subi	r20, 0xD0	; 208
    13d2:	4a 33       	cpi	r20, 0x3A	; 58
    13d4:	18 f0       	brcs	.+6      	; 0x13dc <__ultoa_invert+0x7c>
    13d6:	49 5d       	subi	r20, 0xD9	; 217
    13d8:	31 fd       	sbrc	r19, 1
    13da:	40 52       	subi	r20, 0x20	; 32
    13dc:	41 93       	st	Z+, r20
    13de:	02 d0       	rcall	.+4      	; 0x13e4 <__ultoa_invert+0x84>
    13e0:	a9 f7       	brne	.-22     	; 0x13cc <__ultoa_invert+0x6c>
    13e2:	ea cf       	rjmp	.-44     	; 0x13b8 <__ultoa_invert+0x58>
    13e4:	b4 e0       	ldi	r27, 0x04	; 4
    13e6:	a6 95       	lsr	r26
    13e8:	97 95       	ror	r25
    13ea:	87 95       	ror	r24
    13ec:	77 95       	ror	r23
    13ee:	67 95       	ror	r22
    13f0:	ba 95       	dec	r27
    13f2:	c9 f7       	brne	.-14     	; 0x13e6 <__ultoa_invert+0x86>
    13f4:	00 97       	sbiw	r24, 0x00	; 0
    13f6:	61 05       	cpc	r22, r1
    13f8:	71 05       	cpc	r23, r1
    13fa:	08 95       	ret
    13fc:	9b 01       	movw	r18, r22
    13fe:	ac 01       	movw	r20, r24
    1400:	0a 2e       	mov	r0, r26
    1402:	06 94       	lsr	r0
    1404:	57 95       	ror	r21
    1406:	47 95       	ror	r20
    1408:	37 95       	ror	r19
    140a:	27 95       	ror	r18
    140c:	ba 95       	dec	r27
    140e:	c9 f7       	brne	.-14     	; 0x1402 <__ultoa_invert+0xa2>
    1410:	62 0f       	add	r22, r18
    1412:	73 1f       	adc	r23, r19
    1414:	84 1f       	adc	r24, r20
    1416:	95 1f       	adc	r25, r21
    1418:	a0 1d       	adc	r26, r0
    141a:	08 95       	ret

0000141c <__prologue_saves__>:
    141c:	2f 92       	push	r2
    141e:	3f 92       	push	r3
    1420:	4f 92       	push	r4
    1422:	5f 92       	push	r5
    1424:	6f 92       	push	r6
    1426:	7f 92       	push	r7
    1428:	8f 92       	push	r8
    142a:	9f 92       	push	r9
    142c:	af 92       	push	r10
    142e:	bf 92       	push	r11
    1430:	cf 92       	push	r12
    1432:	df 92       	push	r13
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	cd b7       	in	r28, 0x3d	; 61
    1442:	de b7       	in	r29, 0x3e	; 62
    1444:	ca 1b       	sub	r28, r26
    1446:	db 0b       	sbc	r29, r27
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	f8 94       	cli
    144c:	de bf       	out	0x3e, r29	; 62
    144e:	0f be       	out	0x3f, r0	; 63
    1450:	cd bf       	out	0x3d, r28	; 61
    1452:	09 94       	ijmp

00001454 <__epilogue_restores__>:
    1454:	2a 88       	ldd	r2, Y+18	; 0x12
    1456:	39 88       	ldd	r3, Y+17	; 0x11
    1458:	48 88       	ldd	r4, Y+16	; 0x10
    145a:	5f 84       	ldd	r5, Y+15	; 0x0f
    145c:	6e 84       	ldd	r6, Y+14	; 0x0e
    145e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1460:	8c 84       	ldd	r8, Y+12	; 0x0c
    1462:	9b 84       	ldd	r9, Y+11	; 0x0b
    1464:	aa 84       	ldd	r10, Y+10	; 0x0a
    1466:	b9 84       	ldd	r11, Y+9	; 0x09
    1468:	c8 84       	ldd	r12, Y+8	; 0x08
    146a:	df 80       	ldd	r13, Y+7	; 0x07
    146c:	ee 80       	ldd	r14, Y+6	; 0x06
    146e:	fd 80       	ldd	r15, Y+5	; 0x05
    1470:	0c 81       	ldd	r16, Y+4	; 0x04
    1472:	1b 81       	ldd	r17, Y+3	; 0x03
    1474:	aa 81       	ldd	r26, Y+2	; 0x02
    1476:	b9 81       	ldd	r27, Y+1	; 0x01
    1478:	ce 0f       	add	r28, r30
    147a:	d1 1d       	adc	r29, r1
    147c:	0f b6       	in	r0, 0x3f	; 63
    147e:	f8 94       	cli
    1480:	de bf       	out	0x3e, r29	; 62
    1482:	0f be       	out	0x3f, r0	; 63
    1484:	cd bf       	out	0x3d, r28	; 61
    1486:	ed 01       	movw	r28, r26
    1488:	08 95       	ret

0000148a <_exit>:
    148a:	f8 94       	cli

0000148c <__stop_program>:
    148c:	ff cf       	rjmp	.-2      	; 0x148c <__stop_program>
