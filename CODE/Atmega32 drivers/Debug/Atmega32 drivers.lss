
Atmega32 drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000aa  00800060  000017c6  0000185a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000a2  0080010a  0080010a  00001904  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001904  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000300  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049de  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001385  00000000  00000000  0000667a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000019a9  00000000  00000000  000079ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000076c  00000000  00000000  000093a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a24  00000000  00000000  00009b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001e33  00000000  00000000  0000a538  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000250  00000000  00000000  0000c36b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
       4:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_1>
       8:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
       c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      10:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      14:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      18:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      1c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      20:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      24:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      28:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      2c:	0c 94 81 05 	jmp	0xb02	; 0xb02 <__vector_11>
      30:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      34:	0c 94 ad 00 	jmp	0x15a	; 0x15a <__vector_13>
      38:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      3c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      40:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      44:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      48:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      4c:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      50:	0c 94 4f 00 	jmp	0x9e	; 0x9e <__bad_interrupt>
      54:	84 08       	sbc	r8, r4
      56:	89 08       	sbc	r8, r9
      58:	8e 08       	sbc	r8, r14
      5a:	93 08       	sbc	r9, r3
      5c:	98 08       	sbc	r9, r8
      5e:	9d 08       	sbc	r9, r13
      60:	a2 08       	sbc	r10, r2
      62:	a7 08       	sbc	r10, r7

00000064 <__ctors_end>:
      64:	11 24       	eor	r1, r1
      66:	1f be       	out	0x3f, r1	; 63
      68:	cf e5       	ldi	r28, 0x5F	; 95
      6a:	d8 e0       	ldi	r29, 0x08	; 8
      6c:	de bf       	out	0x3e, r29	; 62
      6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_copy_data>:
      70:	11 e0       	ldi	r17, 0x01	; 1
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	e6 ec       	ldi	r30, 0xC6	; 198
      78:	f7 e1       	ldi	r31, 0x17	; 23
      7a:	02 c0       	rjmp	.+4      	; 0x80 <__do_copy_data+0x10>
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0
      80:	aa 30       	cpi	r26, 0x0A	; 10
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <__do_copy_data+0xc>

00000086 <__do_clear_bss>:
      86:	21 e0       	ldi	r18, 0x01	; 1
      88:	aa e0       	ldi	r26, 0x0A	; 10
      8a:	b1 e0       	ldi	r27, 0x01	; 1
      8c:	01 c0       	rjmp	.+2      	; 0x90 <.do_clear_bss_start>

0000008e <.do_clear_bss_loop>:
      8e:	1d 92       	st	X+, r1

00000090 <.do_clear_bss_start>:
      90:	ac 3a       	cpi	r26, 0xAC	; 172
      92:	b2 07       	cpc	r27, r18
      94:	e1 f7       	brne	.-8      	; 0x8e <.do_clear_bss_loop>
      96:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
      9a:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <_exit>

0000009e <__bad_interrupt>:
      9e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a2 <main>:

u8 temp2  = 1;
u8 tempstr[10]={0};
u8 data = 0;
int main()
{
      a2:	cf 93       	push	r28
      a4:	df 93       	push	r29
      a6:	00 d0       	rcall	.+0      	; 0xa8 <main+0x6>
      a8:	00 d0       	rcall	.+0      	; 0xaa <main+0x8>
      aa:	1f 92       	push	r1
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
	
	
	u8 TV_state=0;
	UART_INIT(9600);
      b0:	80 e8       	ldi	r24, 0x80	; 128
      b2:	95 e2       	ldi	r25, 0x25	; 37
      b4:	0e 94 a6 05 	call	0xb4c	; 0xb4c <UART_INIT>
	MQTT_Connect("1111");
      b8:	88 e7       	ldi	r24, 0x78	; 120
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 0a 06 	call	0xc14	; 0xc14 <MQTT_Connect>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c0:	2f ef       	ldi	r18, 0xFF	; 255
      c2:	8d e3       	ldi	r24, 0x3D	; 61
      c4:	99 e4       	ldi	r25, 0x49	; 73
      c6:	21 50       	subi	r18, 0x01	; 1
      c8:	80 40       	sbci	r24, 0x00	; 0
      ca:	90 40       	sbci	r25, 0x00	; 0
      cc:	e1 f7       	brne	.-8      	; 0xc6 <main+0x24>
      ce:	00 c0       	rjmp	.+0      	; 0xd0 <main+0x2e>
      d0:	00 00       	nop
	_delay_ms(3000);
	MQTT_Subscribe("G/devices");
      d2:	8d e7       	ldi	r24, 0x7D	; 125
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	0e 94 6e 06 	call	0xcdc	; 0xcdc <MQTT_Subscribe>
	Project_Init();
      da:	0e 94 db 06 	call	0xdb6	; 0xdb6 <Project_Init>
	sei();
      de:	78 94       	sei
	u8 password[5]={0};
      e0:	8e 01       	movw	r16, r28
      e2:	0f 5f       	subi	r16, 0xFF	; 255
      e4:	1f 4f       	sbci	r17, 0xFF	; 255
      e6:	85 e0       	ldi	r24, 0x05	; 5
      e8:	f8 01       	movw	r30, r16
      ea:	11 92       	st	Z+, r1
      ec:	8a 95       	dec	r24
      ee:	e9 f7       	brne	.-6      	; 0xea <main+0x48>
	turnOnFireAlarm();
      f0:	0e 94 d6 06 	call	0xdac	; 0xdac <turnOnFireAlarm>
	AnalogSensors();
      f4:	0e 94 0a 08 	call	0x1014	; 0x1014 <AnalogSensors>
	Get_Password(password);
      f8:	c8 01       	movw	r24, r16
      fa:	0e 94 77 07 	call	0xeee	; 0xeee <Get_Password>
	while(1)
	{
		
		AnalogSensors();
      fe:	0e 94 0a 08 	call	0x1014	; 0x1014 <AnalogSensors>
		IOTcharinput(data);
     102:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <__data_end>
     106:	0e 94 7a 08 	call	0x10f4	; 0x10f4 <IOTcharinput>
     10a:	f9 cf       	rjmp	.-14     	; 0xfe <main+0x5c>

0000010c <__vector_1>:
	}
}


ISR(INT0_vect)
{
     10c:	1f 92       	push	r1
     10e:	0f 92       	push	r0
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	0f 92       	push	r0
     114:	11 24       	eor	r1, r1
     116:	2f 93       	push	r18
     118:	3f 93       	push	r19
     11a:	4f 93       	push	r20
     11c:	5f 93       	push	r21
     11e:	6f 93       	push	r22
     120:	7f 93       	push	r23
     122:	8f 93       	push	r24
     124:	9f 93       	push	r25
     126:	af 93       	push	r26
     128:	bf 93       	push	r27
     12a:	ef 93       	push	r30
     12c:	ff 93       	push	r31
	ptrINT();
     12e:	e0 91 a4 01 	lds	r30, 0x01A4	; 0x8001a4 <ptrINT>
     132:	f0 91 a5 01 	lds	r31, 0x01A5	; 0x8001a5 <ptrINT+0x1>
     136:	09 95       	icall
}
     138:	ff 91       	pop	r31
     13a:	ef 91       	pop	r30
     13c:	bf 91       	pop	r27
     13e:	af 91       	pop	r26
     140:	9f 91       	pop	r25
     142:	8f 91       	pop	r24
     144:	7f 91       	pop	r23
     146:	6f 91       	pop	r22
     148:	5f 91       	pop	r21
     14a:	4f 91       	pop	r20
     14c:	3f 91       	pop	r19
     14e:	2f 91       	pop	r18
     150:	0f 90       	pop	r0
     152:	0f be       	out	0x3f, r0	; 63
     154:	0f 90       	pop	r0
     156:	1f 90       	pop	r1
     158:	18 95       	reti

0000015a <__vector_13>:

ISR(USART_RXC_vect)
{
     15a:	1f 92       	push	r1
     15c:	0f 92       	push	r0
     15e:	0f b6       	in	r0, 0x3f	; 63
     160:	0f 92       	push	r0
     162:	11 24       	eor	r1, r1
     164:	2f 93       	push	r18
     166:	3f 93       	push	r19
     168:	8f 93       	push	r24
     16a:	9f 93       	push	r25
     16c:	ef 93       	push	r30
     16e:	ff 93       	push	r31
	
	data=UDR;
     170:	9c b1       	in	r25, 0x0c	; 12
     172:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <__data_end>
	if (pktRecState == 0 && data == 0x30)
     176:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <pktRecState>
     17a:	81 11       	cpse	r24, r1
     17c:	0a c0       	rjmp	.+20     	; 0x192 <__vector_13+0x38>
     17e:	90 33       	cpi	r25, 0x30	; 48
     180:	41 f4       	brne	.+16     	; 0x192 <__vector_13+0x38>
	{
		mqttPktInd = 0;
		mqttPkt[mqttPktInd++] = data;
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mqttPktInd>
     188:	90 93 0e 01 	sts	0x010E, r25	; 0x80010e <mqttPkt>
		pktRecState = 1; // we received the pub type
     18c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pktRecState>
     190:	27 c0       	rjmp	.+78     	; 0x1e0 <__vector_13+0x86>
	}
	else if(pktRecState == 1)
     192:	81 30       	cpi	r24, 0x01	; 1
     194:	79 f4       	brne	.+30     	; 0x1b4 <__vector_13+0x5a>
	{
		mqttPkt[mqttPktInd++] = data;
     196:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <mqttPktInd>
     19a:	8e 0f       	add	r24, r30
     19c:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <mqttPktInd>
     1a0:	f0 e0       	ldi	r31, 0x00	; 0
     1a2:	e2 5f       	subi	r30, 0xF2	; 242
     1a4:	fe 4f       	sbci	r31, 0xFE	; 254
     1a6:	90 83       	st	Z, r25
		pktRecState = 2;
     1a8:	82 e0       	ldi	r24, 0x02	; 2
     1aa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <pktRecState>
		remLen = data;
     1ae:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <remLen>
     1b2:	16 c0       	rjmp	.+44     	; 0x1e0 <__vector_13+0x86>
	}
	else if(pktRecState == 2)
     1b4:	82 30       	cpi	r24, 0x02	; 2
     1b6:	a1 f4       	brne	.+40     	; 0x1e0 <__vector_13+0x86>
	{
		mqttPkt[mqttPktInd++] = data;
     1b8:	e0 91 0d 01 	lds	r30, 0x010D	; 0x80010d <mqttPktInd>
     1bc:	21 e0       	ldi	r18, 0x01	; 1
     1be:	2e 0f       	add	r18, r30
     1c0:	20 93 0d 01 	sts	0x010D, r18	; 0x80010d <mqttPktInd>
     1c4:	f0 e0       	ldi	r31, 0x00	; 0
     1c6:	e2 5f       	subi	r30, 0xF2	; 242
     1c8:	fe 4f       	sbci	r31, 0xFE	; 254
     1ca:	90 83       	st	Z, r25
		if(mqttPktInd == remLen + 2)
     1cc:	30 e0       	ldi	r19, 0x00	; 0
     1ce:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <remLen>
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	02 96       	adiw	r24, 0x02	; 2
     1d6:	28 17       	cp	r18, r24
     1d8:	39 07       	cpc	r19, r25
     1da:	11 f4       	brne	.+4      	; 0x1e0 <__vector_13+0x86>
		{
			pktRecState = 0;
     1dc:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <pktRecState>
		}
	}

	if(mqttPkt[0] == 0x30)
     1e0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <mqttPkt>
     1e4:	80 33       	cpi	r24, 0x30	; 48
     1e6:	41 f4       	brne	.+16     	; 0x1f8 <__vector_13+0x9e>
	{
		data=mqttPkt[remLen + 1];
     1e8:	e0 91 0c 01 	lds	r30, 0x010C	; 0x80010c <remLen>
     1ec:	f0 e0       	ldi	r31, 0x00	; 0
     1ee:	e1 5f       	subi	r30, 0xF1	; 241
     1f0:	fe 4f       	sbci	r31, 0xFE	; 254
     1f2:	80 81       	ld	r24, Z
     1f4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__data_end>
		
	}
	
     1f8:	ff 91       	pop	r31
     1fa:	ef 91       	pop	r30
     1fc:	9f 91       	pop	r25
     1fe:	8f 91       	pop	r24
     200:	3f 91       	pop	r19
     202:	2f 91       	pop	r18
     204:	0f 90       	pop	r0
     206:	0f be       	out	0x3f, r0	; 63
     208:	0f 90       	pop	r0
     20a:	1f 90       	pop	r1
     20c:	18 95       	reti

0000020e <DHT_start>:
 */ 
#include "DHT.h"
#include <string.h>
void DHT_start(void)
{
	pinDirection(DHT_PIN,OUTPUT);		
     20e:	61 e0       	ldi	r22, 0x01	; 1
     210:	82 e1       	ldi	r24, 0x12	; 18
     212:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	writePin(DHT_PIN,LOW);				//apply 0 to start the sensor
     216:	60 e0       	ldi	r22, 0x00	; 0
     218:	82 e1       	ldi	r24, 0x12	; 18
     21a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
     21e:	8f e3       	ldi	r24, 0x3F	; 63
     220:	9c e9       	ldi	r25, 0x9C	; 156
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <DHT_start+0x14>
     226:	00 c0       	rjmp	.+0      	; 0x228 <DHT_start+0x1a>
     228:	00 00       	nop
	_delay_ms(20);						
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	82 e1       	ldi	r24, 0x12	; 18
     22e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
     232:	08 95       	ret

00000234 <DHT_read>:
}

u8 DHT_read(void)
{
     234:	cf 93       	push	r28
     236:	df 93       	push	r29
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     238:	d0 e0       	ldi	r29, 0x00	; 0
	writePin(DHT_PIN,HIGH);				//apply 1 to start the sensor
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
     23a:	c0 e0       	ldi	r28, 0x00	; 0
	for (i=0;i<8;i++)
     23c:	1b c0       	rjmp	.+54     	; 0x274 <DHT_read+0x40>
	{
		while (readPin(DHT_PIN)==0);
     23e:	82 e1       	ldi	r24, 0x12	; 18
     240:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     244:	88 23       	and	r24, r24
     246:	d9 f3       	breq	.-10     	; 0x23e <DHT_read+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     248:	80 e5       	ldi	r24, 0x50	; 80
     24a:	8a 95       	dec	r24
     24c:	f1 f7       	brne	.-4      	; 0x24a <DHT_read+0x16>
		_delay_us(30);
		if (readPin(DHT_PIN)==0)
     24e:	82 e1       	ldi	r24, 0x12	; 18
     250:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     254:	81 11       	cpse	r24, r1
     256:	02 c0       	rjmp	.+4      	; 0x25c <DHT_read+0x28>
		{
			bitLogic=bitLogic<<1;
     258:	cc 0f       	add	r28, r28
     25a:	06 c0       	rjmp	.+12     	; 0x268 <DHT_read+0x34>
		}
		else
		{
			bitLogic=((bitLogic<<1)|0x01);
     25c:	8c 2f       	mov	r24, r28
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	88 0f       	add	r24, r24
     262:	99 1f       	adc	r25, r25
     264:	c8 2f       	mov	r28, r24
     266:	c1 60       	ori	r28, 0x01	; 1
		}
		
		while(readPin(DHT_PIN));
     268:	82 e1       	ldi	r24, 0x12	; 18
     26a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     26e:	81 11       	cpse	r24, r1
     270:	fb cf       	rjmp	.-10     	; 0x268 <DHT_read+0x34>
}

u8 DHT_read(void)
{
	u8 bitLogic=0 ,i=0;
	for (i=0;i<8;i++)
     272:	df 5f       	subi	r29, 0xFF	; 255
     274:	d8 30       	cpi	r29, 0x08	; 8
     276:	18 f3       	brcs	.-58     	; 0x23e <DHT_read+0xa>
		
		while(readPin(DHT_PIN));
		
	}
	return bitLogic;
}
     278:	8c 2f       	mov	r24, r28
     27a:	df 91       	pop	r29
     27c:	cf 91       	pop	r28
     27e:	08 95       	ret

00000280 <DHT_Response>:

void DHT_Response(void)
{
	pinDirection(DHT_PIN,INPUT);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	82 e1       	ldi	r24, 0x12	; 18
     284:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	while(readPin(DHT_PIN));
     288:	82 e1       	ldi	r24, 0x12	; 18
     28a:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     28e:	81 11       	cpse	r24, r1
     290:	fb cf       	rjmp	.-10     	; 0x288 <DHT_Response+0x8>
	while(!readPin(DHT_PIN));
     292:	82 e1       	ldi	r24, 0x12	; 18
     294:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     298:	88 23       	and	r24, r24
     29a:	d9 f3       	breq	.-10     	; 0x292 <DHT_Response+0x12>
	while(readPin(DHT_PIN));
     29c:	82 e1       	ldi	r24, 0x12	; 18
     29e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     2a2:	81 11       	cpse	r24, r1
     2a4:	fb cf       	rjmp	.-10     	; 0x29c <DHT_Response+0x1c>
}
     2a6:	08 95       	ret

000002a8 <intTostring>:
	
}


void intTostring(u16 hum_1,u16 temp_1,u8* temp,u8* hum )
{
     2a8:	4f 92       	push	r4
     2aa:	5f 92       	push	r5
     2ac:	6f 92       	push	r6
     2ae:	7f 92       	push	r7
     2b0:	8f 92       	push	r8
     2b2:	9f 92       	push	r9
     2b4:	af 92       	push	r10
     2b6:	bf 92       	push	r11
     2b8:	cf 92       	push	r12
     2ba:	df 92       	push	r13
     2bc:	ef 92       	push	r14
     2be:	ff 92       	push	r15
     2c0:	0f 93       	push	r16
     2c2:	1f 93       	push	r17
     2c4:	cf 93       	push	r28
     2c6:	df 93       	push	r29
     2c8:	cd b7       	in	r28, 0x3d	; 61
     2ca:	de b7       	in	r29, 0x3e	; 62
     2cc:	66 97       	sbiw	r28, 0x16	; 22
     2ce:	0f b6       	in	r0, 0x3f	; 63
     2d0:	f8 94       	cli
     2d2:	de bf       	out	0x3e, r29	; 62
     2d4:	0f be       	out	0x3f, r0	; 63
     2d6:	cd bf       	out	0x3d, r28	; 61
     2d8:	3c 01       	movw	r6, r24
     2da:	5b 01       	movw	r10, r22
     2dc:	4a 01       	movw	r8, r20
     2de:	42 2e       	mov	r4, r18
     2e0:	53 2e       	mov	r5, r19
	u8 dot[]=".";
     2e2:	8e e2       	ldi	r24, 0x2E	; 46
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	9a 83       	std	Y+2, r25	; 0x02
     2e8:	89 83       	std	Y+1, r24	; 0x01
	u8 temp_2[10]={0},hum_2[10]={0};
     2ea:	8a e0       	ldi	r24, 0x0A	; 10
     2ec:	fe 01       	movw	r30, r28
     2ee:	33 96       	adiw	r30, 0x03	; 3
     2f0:	df 01       	movw	r26, r30
     2f2:	98 2f       	mov	r25, r24
     2f4:	1d 92       	st	X+, r1
     2f6:	9a 95       	dec	r25
     2f8:	e9 f7       	brne	.-6      	; 0x2f4 <intTostring+0x4c>
     2fa:	3a 96       	adiw	r30, 0x0a	; 10
     2fc:	df 01       	movw	r26, r30
     2fe:	1d 92       	st	X+, r1
     300:	8a 95       	dec	r24
     302:	e9 f7       	brne	.-6      	; 0x2fe <intTostring+0x56>
			if (GETBit(temp_1,15)==1)
     304:	77 23       	and	r23, r23
     306:	34 f4       	brge	.+12     	; 0x314 <intTostring+0x6c>
			{
				CLRBit(temp_1,15);
     308:	e8 94       	clt
     30a:	b7 f8       	bld	r11, 7
				temp[0]='-';
     30c:	8d e2       	ldi	r24, 0x2D	; 45
     30e:	fa 01       	movw	r30, r20
     310:	81 93       	st	Z+, r24
     312:	4f 01       	movw	r8, r30
				temp++;
			}
			sprintf(temp,"%u",(temp_1)/10);
     314:	95 01       	movw	r18, r10
     316:	ad ec       	ldi	r26, 0xCD	; 205
     318:	bc ec       	ldi	r27, 0xCC	; 204
     31a:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__umulhisi3>
     31e:	6c 01       	movw	r12, r24
     320:	d6 94       	lsr	r13
     322:	c7 94       	ror	r12
     324:	d6 94       	lsr	r13
     326:	c7 94       	ror	r12
     328:	d6 94       	lsr	r13
     32a:	c7 94       	ror	r12
     32c:	df 92       	push	r13
     32e:	cf 92       	push	r12
     330:	07 e8       	ldi	r16, 0x87	; 135
     332:	10 e0       	ldi	r17, 0x00	; 0
     334:	1f 93       	push	r17
     336:	0f 93       	push	r16
     338:	9f 92       	push	r9
     33a:	8f 92       	push	r8
     33c:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			sprintf(hum,"%u",(hum_1)/10);
     340:	93 01       	movw	r18, r6
     342:	ad ec       	ldi	r26, 0xCD	; 205
     344:	bc ec       	ldi	r27, 0xCC	; 204
     346:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__umulhisi3>
     34a:	7c 01       	movw	r14, r24
     34c:	f6 94       	lsr	r15
     34e:	e7 94       	ror	r14
     350:	f6 94       	lsr	r15
     352:	e7 94       	ror	r14
     354:	f6 94       	lsr	r15
     356:	e7 94       	ror	r14
     358:	ff 92       	push	r15
     35a:	ef 92       	push	r14
     35c:	1f 93       	push	r17
     35e:	0f 93       	push	r16
     360:	5f 92       	push	r5
     362:	4f 92       	push	r4
     364:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			
			sprintf(temp_2,"%u",((temp_1)%10));
     368:	c6 01       	movw	r24, r12
     36a:	88 0f       	add	r24, r24
     36c:	99 1f       	adc	r25, r25
     36e:	cc 0c       	add	r12, r12
     370:	dd 1c       	adc	r13, r13
     372:	cc 0c       	add	r12, r12
     374:	dd 1c       	adc	r13, r13
     376:	cc 0c       	add	r12, r12
     378:	dd 1c       	adc	r13, r13
     37a:	c8 0e       	add	r12, r24
     37c:	d9 1e       	adc	r13, r25
     37e:	ac 18       	sub	r10, r12
     380:	bd 08       	sbc	r11, r13
     382:	bf 92       	push	r11
     384:	af 92       	push	r10
     386:	1f 93       	push	r17
     388:	0f 93       	push	r16
     38a:	6e 01       	movw	r12, r28
     38c:	f3 e0       	ldi	r31, 0x03	; 3
     38e:	cf 0e       	add	r12, r31
     390:	d1 1c       	adc	r13, r1
     392:	df 92       	push	r13
     394:	cf 92       	push	r12
     396:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			sprintf(hum_2,"%u",((hum_1)%10));
     39a:	c7 01       	movw	r24, r14
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	ee 0c       	add	r14, r14
     3a2:	ff 1c       	adc	r15, r15
     3a4:	ee 0c       	add	r14, r14
     3a6:	ff 1c       	adc	r15, r15
     3a8:	ee 0c       	add	r14, r14
     3aa:	ff 1c       	adc	r15, r15
     3ac:	e8 0e       	add	r14, r24
     3ae:	f9 1e       	adc	r15, r25
     3b0:	6e 18       	sub	r6, r14
     3b2:	7f 08       	sbc	r7, r15
     3b4:	7f 92       	push	r7
     3b6:	6f 92       	push	r6
     3b8:	1f 93       	push	r17
     3ba:	0f 93       	push	r16
     3bc:	8e 01       	movw	r16, r28
     3be:	03 5f       	subi	r16, 0xF3	; 243
     3c0:	1f 4f       	sbci	r17, 0xFF	; 255
     3c2:	1f 93       	push	r17
     3c4:	0f 93       	push	r16
     3c6:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
			
			strcat(hum,dot);
     3ca:	be 01       	movw	r22, r28
     3cc:	6f 5f       	subi	r22, 0xFF	; 255
     3ce:	7f 4f       	sbci	r23, 0xFF	; 255
     3d0:	84 2d       	mov	r24, r4
     3d2:	95 2d       	mov	r25, r5
     3d4:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <strcat>
			strcat(temp,dot);
     3d8:	be 01       	movw	r22, r28
     3da:	6f 5f       	subi	r22, 0xFF	; 255
     3dc:	7f 4f       	sbci	r23, 0xFF	; 255
     3de:	c4 01       	movw	r24, r8
     3e0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <strcat>
			strcat(hum,hum_2);
     3e4:	b8 01       	movw	r22, r16
     3e6:	84 2d       	mov	r24, r4
     3e8:	95 2d       	mov	r25, r5
     3ea:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <strcat>
			strcat(temp,temp_2);
     3ee:	b6 01       	movw	r22, r12
     3f0:	c4 01       	movw	r24, r8
     3f2:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <strcat>
     3f6:	0f b6       	in	r0, 0x3f	; 63
     3f8:	f8 94       	cli
     3fa:	de bf       	out	0x3e, r29	; 62
     3fc:	0f be       	out	0x3f, r0	; 63
     3fe:	cd bf       	out	0x3d, r28	; 61
     400:	66 96       	adiw	r28, 0x16	; 22
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	df 91       	pop	r29
     40e:	cf 91       	pop	r28
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	ff 90       	pop	r15
     416:	ef 90       	pop	r14
     418:	df 90       	pop	r13
     41a:	cf 90       	pop	r12
     41c:	bf 90       	pop	r11
     41e:	af 90       	pop	r10
     420:	9f 90       	pop	r9
     422:	8f 90       	pop	r8
     424:	7f 90       	pop	r7
     426:	6f 90       	pop	r6
     428:	5f 90       	pop	r5
     42a:	4f 90       	pop	r4
     42c:	08 95       	ret

0000042e <DHT_Represent>:
	while(!readPin(DHT_PIN));
	while(readPin(DHT_PIN));
}

BOOL DHT_Represent(u8* hum,u8* temp)
{
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	7c 01       	movw	r14, r24
     43e:	8b 01       	movw	r16, r22
	u16 temp_1=0,hum_1=0;
	u8 humidity_I = 0 , humidity_D = 0, temp_I = 0, temp_D = 0 , sumCheck = 0;
	DHT_start();
     440:	0e 94 07 01 	call	0x20e	; 0x20e <DHT_start>
	DHT_Response();
     444:	0e 94 40 01 	call	0x280	; 0x280 <DHT_Response>
	humidity_I=DHT_read();
     448:	0e 94 1a 01 	call	0x234	; 0x234 <DHT_read>
     44c:	d8 2f       	mov	r29, r24
	humidity_D=DHT_read();
     44e:	0e 94 1a 01 	call	0x234	; 0x234 <DHT_read>
     452:	d8 2e       	mov	r13, r24
	temp_I=DHT_read();
     454:	0e 94 1a 01 	call	0x234	; 0x234 <DHT_read>
     458:	c8 2f       	mov	r28, r24
	temp_D=DHT_read();
     45a:	0e 94 1a 01 	call	0x234	; 0x234 <DHT_read>
	
		hum_1=((humidity_I<<8)|humidity_D);
     45e:	ed 2f       	mov	r30, r29
     460:	f0 e0       	ldi	r31, 0x00	; 0
     462:	fe 2f       	mov	r31, r30
     464:	ee 27       	eor	r30, r30
		temp_1=((temp_I<<8)|temp_D);
     466:	6c 2f       	mov	r22, r28
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	76 2f       	mov	r23, r22
     46c:	66 27       	eor	r22, r22
     46e:	68 2b       	or	r22, r24
		
		intTostring(hum_1,temp_1,temp,hum);
     470:	97 01       	movw	r18, r14
     472:	a8 01       	movw	r20, r16
     474:	cf 01       	movw	r24, r30
     476:	8d 29       	or	r24, r13
     478:	0e 94 54 01 	call	0x2a8	; 0x2a8 <intTostring>
		return TRUE;
	
}
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	df 91       	pop	r29
     480:	cf 91       	pop	r28
     482:	1f 91       	pop	r17
     484:	0f 91       	pop	r16
     486:	ff 90       	pop	r15
     488:	ef 90       	pop	r14
     48a:	df 90       	pop	r13
     48c:	08 95       	ret

0000048e <KEYPAD_Init>:



void KEYPAD_Init(void)
{
	pinsDirection(&ROW_DDR,ROW_PINS,OUTPUT);
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	6f e0       	ldi	r22, 0x0F	; 15
     492:	87 e3       	ldi	r24, 0x37	; 55
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 72 05 	call	0xae4	; 0xae4 <pinsDirection>
	writePins(&ROW_PORT,ROW_PINS,HIGH);	
     49a:	41 e0       	ldi	r20, 0x01	; 1
     49c:	6f e0       	ldi	r22, 0x0F	; 15
     49e:	88 e3       	ldi	r24, 0x38	; 56
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
	pinsDirection(&COL_DDR,COL_PINS,INPUT);
     4a6:	40 e0       	ldi	r20, 0x00	; 0
     4a8:	60 e7       	ldi	r22, 0x70	; 112
     4aa:	87 e3       	ldi	r24, 0x37	; 55
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	0e 94 72 05 	call	0xae4	; 0xae4 <pinsDirection>
	writePins(&COL_PORT,COL_PINS,HIGH);
     4b2:	41 e0       	ldi	r20, 0x01	; 1
     4b4:	60 e7       	ldi	r22, 0x70	; 112
     4b6:	88 e3       	ldi	r24, 0x38	; 56
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
     4be:	08 95       	ret

000004c0 <GetKey>:
}



u8 GetKey(void)
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
     4c4:	d8 e0       	ldi	r29, 0x08	; 8
     4c6:	2b c0       	rjmp	.+86     	; 0x51e <GetKey+0x5e>
	{
		writePin(row,LOW);
     4c8:	60 e0       	ldi	r22, 0x00	; 0
     4ca:	8d 2f       	mov	r24, r29
     4cc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
     4d0:	cc e0       	ldi	r28, 0x0C	; 12
     4d2:	1e c0       	rjmp	.+60     	; 0x510 <GetKey+0x50>
		{
			if (!readPin(col))
     4d4:	8c 2f       	mov	r24, r28
     4d6:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     4da:	81 11       	cpse	r24, r1
     4dc:	18 c0       	rjmp	.+48     	; 0x50e <GetKey+0x4e>
			{
				while(!readPin(col));
     4de:	8c 2f       	mov	r24, r28
     4e0:	0e 94 1e 05 	call	0xa3c	; 0xa3c <readPin>
     4e4:	88 23       	and	r24, r24
     4e6:	d9 f3       	breq	.-10     	; 0x4de <GetKey+0x1e>
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
     4e8:	2d 2f       	mov	r18, r29
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	28 50       	subi	r18, 0x08	; 8
     4ee:	31 09       	sbc	r19, r1
     4f0:	ec 2f       	mov	r30, r28
     4f2:	f0 e0       	ldi	r31, 0x00	; 0
     4f4:	cf 01       	movw	r24, r30
     4f6:	0c 97       	sbiw	r24, 0x0c	; 12
     4f8:	f9 01       	movw	r30, r18
     4fa:	ee 0f       	add	r30, r30
     4fc:	ff 1f       	adc	r31, r31
     4fe:	e2 0f       	add	r30, r18
     500:	f3 1f       	adc	r31, r19
     502:	e0 5a       	subi	r30, 0xA0	; 160
     504:	ff 4f       	sbci	r31, 0xFF	; 255
     506:	e8 0f       	add	r30, r24
     508:	f9 1f       	adc	r31, r25
     50a:	80 81       	ld	r24, Z
				return key;
     50c:	0b c0       	rjmp	.+22     	; 0x524 <GetKey+0x64>
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
	{
		writePin(row,LOW);
		for (col=FIRSTOFCOL;col<=LASTOFCOL;col++)
     50e:	cf 5f       	subi	r28, 0xFF	; 255
     510:	cf 30       	cpi	r28, 0x0F	; 15
     512:	00 f3       	brcs	.-64     	; 0x4d4 <GetKey+0x14>
				while(!readPin(col));
				key=key_CHAR[row-ROWOFFSET][col-COLOFFSET];
				return key;
			}	
		}
		writePin(row,HIGH);
     514:	61 e0       	ldi	r22, 0x01	; 1
     516:	8d 2f       	mov	r24, r29
     518:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
u8 GetKey(void)
{
	u8 key=0;
	u8 row=0,col=0;
	
	for (row=FIRSTOFROW;row<=LASTOFROW;row++)
     51c:	df 5f       	subi	r29, 0xFF	; 255
     51e:	dc 30       	cpi	r29, 0x0C	; 12
     520:	98 f2       	brcs	.-90     	; 0x4c8 <GetKey+0x8>
				return key;
			}	
		}
		writePin(row,HIGH);
	}	
	return key;
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <LCD_latch>:
	SendToLCD(data);
}

void LCD_latch(void)
{
	writePin(LCD_E,HIGH);
     52a:	61 e0       	ldi	r22, 0x01	; 1
     52c:	83 e0       	ldi	r24, 0x03	; 3
     52e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
     532:	85 e8       	ldi	r24, 0x85	; 133
     534:	8a 95       	dec	r24
     536:	f1 f7       	brne	.-4      	; 0x534 <LCD_latch+0xa>
     538:	00 00       	nop
	_delay_us(50);
	writePin(LCD_E,LOW);
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	83 e0       	ldi	r24, 0x03	; 3
     53e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
     542:	85 e8       	ldi	r24, 0x85	; 133
     544:	8a 95       	dec	r24
     546:	f1 f7       	brne	.-4      	; 0x544 <LCD_latch+0x1a>
     548:	00 00       	nop
     54a:	08 95       	ret

0000054c <SendToLCD>:
{
	LCD_send_cmd(CMD_RET);
	_delay_ms(2);
}
void SendToLCD(u8 data)
{
     54c:	cf 93       	push	r28
     54e:	c8 2f       	mov	r28, r24
	writePins(&PORTA,data_pins,LOW);
     550:	40 e0       	ldi	r20, 0x00	; 0
     552:	60 ef       	ldi	r22, 0xF0	; 240
     554:	8b e3       	ldi	r24, 0x3B	; 59
     556:	90 e0       	ldi	r25, 0x00	; 0
     558:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
	writePins(&PORTA,(data&data_pins),HIGH);
     55c:	6c 2f       	mov	r22, r28
     55e:	60 7f       	andi	r22, 0xF0	; 240
     560:	41 e0       	ldi	r20, 0x01	; 1
     562:	8b e3       	ldi	r24, 0x3B	; 59
     564:	90 e0       	ldi	r25, 0x00	; 0
     566:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
	LCD_latch();
     56a:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_latch>
	writePins(&PORTA,data_pins,LOW);
     56e:	40 e0       	ldi	r20, 0x00	; 0
     570:	60 ef       	ldi	r22, 0xF0	; 240
     572:	8b e3       	ldi	r24, 0x3B	; 59
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
	writePins(&PORTA,((data<<4)&data_pins),HIGH);
     57a:	80 e1       	ldi	r24, 0x10	; 16
     57c:	c8 9f       	mul	r28, r24
     57e:	b0 01       	movw	r22, r0
     580:	11 24       	eor	r1, r1
     582:	41 e0       	ldi	r20, 0x01	; 1
     584:	8b e3       	ldi	r24, 0x3B	; 59
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
	LCD_latch();
     58c:	0e 94 95 02 	call	0x52a	; 0x52a <LCD_latch>
     590:	85 e8       	ldi	r24, 0x85	; 133
     592:	8a 95       	dec	r24
     594:	f1 f7       	brne	.-4      	; 0x592 <SendToLCD+0x46>
     596:	00 00       	nop
	_delay_us(50);
}
     598:	cf 91       	pop	r28
     59a:	08 95       	ret

0000059c <LCD_send_cmd>:

void LCD_send_cmd(u8 command)
{
     59c:	cf 93       	push	r28
     59e:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,LOW);
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	82 e0       	ldi	r24, 0x02	; 2
     5a4:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
	SendToLCD(command);
     5a8:	8c 2f       	mov	r24, r28
     5aa:	0e 94 a6 02 	call	0x54c	; 0x54c <SendToLCD>
}
     5ae:	cf 91       	pop	r28
     5b0:	08 95       	ret

000005b2 <LCD_CLEAR>:
	LCD_CLEAR();
}

void LCD_CLEAR(void)
{
	LCD_send_cmd(CMD_CLR);
     5b2:	81 e0       	ldi	r24, 0x01	; 1
     5b4:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5b8:	8f e9       	ldi	r24, 0x9F	; 159
     5ba:	9f e0       	ldi	r25, 0x0F	; 15
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <LCD_CLEAR+0xa>
     5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <LCD_CLEAR+0x10>
     5c2:	00 00       	nop
     5c4:	08 95       	ret

000005c6 <LCD_ret_Home>:
	_delay_ms(2);
}
void LCD_ret_Home(void)
{
	LCD_send_cmd(CMD_RET);
     5c6:	82 e0       	ldi	r24, 0x02	; 2
     5c8:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
     5cc:	8f e9       	ldi	r24, 0x9F	; 159
     5ce:	9f e0       	ldi	r25, 0x0F	; 15
     5d0:	01 97       	sbiw	r24, 0x01	; 1
     5d2:	f1 f7       	brne	.-4      	; 0x5d0 <LCD_ret_Home+0xa>
     5d4:	00 c0       	rjmp	.+0      	; 0x5d6 <LCD_ret_Home+0x10>
     5d6:	00 00       	nop
     5d8:	08 95       	ret

000005da <LCD_init>:


/*clear must be the last command*/
void LCD_init(void)
{
	pinsDirection(&data_ddr, data_pins, OUTPUT);
     5da:	41 e0       	ldi	r20, 0x01	; 1
     5dc:	60 ef       	ldi	r22, 0xF0	; 240
     5de:	8a e3       	ldi	r24, 0x3A	; 58
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	0e 94 72 05 	call	0xae4	; 0xae4 <pinsDirection>
	pinsDirection(&ctr_ddr, ctr_pin, OUTPUT);
     5e6:	41 e0       	ldi	r20, 0x01	; 1
     5e8:	6c e0       	ldi	r22, 0x0C	; 12
     5ea:	8a e3       	ldi	r24, 0x3A	; 58
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	0e 94 72 05 	call	0xae4	; 0xae4 <pinsDirection>
     5f2:	2f ef       	ldi	r18, 0xFF	; 255
     5f4:	89 ef       	ldi	r24, 0xF9	; 249
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	21 50       	subi	r18, 0x01	; 1
     5fa:	80 40       	sbci	r24, 0x00	; 0
     5fc:	90 40       	sbci	r25, 0x00	; 0
     5fe:	e1 f7       	brne	.-8      	; 0x5f8 <LCD_init+0x1e>
     600:	00 c0       	rjmp	.+0      	; 0x602 <LCD_init+0x28>
     602:	00 00       	nop
	_delay_ms(40);
	LCD_ret_Home();
     604:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <LCD_ret_Home>
	LCD_send_cmd(CMD_CUR_INC);
     608:	86 e0       	ldi	r24, 0x06	; 6
     60a:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
	LCD_send_cmd(CMD_CUR_SIT);
     60e:	8c e0       	ldi	r24, 0x0C	; 12
     610:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
	LCD_send_cmd(CMD_SHIFT);
     614:	80 e1       	ldi	r24, 0x10	; 16
     616:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
	LCD_send_cmd(CMD_FUN_SET);
     61a:	88 e2       	ldi	r24, 0x28	; 40
     61c:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
	LCD_CLEAR();
     620:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_CLEAR>
     624:	08 95       	ret

00000626 <LCD_send_data>:
	writePin(LCD_RS,LOW);
	SendToLCD(command);
}

void LCD_send_data(u8 data)
{
     626:	cf 93       	push	r28
     628:	c8 2f       	mov	r28, r24
	writePin(LCD_RS,HIGH);
     62a:	61 e0       	ldi	r22, 0x01	; 1
     62c:	82 e0       	ldi	r24, 0x02	; 2
     62e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
	SendToLCD(data);
     632:	8c 2f       	mov	r24, r28
     634:	0e 94 a6 02 	call	0x54c	; 0x54c <SendToLCD>
}
     638:	cf 91       	pop	r28
     63a:	08 95       	ret

0000063c <disp_char>:
	writePin(LCD_E,LOW);
	_delay_us(50);
}
void disp_char(u8 letter)
{
	LCD_send_data(letter);
     63c:	0e 94 13 03 	call	0x626	; 0x626 <LCD_send_data>
     640:	08 95       	ret

00000642 <disp_str>:
{
	LCD_GOTXY(row,col);
	disp_char(letter);	
}
void disp_str(u8* str)
{
     642:	0f 93       	push	r16
     644:	1f 93       	push	r17
     646:	cf 93       	push	r28
     648:	8c 01       	movw	r16, r24
	u8 indx=0;
     64a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[indx]!='\0')
     64c:	03 c0       	rjmp	.+6      	; 0x654 <disp_str+0x12>
	{
		disp_char(indx[str]);
     64e:	0e 94 1e 03 	call	0x63c	; 0x63c <disp_char>
		indx++;
     652:	cf 5f       	subi	r28, 0xFF	; 255
	disp_char(letter);	
}
void disp_str(u8* str)
{
	u8 indx=0;
	while(str[indx]!='\0')
     654:	f8 01       	movw	r30, r16
     656:	ec 0f       	add	r30, r28
     658:	f1 1d       	adc	r31, r1
     65a:	80 81       	ld	r24, Z
     65c:	81 11       	cpse	r24, r1
     65e:	f7 cf       	rjmp	.-18     	; 0x64e <disp_str+0xc>
	{
		disp_char(indx[str]);
		indx++;
	}
}
     660:	cf 91       	pop	r28
     662:	1f 91       	pop	r17
     664:	0f 91       	pop	r16
     666:	08 95       	ret

00000668 <LCD_GOTXY>:
void LCD_GOTXY(u8 row,u8 col)
{
	if (row==1)
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	29 f4       	brne	.+10     	; 0x676 <LCD_GOTXY+0xe>
	{
		LCD_send_cmd(DDRAM_ADD+0x00+col-1);
     66c:	8f e7       	ldi	r24, 0x7F	; 127
     66e:	86 0f       	add	r24, r22
     670:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
     674:	08 95       	ret
	}
	else if(row==2)
     676:	82 30       	cpi	r24, 0x02	; 2
     678:	29 f4       	brne	.+10     	; 0x684 <LCD_GOTXY+0x1c>
	{
		LCD_send_cmd(0xC0+col-1);	
     67a:	8f eb       	ldi	r24, 0xBF	; 191
     67c:	86 0f       	add	r24, r22
     67e:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
     682:	08 95       	ret
	}
	else if(row==3)
     684:	83 30       	cpi	r24, 0x03	; 3
     686:	29 f4       	brne	.+10     	; 0x692 <LCD_GOTXY+0x2a>
	{
		LCD_send_cmd(0x90+col-1);
     688:	8f e8       	ldi	r24, 0x8F	; 143
     68a:	86 0f       	add	r24, r22
     68c:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
     690:	08 95       	ret
	}
	else if(row==4)
     692:	84 30       	cpi	r24, 0x04	; 4
     694:	21 f4       	brne	.+8      	; 0x69e <LCD_GOTXY+0x36>
	{
		LCD_send_cmd(0xD0+col-1);
     696:	8f ec       	ldi	r24, 0xCF	; 207
     698:	86 0f       	add	r24, r22
     69a:	0e 94 ce 02 	call	0x59c	; 0x59c <LCD_send_cmd>
     69e:	08 95       	ret

000006a0 <disp_charXY>:
{
	LCD_send_data(letter);
}

void disp_charXY(u8 row,u8 col,u8 letter)
{
     6a0:	cf 93       	push	r28
     6a2:	c4 2f       	mov	r28, r20
	LCD_GOTXY(row,col);
     6a4:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GOTXY>
	disp_char(letter);	
     6a8:	8c 2f       	mov	r24, r28
     6aa:	0e 94 1e 03 	call	0x63c	; 0x63c <disp_char>
}
     6ae:	cf 91       	pop	r28
     6b0:	08 95       	ret

000006b2 <disp_strXY>:
	}
	
}

void disp_strXY(u8 row,u8 col,u8* str)
{
     6b2:	cf 93       	push	r28
     6b4:	df 93       	push	r29
     6b6:	ea 01       	movw	r28, r20
	LCD_GOTXY(row,col);
     6b8:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GOTXY>
	disp_str(str);
     6bc:	ce 01       	movw	r24, r28
     6be:	0e 94 21 03 	call	0x642	; 0x642 <disp_str>
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <disp_int>:


void disp_int(u32 intvalue)
{
     6c8:	0f 93       	push	r16
     6ca:	1f 93       	push	r17
     6cc:	cf 93       	push	r28
     6ce:	df 93       	push	r29
     6d0:	cd b7       	in	r28, 0x3d	; 61
     6d2:	de b7       	in	r29, 0x3e	; 62
     6d4:	2b 97       	sbiw	r28, 0x0b	; 11
     6d6:	0f b6       	in	r0, 0x3f	; 63
     6d8:	f8 94       	cli
     6da:	de bf       	out	0x3e, r29	; 62
     6dc:	0f be       	out	0x3f, r0	; 63
     6de:	cd bf       	out	0x3d, r28	; 61
	u8 string[11]={0};
     6e0:	8e 01       	movw	r16, r28
     6e2:	0f 5f       	subi	r16, 0xFF	; 255
     6e4:	1f 4f       	sbci	r17, 0xFF	; 255
     6e6:	2b e0       	ldi	r18, 0x0B	; 11
     6e8:	f8 01       	movw	r30, r16
     6ea:	11 92       	st	Z+, r1
     6ec:	2a 95       	dec	r18
     6ee:	e9 f7       	brne	.-6      	; 0x6ea <disp_int+0x22>
		sprintf(string,"%u",intvalue);
     6f0:	9f 93       	push	r25
     6f2:	8f 93       	push	r24
     6f4:	7f 93       	push	r23
     6f6:	6f 93       	push	r22
     6f8:	87 e8       	ldi	r24, 0x87	; 135
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	9f 93       	push	r25
     6fe:	8f 93       	push	r24
     700:	1f 93       	push	r17
     702:	0f 93       	push	r16
     704:	0e 94 f7 08 	call	0x11ee	; 0x11ee <sprintf>
		disp_str(string);
     708:	c8 01       	movw	r24, r16
     70a:	0e 94 21 03 	call	0x642	; 0x642 <disp_str>
}
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	2b 96       	adiw	r28, 0x0b	; 11
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	1f 91       	pop	r17
     72a:	0f 91       	pop	r16
     72c:	08 95       	ret

0000072e <disp_intXY>:
void disp_intXY(u8 row,u8 col,u32 intvalue)
{
     72e:	cf 92       	push	r12
     730:	df 92       	push	r13
     732:	ef 92       	push	r14
     734:	ff 92       	push	r15
     736:	69 01       	movw	r12, r18
     738:	7a 01       	movw	r14, r20
	LCD_GOTXY(row,col);
     73a:	0e 94 34 03 	call	0x668	; 0x668 <LCD_GOTXY>
	disp_int(intvalue);
     73e:	c7 01       	movw	r24, r14
     740:	b6 01       	movw	r22, r12
     742:	0e 94 64 03 	call	0x6c8	; 0x6c8 <disp_int>
}
     746:	ff 90       	pop	r15
     748:	ef 90       	pop	r14
     74a:	df 90       	pop	r13
     74c:	cf 90       	pop	r12
     74e:	08 95       	ret

00000750 <Callback>:


void (*ptrINT)(void)=0;
void Callback(void (*ptr)(void))
{
	ptrINT=ptr;
     750:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <ptrINT+0x1>
     754:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <ptrINT>
     758:	08 95       	ret

0000075a <INT_init>:


void INT_init(u8 int_num , u8 sense_control)
{
	//GICR|=(1<<int_num);
	switch(int_num)
     75a:	86 30       	cpi	r24, 0x06	; 6
     75c:	a1 f0       	breq	.+40     	; 0x786 <INT_init+0x2c>
     75e:	87 30       	cpi	r24, 0x07	; 7
     760:	e1 f0       	breq	.+56     	; 0x79a <INT_init+0x40>
     762:	85 30       	cpi	r24, 0x05	; 5
     764:	11 f5       	brne	.+68     	; 0x7aa <INT_init+0x50>
	{
		case INT_2:
		MCUCSR|=((sense_control & 0x01)<<6);
     766:	84 b7       	in	r24, 0x34	; 52
     768:	26 2f       	mov	r18, r22
     76a:	21 70       	andi	r18, 0x01	; 1
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	00 24       	eor	r0, r0
     770:	36 95       	lsr	r19
     772:	27 95       	ror	r18
     774:	07 94       	ror	r0
     776:	36 95       	lsr	r19
     778:	27 95       	ror	r18
     77a:	07 94       	ror	r0
     77c:	32 2f       	mov	r19, r18
     77e:	20 2d       	mov	r18, r0
     780:	28 2b       	or	r18, r24
     782:	24 bf       	out	0x34, r18	; 52
		break;
     784:	08 95       	ret
		
		case INT_0:
		CLRBits(MCUCR,INT0_ISC_MSK);
     786:	85 b7       	in	r24, 0x35	; 53
     788:	8c 7f       	andi	r24, 0xFC	; 252
     78a:	85 bf       	out	0x35, r24	; 53
		SETBits(MCUCR,sense_control<<INT0_ISC_POS);
     78c:	85 b7       	in	r24, 0x35	; 53
     78e:	68 2b       	or	r22, r24
     790:	65 bf       	out	0x35, r22	; 53
		SETBit(GICR,INT_0);
     792:	8b b7       	in	r24, 0x3b	; 59
     794:	80 64       	ori	r24, 0x40	; 64
     796:	8b bf       	out	0x3b, r24	; 59
		break;
     798:	08 95       	ret
		case INT_1:
		MCUCR|=(sense_control<<2);
     79a:	85 b7       	in	r24, 0x35	; 53
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	66 0f       	add	r22, r22
     7a0:	77 1f       	adc	r23, r23
     7a2:	66 0f       	add	r22, r22
     7a4:	77 1f       	adc	r23, r23
     7a6:	68 2b       	or	r22, r24
     7a8:	65 bf       	out	0x35, r22	; 53
     7aa:	08 95       	ret

000007ac <GLOBAL_INT_EN>:
	}
}

void GLOBAL_INT_EN(void)
{
	writePins( &SREG,0x80,HIGH );
     7ac:	41 e0       	ldi	r20, 0x01	; 1
     7ae:	60 e8       	ldi	r22, 0x80	; 128
     7b0:	8f e5       	ldi	r24, 0x5F	; 95
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	0e 94 63 05 	call	0xac6	; 0xac6 <writePins>
     7b8:	08 95       	ret

000007ba <ADC_init>:



void ADC_init(void)
{
	ADMUX|=(AVCC<<6)|(ADLAR<<5);	
     7ba:	87 b1       	in	r24, 0x07	; 7
     7bc:	80 64       	ori	r24, 0x40	; 64
     7be:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(SELEPRESC)|(ADATE<<5)|(ADIE<<3)|(ADEN<<7);
     7c0:	86 b1       	in	r24, 0x06	; 6
     7c2:	87 68       	ori	r24, 0x87	; 135
     7c4:	86 b9       	out	0x06, r24	; 6
     7c6:	08 95       	ret

000007c8 <read_analog>:
}
u16 read_analog(u16 ADC_NUM)
{ 
	ADMUX&=~(0x1F);
     7c8:	97 b1       	in	r25, 0x07	; 7
     7ca:	90 7e       	andi	r25, 0xE0	; 224
     7cc:	97 b9       	out	0x07, r25	; 7
	ADMUX|=(ADC_NUM);
     7ce:	97 b1       	in	r25, 0x07	; 7
     7d0:	89 2b       	or	r24, r25
     7d2:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<6);			 //start conversion
     7d4:	86 b1       	in	r24, 0x06	; 6
     7d6:	80 64       	ori	r24, 0x40	; 64
     7d8:	86 b9       	out	0x06, r24	; 6
	while((ADCSRA>>6)&0x01); //wait until conversion complete
     7da:	36 99       	sbic	0x06, 6	; 6
     7dc:	fe cf       	rjmp	.-4      	; 0x7da <read_analog+0x12>
	return (ADC);		
     7de:	84 b1       	in	r24, 0x04	; 4
     7e0:	95 b1       	in	r25, 0x05	; 5
}
     7e2:	08 95       	ret

000007e4 <writePin>:
 */ 
#include "includes.h"

/*for single bit*/
void writePin(u8 pinNo,u8 logic){
	if((pinNo>=PA0)&&(pinNo<=PA7)){
     7e4:	88 30       	cpi	r24, 0x08	; 8
     7e6:	f8 f4       	brcc	.+62     	; 0x826 <writePin+0x42>
		if(logic==HIGH)
     7e8:	61 30       	cpi	r22, 0x01	; 1
     7ea:	69 f4       	brne	.+26     	; 0x806 <writePin+0x22>
			SETBit(PORTA,(pinNo-PORTA_OFFSET));
     7ec:	4b b3       	in	r20, 0x1b	; 27
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	b9 01       	movw	r22, r18
     7f4:	02 c0       	rjmp	.+4      	; 0x7fa <writePin+0x16>
     7f6:	66 0f       	add	r22, r22
     7f8:	77 1f       	adc	r23, r23
     7fa:	8a 95       	dec	r24
     7fc:	e2 f7       	brpl	.-8      	; 0x7f6 <writePin+0x12>
     7fe:	cb 01       	movw	r24, r22
     800:	84 2b       	or	r24, r20
     802:	8b bb       	out	0x1b, r24	; 27
     804:	08 95       	ret
		else if(logic==LOW)
     806:	61 11       	cpse	r22, r1
     808:	82 c0       	rjmp	.+260    	; 0x90e <__stack+0xaf>
			CLRBit(PORTA,(pinNo-PORTA_OFFSET));
     80a:	4b b3       	in	r20, 0x1b	; 27
     80c:	21 e0       	ldi	r18, 0x01	; 1
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	b9 01       	movw	r22, r18
     812:	02 c0       	rjmp	.+4      	; 0x818 <writePin+0x34>
     814:	66 0f       	add	r22, r22
     816:	77 1f       	adc	r23, r23
     818:	8a 95       	dec	r24
     81a:	e2 f7       	brpl	.-8      	; 0x814 <writePin+0x30>
     81c:	cb 01       	movw	r24, r22
     81e:	80 95       	com	r24
     820:	84 23       	and	r24, r20
     822:	8b bb       	out	0x1b, r24	; 27
     824:	08 95       	ret
		else{}
}

	else if((pinNo>=PB0)&&(pinNo<=PB7)){
     826:	98 ef       	ldi	r25, 0xF8	; 248
     828:	98 0f       	add	r25, r24
     82a:	98 30       	cpi	r25, 0x08	; 8
     82c:	18 f5       	brcc	.+70     	; 0x874 <__stack+0x15>
		if(logic==HIGH)
     82e:	61 30       	cpi	r22, 0x01	; 1
     830:	79 f4       	brne	.+30     	; 0x850 <writePin+0x6c>
			SETBit(PORTB,(pinNo-PORTB_OFFSET));
     832:	48 b3       	in	r20, 0x18	; 24
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	08 97       	sbiw	r24, 0x08	; 8
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	b9 01       	movw	r22, r18
     83e:	02 c0       	rjmp	.+4      	; 0x844 <writePin+0x60>
     840:	66 0f       	add	r22, r22
     842:	77 1f       	adc	r23, r23
     844:	8a 95       	dec	r24
     846:	e2 f7       	brpl	.-8      	; 0x840 <writePin+0x5c>
     848:	cb 01       	movw	r24, r22
     84a:	84 2b       	or	r24, r20
     84c:	88 bb       	out	0x18, r24	; 24
     84e:	08 95       	ret
		else if(logic==LOW)
     850:	61 11       	cpse	r22, r1
     852:	5d c0       	rjmp	.+186    	; 0x90e <__stack+0xaf>
			CLRBit(PORTB,(pinNo-PORTB_OFFSET));
     854:	48 b3       	in	r20, 0x18	; 24
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	08 97       	sbiw	r24, 0x08	; 8
     85a:	21 e0       	ldi	r18, 0x01	; 1
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	b9 01       	movw	r22, r18
     860:	02 c0       	rjmp	.+4      	; 0x866 <__stack+0x7>
     862:	66 0f       	add	r22, r22
     864:	77 1f       	adc	r23, r23
     866:	8a 95       	dec	r24
     868:	e2 f7       	brpl	.-8      	; 0x862 <__stack+0x3>
     86a:	cb 01       	movw	r24, r22
     86c:	80 95       	com	r24
     86e:	84 23       	and	r24, r20
     870:	88 bb       	out	0x18, r24	; 24
     872:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PC0)&&(pinNo<=PC7)){
     874:	90 ef       	ldi	r25, 0xF0	; 240
     876:	98 0f       	add	r25, r24
     878:	98 30       	cpi	r25, 0x08	; 8
     87a:	18 f5       	brcc	.+70     	; 0x8c2 <__stack+0x63>
		if(logic==HIGH)
     87c:	61 30       	cpi	r22, 0x01	; 1
     87e:	79 f4       	brne	.+30     	; 0x89e <__stack+0x3f>
			SETBit(PORTC,(pinNo-PORTC_OFFSET));
     880:	45 b3       	in	r20, 0x15	; 21
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	40 97       	sbiw	r24, 0x10	; 16
     886:	21 e0       	ldi	r18, 0x01	; 1
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	b9 01       	movw	r22, r18
     88c:	02 c0       	rjmp	.+4      	; 0x892 <__stack+0x33>
     88e:	66 0f       	add	r22, r22
     890:	77 1f       	adc	r23, r23
     892:	8a 95       	dec	r24
     894:	e2 f7       	brpl	.-8      	; 0x88e <__stack+0x2f>
     896:	cb 01       	movw	r24, r22
     898:	84 2b       	or	r24, r20
     89a:	85 bb       	out	0x15, r24	; 21
     89c:	08 95       	ret
		else if(logic==LOW)
     89e:	61 11       	cpse	r22, r1
     8a0:	36 c0       	rjmp	.+108    	; 0x90e <__stack+0xaf>
			CLRBit(PORTC,(pinNo-PORTC_OFFSET));
     8a2:	45 b3       	in	r20, 0x15	; 21
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	40 97       	sbiw	r24, 0x10	; 16
     8a8:	21 e0       	ldi	r18, 0x01	; 1
     8aa:	30 e0       	ldi	r19, 0x00	; 0
     8ac:	b9 01       	movw	r22, r18
     8ae:	02 c0       	rjmp	.+4      	; 0x8b4 <__stack+0x55>
     8b0:	66 0f       	add	r22, r22
     8b2:	77 1f       	adc	r23, r23
     8b4:	8a 95       	dec	r24
     8b6:	e2 f7       	brpl	.-8      	; 0x8b0 <__stack+0x51>
     8b8:	cb 01       	movw	r24, r22
     8ba:	80 95       	com	r24
     8bc:	84 23       	and	r24, r20
     8be:	85 bb       	out	0x15, r24	; 21
     8c0:	08 95       	ret
		else{}
	}
	
	else if((pinNo>=PD0)&&(pinNo<=PD7)){
     8c2:	98 ee       	ldi	r25, 0xE8	; 232
     8c4:	98 0f       	add	r25, r24
     8c6:	98 30       	cpi	r25, 0x08	; 8
     8c8:	10 f5       	brcc	.+68     	; 0x90e <__stack+0xaf>
		if(logic==HIGH)
     8ca:	61 30       	cpi	r22, 0x01	; 1
     8cc:	79 f4       	brne	.+30     	; 0x8ec <__stack+0x8d>
			SETBit(PORTD,(pinNo-PORTD_OFFSET));
     8ce:	42 b3       	in	r20, 0x12	; 18
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	48 97       	sbiw	r24, 0x18	; 24
     8d4:	21 e0       	ldi	r18, 0x01	; 1
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	b9 01       	movw	r22, r18
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
     8dc:	66 0f       	add	r22, r22
     8de:	77 1f       	adc	r23, r23
     8e0:	8a 95       	dec	r24
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	cb 01       	movw	r24, r22
     8e6:	84 2b       	or	r24, r20
     8e8:	82 bb       	out	0x12, r24	; 18
     8ea:	08 95       	ret
		else if(logic==LOW)
     8ec:	61 11       	cpse	r22, r1
     8ee:	0f c0       	rjmp	.+30     	; 0x90e <__stack+0xaf>
			CLRBit(PORTD,(pinNo-PORTD_OFFSET));
     8f0:	42 b3       	in	r20, 0x12	; 18
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	48 97       	sbiw	r24, 0x18	; 24
     8f6:	21 e0       	ldi	r18, 0x01	; 1
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	b9 01       	movw	r22, r18
     8fc:	02 c0       	rjmp	.+4      	; 0x902 <__stack+0xa3>
     8fe:	66 0f       	add	r22, r22
     900:	77 1f       	adc	r23, r23
     902:	8a 95       	dec	r24
     904:	e2 f7       	brpl	.-8      	; 0x8fe <__stack+0x9f>
     906:	cb 01       	movw	r24, r22
     908:	80 95       	com	r24
     90a:	84 23       	and	r24, r20
     90c:	82 bb       	out	0x12, r24	; 18
     90e:	08 95       	ret

00000910 <pinDirection>:
		else{}
	}
	else{}
}
void pinDirection(u8 pinNo, u8 direction){
	if((pinNo >= PA0) && (pinNo <= PA7)){
     910:	88 30       	cpi	r24, 0x08	; 8
     912:	f8 f4       	brcc	.+62     	; 0x952 <pinDirection+0x42>
		if(direction == OUTPUT)
     914:	61 30       	cpi	r22, 0x01	; 1
     916:	69 f4       	brne	.+26     	; 0x932 <pinDirection+0x22>
			SETBit(DDRA,(pinNo-PORTA_OFFSET));
     918:	4a b3       	in	r20, 0x1a	; 26
     91a:	21 e0       	ldi	r18, 0x01	; 1
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	b9 01       	movw	r22, r18
     920:	02 c0       	rjmp	.+4      	; 0x926 <pinDirection+0x16>
     922:	66 0f       	add	r22, r22
     924:	77 1f       	adc	r23, r23
     926:	8a 95       	dec	r24
     928:	e2 f7       	brpl	.-8      	; 0x922 <pinDirection+0x12>
     92a:	cb 01       	movw	r24, r22
     92c:	84 2b       	or	r24, r20
     92e:	8a bb       	out	0x1a, r24	; 26
     930:	08 95       	ret
		else if(direction == INPUT)
     932:	61 11       	cpse	r22, r1
     934:	82 c0       	rjmp	.+260    	; 0xa3a <pinDirection+0x12a>
			CLRBit(DDRA,(pinNo-PORTA_OFFSET));
     936:	4a b3       	in	r20, 0x1a	; 26
     938:	21 e0       	ldi	r18, 0x01	; 1
     93a:	30 e0       	ldi	r19, 0x00	; 0
     93c:	b9 01       	movw	r22, r18
     93e:	02 c0       	rjmp	.+4      	; 0x944 <pinDirection+0x34>
     940:	66 0f       	add	r22, r22
     942:	77 1f       	adc	r23, r23
     944:	8a 95       	dec	r24
     946:	e2 f7       	brpl	.-8      	; 0x940 <pinDirection+0x30>
     948:	cb 01       	movw	r24, r22
     94a:	80 95       	com	r24
     94c:	84 23       	and	r24, r20
     94e:	8a bb       	out	0x1a, r24	; 26
     950:	08 95       	ret
		else{}
	}
	else if((pinNo >= PB0) && (pinNo <= PB7)){
     952:	98 ef       	ldi	r25, 0xF8	; 248
     954:	98 0f       	add	r25, r24
     956:	98 30       	cpi	r25, 0x08	; 8
     958:	18 f5       	brcc	.+70     	; 0x9a0 <pinDirection+0x90>
		if(direction == OUTPUT)
     95a:	61 30       	cpi	r22, 0x01	; 1
     95c:	79 f4       	brne	.+30     	; 0x97c <pinDirection+0x6c>
			SETBit(DDRB,(pinNo-PORTB_OFFSET));
     95e:	47 b3       	in	r20, 0x17	; 23
     960:	90 e0       	ldi	r25, 0x00	; 0
     962:	08 97       	sbiw	r24, 0x08	; 8
     964:	21 e0       	ldi	r18, 0x01	; 1
     966:	30 e0       	ldi	r19, 0x00	; 0
     968:	b9 01       	movw	r22, r18
     96a:	02 c0       	rjmp	.+4      	; 0x970 <pinDirection+0x60>
     96c:	66 0f       	add	r22, r22
     96e:	77 1f       	adc	r23, r23
     970:	8a 95       	dec	r24
     972:	e2 f7       	brpl	.-8      	; 0x96c <pinDirection+0x5c>
     974:	cb 01       	movw	r24, r22
     976:	84 2b       	or	r24, r20
     978:	87 bb       	out	0x17, r24	; 23
     97a:	08 95       	ret
		else if(direction == LOW)
     97c:	61 11       	cpse	r22, r1
     97e:	5d c0       	rjmp	.+186    	; 0xa3a <pinDirection+0x12a>
			CLRBit(DDRB,(pinNo-PORTB_OFFSET));
     980:	47 b3       	in	r20, 0x17	; 23
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	08 97       	sbiw	r24, 0x08	; 8
     986:	21 e0       	ldi	r18, 0x01	; 1
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	b9 01       	movw	r22, r18
     98c:	02 c0       	rjmp	.+4      	; 0x992 <pinDirection+0x82>
     98e:	66 0f       	add	r22, r22
     990:	77 1f       	adc	r23, r23
     992:	8a 95       	dec	r24
     994:	e2 f7       	brpl	.-8      	; 0x98e <pinDirection+0x7e>
     996:	cb 01       	movw	r24, r22
     998:	80 95       	com	r24
     99a:	84 23       	and	r24, r20
     99c:	87 bb       	out	0x17, r24	; 23
     99e:	08 95       	ret
		else{}
	}
	else if((pinNo >= PC0) && (pinNo <= PC7)){
     9a0:	90 ef       	ldi	r25, 0xF0	; 240
     9a2:	98 0f       	add	r25, r24
     9a4:	98 30       	cpi	r25, 0x08	; 8
     9a6:	18 f5       	brcc	.+70     	; 0x9ee <pinDirection+0xde>
		if(direction == OUTPUT)
     9a8:	61 30       	cpi	r22, 0x01	; 1
     9aa:	79 f4       	brne	.+30     	; 0x9ca <pinDirection+0xba>
			SETBit(DDRC,(pinNo-PORTC_OFFSET));
     9ac:	44 b3       	in	r20, 0x14	; 20
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	40 97       	sbiw	r24, 0x10	; 16
     9b2:	21 e0       	ldi	r18, 0x01	; 1
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	b9 01       	movw	r22, r18
     9b8:	02 c0       	rjmp	.+4      	; 0x9be <pinDirection+0xae>
     9ba:	66 0f       	add	r22, r22
     9bc:	77 1f       	adc	r23, r23
     9be:	8a 95       	dec	r24
     9c0:	e2 f7       	brpl	.-8      	; 0x9ba <pinDirection+0xaa>
     9c2:	cb 01       	movw	r24, r22
     9c4:	84 2b       	or	r24, r20
     9c6:	84 bb       	out	0x14, r24	; 20
     9c8:	08 95       	ret
		else if(direction==INPUT)
     9ca:	61 11       	cpse	r22, r1
     9cc:	36 c0       	rjmp	.+108    	; 0xa3a <pinDirection+0x12a>
			CLRBit(DDRC,(pinNo-PORTC_OFFSET));
     9ce:	44 b3       	in	r20, 0x14	; 20
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	40 97       	sbiw	r24, 0x10	; 16
     9d4:	21 e0       	ldi	r18, 0x01	; 1
     9d6:	30 e0       	ldi	r19, 0x00	; 0
     9d8:	b9 01       	movw	r22, r18
     9da:	02 c0       	rjmp	.+4      	; 0x9e0 <pinDirection+0xd0>
     9dc:	66 0f       	add	r22, r22
     9de:	77 1f       	adc	r23, r23
     9e0:	8a 95       	dec	r24
     9e2:	e2 f7       	brpl	.-8      	; 0x9dc <pinDirection+0xcc>
     9e4:	cb 01       	movw	r24, r22
     9e6:	80 95       	com	r24
     9e8:	84 23       	and	r24, r20
     9ea:	84 bb       	out	0x14, r24	; 20
     9ec:	08 95       	ret
		else{}
	}
	else if((pinNo >= PD0) && (pinNo <= PD7)){
     9ee:	98 ee       	ldi	r25, 0xE8	; 232
     9f0:	98 0f       	add	r25, r24
     9f2:	98 30       	cpi	r25, 0x08	; 8
     9f4:	10 f5       	brcc	.+68     	; 0xa3a <pinDirection+0x12a>
		if(direction == OUTPUT)
     9f6:	61 30       	cpi	r22, 0x01	; 1
     9f8:	79 f4       	brne	.+30     	; 0xa18 <pinDirection+0x108>
			SETBit(DDRD,(pinNo-PORTD_OFFSET));
     9fa:	41 b3       	in	r20, 0x11	; 17
     9fc:	90 e0       	ldi	r25, 0x00	; 0
     9fe:	48 97       	sbiw	r24, 0x18	; 24
     a00:	21 e0       	ldi	r18, 0x01	; 1
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	b9 01       	movw	r22, r18
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <pinDirection+0xfc>
     a08:	66 0f       	add	r22, r22
     a0a:	77 1f       	adc	r23, r23
     a0c:	8a 95       	dec	r24
     a0e:	e2 f7       	brpl	.-8      	; 0xa08 <pinDirection+0xf8>
     a10:	cb 01       	movw	r24, r22
     a12:	84 2b       	or	r24, r20
     a14:	81 bb       	out	0x11, r24	; 17
     a16:	08 95       	ret
		else if(direction == INPUT)
     a18:	61 11       	cpse	r22, r1
     a1a:	0f c0       	rjmp	.+30     	; 0xa3a <pinDirection+0x12a>
			CLRBit(DDRD,(pinNo-PORTD_OFFSET));
     a1c:	41 b3       	in	r20, 0x11	; 17
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	48 97       	sbiw	r24, 0x18	; 24
     a22:	21 e0       	ldi	r18, 0x01	; 1
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	b9 01       	movw	r22, r18
     a28:	02 c0       	rjmp	.+4      	; 0xa2e <pinDirection+0x11e>
     a2a:	66 0f       	add	r22, r22
     a2c:	77 1f       	adc	r23, r23
     a2e:	8a 95       	dec	r24
     a30:	e2 f7       	brpl	.-8      	; 0xa2a <pinDirection+0x11a>
     a32:	cb 01       	movw	r24, r22
     a34:	80 95       	com	r24
     a36:	84 23       	and	r24, r20
     a38:	81 bb       	out	0x11, r24	; 17
     a3a:	08 95       	ret

00000a3c <readPin>:
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
	if((pinNo>=PA0)&&(pinNo<=PA7))
     a3c:	88 30       	cpi	r24, 0x08	; 8
     a3e:	58 f4       	brcc	.+22     	; 0xa56 <readPin+0x1a>
		result=GETBit(PINA,(pinNo-PORTA_OFFSET));
     a40:	29 b3       	in	r18, 0x19	; 25
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	a9 01       	movw	r20, r18
     a46:	02 c0       	rjmp	.+4      	; 0xa4c <readPin+0x10>
     a48:	55 95       	asr	r21
     a4a:	47 95       	ror	r20
     a4c:	8a 95       	dec	r24
     a4e:	e2 f7       	brpl	.-8      	; 0xa48 <readPin+0xc>
     a50:	ca 01       	movw	r24, r20
     a52:	81 70       	andi	r24, 0x01	; 1
     a54:	08 95       	ret
	else if((pinNo>=PB0)&&(pinNo<=PB7))
     a56:	98 ef       	ldi	r25, 0xF8	; 248
     a58:	98 0f       	add	r25, r24
     a5a:	98 30       	cpi	r25, 0x08	; 8
     a5c:	70 f4       	brcc	.+28     	; 0xa7a <readPin+0x3e>
		result=GETBit(PINB,(pinNo-PORTB_OFFSET));
     a5e:	96 b3       	in	r25, 0x16	; 22
     a60:	28 2f       	mov	r18, r24
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	28 50       	subi	r18, 0x08	; 8
     a66:	31 09       	sbc	r19, r1
     a68:	89 2f       	mov	r24, r25
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	02 c0       	rjmp	.+4      	; 0xa72 <readPin+0x36>
     a6e:	95 95       	asr	r25
     a70:	87 95       	ror	r24
     a72:	2a 95       	dec	r18
     a74:	e2 f7       	brpl	.-8      	; 0xa6e <readPin+0x32>
     a76:	81 70       	andi	r24, 0x01	; 1
     a78:	08 95       	ret
	else if((pinNo>=PC0)&&(pinNo<=PC7))
     a7a:	90 ef       	ldi	r25, 0xF0	; 240
     a7c:	98 0f       	add	r25, r24
     a7e:	98 30       	cpi	r25, 0x08	; 8
     a80:	70 f4       	brcc	.+28     	; 0xa9e <readPin+0x62>
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
     a82:	93 b3       	in	r25, 0x13	; 19
     a84:	28 2f       	mov	r18, r24
     a86:	30 e0       	ldi	r19, 0x00	; 0
     a88:	20 51       	subi	r18, 0x10	; 16
     a8a:	31 09       	sbc	r19, r1
     a8c:	89 2f       	mov	r24, r25
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	02 c0       	rjmp	.+4      	; 0xa96 <readPin+0x5a>
     a92:	95 95       	asr	r25
     a94:	87 95       	ror	r24
     a96:	2a 95       	dec	r18
     a98:	e2 f7       	brpl	.-8      	; 0xa92 <readPin+0x56>
     a9a:	81 70       	andi	r24, 0x01	; 1
     a9c:	08 95       	ret
	else if((pinNo>=PD0)&&(pinNo<=PD7))
     a9e:	98 ee       	ldi	r25, 0xE8	; 232
     aa0:	98 0f       	add	r25, r24
     aa2:	98 30       	cpi	r25, 0x08	; 8
     aa4:	70 f4       	brcc	.+28     	; 0xac2 <readPin+0x86>
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
     aa6:	90 b3       	in	r25, 0x10	; 16
     aa8:	28 2f       	mov	r18, r24
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	28 51       	subi	r18, 0x18	; 24
     aae:	31 09       	sbc	r19, r1
     ab0:	89 2f       	mov	r24, r25
     ab2:	90 e0       	ldi	r25, 0x00	; 0
     ab4:	02 c0       	rjmp	.+4      	; 0xaba <readPin+0x7e>
     ab6:	95 95       	asr	r25
     ab8:	87 95       	ror	r24
     aba:	2a 95       	dec	r18
     abc:	e2 f7       	brpl	.-8      	; 0xab6 <readPin+0x7a>
     abe:	81 70       	andi	r24, 0x01	; 1
     ac0:	08 95       	ret
	}
	else{}
}

u8 readPin(u8 pinNo){
	u8 result=0;
     ac2:	80 e0       	ldi	r24, 0x00	; 0
		result=GETBit(PINC,(pinNo-PORTC_OFFSET));
	else if((pinNo>=PD0)&&(pinNo<=PD7))
		result=GETBit(PIND,(pinNo-PORTD_OFFSET));
	else{}
	return result;
}
     ac4:	08 95       	ret

00000ac6 <writePins>:
	
/*for custom number of bits*/
void writePins(volatile u8* port, u8 mask, u8 logic){
	if(logic==HIGH)
     ac6:	41 30       	cpi	r20, 0x01	; 1
     ac8:	29 f4       	brne	.+10     	; 0xad4 <writePins+0xe>
		SETBits(*port,mask);
     aca:	fc 01       	movw	r30, r24
     acc:	20 81       	ld	r18, Z
     ace:	62 2b       	or	r22, r18
     ad0:	60 83       	st	Z, r22
     ad2:	08 95       	ret
	else if(logic==LOW)
     ad4:	41 11       	cpse	r20, r1
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <writePins+0x1c>
		CLRBits(*port,mask);
     ad8:	fc 01       	movw	r30, r24
     ada:	20 81       	ld	r18, Z
     adc:	60 95       	com	r22
     ade:	62 23       	and	r22, r18
     ae0:	60 83       	st	Z, r22
     ae2:	08 95       	ret

00000ae4 <pinsDirection>:
	else{}
}
void pinsDirection(volatile u8* ddr, u8 mask, u8 direction){
	if(direction == OUTPUT)
     ae4:	41 30       	cpi	r20, 0x01	; 1
     ae6:	29 f4       	brne	.+10     	; 0xaf2 <pinsDirection+0xe>
		SETBits(*ddr,mask);
     ae8:	fc 01       	movw	r30, r24
     aea:	20 81       	ld	r18, Z
     aec:	62 2b       	or	r22, r18
     aee:	60 83       	st	Z, r22
     af0:	08 95       	ret
	else if(direction == INPUT)
     af2:	41 11       	cpse	r20, r1
     af4:	05 c0       	rjmp	.+10     	; 0xb00 <pinsDirection+0x1c>
		CLRBits(*ddr,mask);
     af6:	fc 01       	movw	r30, r24
     af8:	20 81       	ld	r18, Z
     afa:	60 95       	com	r22
     afc:	62 23       	and	r22, r18
     afe:	60 83       	st	Z, r22
     b00:	08 95       	ret

00000b02 <__vector_11>:
#include "DIO.h"
volatile static  u32 overflow=0;


ISR(TIMER0_OVF_vect)
{
     b02:	1f 92       	push	r1
     b04:	0f 92       	push	r0
     b06:	0f b6       	in	r0, 0x3f	; 63
     b08:	0f 92       	push	r0
     b0a:	11 24       	eor	r1, r1
     b0c:	8f 93       	push	r24
     b0e:	9f 93       	push	r25
     b10:	af 93       	push	r26
     b12:	bf 93       	push	r27
	overflow++;	
     b14:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <overflow>
     b18:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <overflow+0x1>
     b1c:	a0 91 a8 01 	lds	r26, 0x01A8	; 0x8001a8 <overflow+0x2>
     b20:	b0 91 a9 01 	lds	r27, 0x01A9	; 0x8001a9 <overflow+0x3>
     b24:	01 96       	adiw	r24, 0x01	; 1
     b26:	a1 1d       	adc	r26, r1
     b28:	b1 1d       	adc	r27, r1
     b2a:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <overflow>
     b2e:	90 93 a7 01 	sts	0x01A7, r25	; 0x8001a7 <overflow+0x1>
     b32:	a0 93 a8 01 	sts	0x01A8, r26	; 0x8001a8 <overflow+0x2>
     b36:	b0 93 a9 01 	sts	0x01A9, r27	; 0x8001a9 <overflow+0x3>
}
     b3a:	bf 91       	pop	r27
     b3c:	af 91       	pop	r26
     b3e:	9f 91       	pop	r25
     b40:	8f 91       	pop	r24
     b42:	0f 90       	pop	r0
     b44:	0f be       	out	0x3f, r0	; 63
     b46:	0f 90       	pop	r0
     b48:	1f 90       	pop	r1
     b4a:	18 95       	reti

00000b4c <UART_INIT>:
	}
	else{
		result = FALSE;
	}
	return result;
}
     b4c:	a0 e0       	ldi	r26, 0x00	; 0
     b4e:	b0 e0       	ldi	r27, 0x00	; 0
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	aa 1f       	adc	r26, r26
     b56:	bb 1f       	adc	r27, r27
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	aa 1f       	adc	r26, r26
     b5e:	bb 1f       	adc	r27, r27
     b60:	9c 01       	movw	r18, r24
     b62:	ad 01       	movw	r20, r26
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	44 1f       	adc	r20, r20
     b72:	55 1f       	adc	r21, r21
     b74:	60 e0       	ldi	r22, 0x00	; 0
     b76:	72 e1       	ldi	r23, 0x12	; 18
     b78:	8a e7       	ldi	r24, 0x7A	; 122
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	0e 94 ac 08 	call	0x1158	; 0x1158 <__udivmodsi4>
     b80:	21 50       	subi	r18, 0x01	; 1
     b82:	31 09       	sbc	r19, r1
     b84:	30 bd       	out	0x20, r19	; 32
     b86:	29 b9       	out	0x09, r18	; 9
     b88:	8a b1       	in	r24, 0x0a	; 10
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	8a b9       	out	0x0a, r24	; 10
     b8e:	8a b1       	in	r24, 0x0a	; 10
     b90:	80 61       	ori	r24, 0x10	; 16
     b92:	8a b9       	out	0x0a, r24	; 10
     b94:	8a b1       	in	r24, 0x0a	; 10
     b96:	80 68       	ori	r24, 0x80	; 128
     b98:	8a b9       	out	0x0a, r24	; 10
     b9a:	86 e8       	ldi	r24, 0x86	; 134
     b9c:	80 bd       	out	0x20, r24	; 32
     b9e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <GLOBAL_INT_EN>
     ba2:	08 95       	ret

00000ba4 <UART_TX>:
     ba4:	8c b9       	out	0x0c, r24	; 12
     ba6:	5d 9b       	sbis	0x0b, 5	; 11
     ba8:	fe cf       	rjmp	.-4      	; 0xba6 <UART_TX+0x2>
     baa:	08 95       	ret

00000bac <Uart_SendStr>:

void	Uart_SendStr(u8* str){
     bac:	cf 92       	push	r12
     bae:	df 92       	push	r13
     bb0:	ef 92       	push	r14
     bb2:	ff 92       	push	r15
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	ec 01       	movw	r28, r24
	u32 ind = 0;
     bba:	c1 2c       	mov	r12, r1
     bbc:	d1 2c       	mov	r13, r1
     bbe:	76 01       	movw	r14, r12
	while(str[ind] != 0){
     bc0:	07 c0       	rjmp	.+14     	; 0xbd0 <Uart_SendStr+0x24>
		UART_TX(str[ind]);
     bc2:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
		ind++;
     bc6:	8f ef       	ldi	r24, 0xFF	; 255
     bc8:	c8 1a       	sub	r12, r24
     bca:	d8 0a       	sbc	r13, r24
     bcc:	e8 0a       	sbc	r14, r24
     bce:	f8 0a       	sbc	r15, r24
	return result;
}

void	Uart_SendStr(u8* str){
	u32 ind = 0;
	while(str[ind] != 0){
     bd0:	fe 01       	movw	r30, r28
     bd2:	ec 0d       	add	r30, r12
     bd4:	fd 1d       	adc	r31, r13
     bd6:	80 81       	ld	r24, Z
     bd8:	81 11       	cpse	r24, r1
     bda:	f3 cf       	rjmp	.-26     	; 0xbc2 <Uart_SendStr+0x16>
		UART_TX(str[ind]);
		ind++;
	}
}
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	ff 90       	pop	r15
     be2:	ef 90       	pop	r14
     be4:	df 90       	pop	r13
     be6:	cf 90       	pop	r12
     be8:	08 95       	ret

00000bea <sendUTFStr>:
 */ 
#include "MQTT.h"

u16 PID = 1;
u8 proName[] = "MQTT";
void sendUTFStr(u8* str){
     bea:	cf 93       	push	r28
     bec:	df 93       	push	r29
     bee:	ec 01       	movw	r28, r24
	UART_TX(0x00); // MSB = 0 because packet len < 256
     bf0:	80 e0       	ldi	r24, 0x00	; 0
     bf2:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(strlen(str));
     bf6:	fe 01       	movw	r30, r28
     bf8:	01 90       	ld	r0, Z+
     bfa:	00 20       	and	r0, r0
     bfc:	e9 f7       	brne	.-6      	; 0xbf8 <sendUTFStr+0xe>
     bfe:	cf 01       	movw	r24, r30
     c00:	01 97       	sbiw	r24, 0x01	; 1
     c02:	8c 1b       	sub	r24, r28
     c04:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	Uart_SendStr(str);
     c08:	ce 01       	movw	r24, r28
     c0a:	0e 94 d6 05 	call	0xbac	; 0xbac <Uart_SendStr>
}
     c0e:	df 91       	pop	r29
     c10:	cf 91       	pop	r28
     c12:	08 95       	ret

00000c14 <MQTT_Connect>:
void MQTT_Connect(u8* id){
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	cf 93       	push	r28
     c1a:	df 93       	push	r29
     c1c:	8c 01       	movw	r16, r24
	u8 RL = (2 + strlen(proName)) + 1 + 1 + 2 + ( 2 + strlen(id));
     c1e:	ec e6       	ldi	r30, 0x6C	; 108
     c20:	f0 e0       	ldi	r31, 0x00	; 0
     c22:	01 90       	ld	r0, Z+
     c24:	00 20       	and	r0, r0
     c26:	e9 f7       	brne	.-6      	; 0xc22 <MQTT_Connect+0xe>
     c28:	31 97       	sbiw	r30, 0x01	; 1
     c2a:	ef 01       	movw	r28, r30
     c2c:	cc 56       	subi	r28, 0x6C	; 108
     c2e:	d0 40       	sbci	r29, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	01 90       	ld	r0, Z+
     c34:	00 20       	and	r0, r0
     c36:	e9 f7       	brne	.-6      	; 0xc32 <MQTT_Connect+0x1e>
     c38:	31 97       	sbiw	r30, 0x01	; 1
     c3a:	e8 1b       	sub	r30, r24
     c3c:	f9 0b       	sbc	r31, r25
     c3e:	ec 0f       	add	r30, r28
     c40:	c8 e0       	ldi	r28, 0x08	; 8
     c42:	ce 0f       	add	r28, r30
	UART_TX(0x10);
     c44:	80 e1       	ldi	r24, 0x10	; 16
     c46:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(RL);
     c4a:	8c 2f       	mov	r24, r28
     c4c:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	sendUTFStr(proName);
     c50:	8c e6       	ldi	r24, 0x6C	; 108
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	0e 94 f5 05 	call	0xbea	; 0xbea <sendUTFStr>
	UART_TX(0x04);
     c58:	84 e0       	ldi	r24, 0x04	; 4
     c5a:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(0x02);
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(0xFF);
     c64:	8f ef       	ldi	r24, 0xFF	; 255
     c66:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(0xFF);
     c6a:	8f ef       	ldi	r24, 0xFF	; 255
     c6c:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	sendUTFStr(id);
     c70:	c8 01       	movw	r24, r16
     c72:	0e 94 f5 05 	call	0xbea	; 0xbea <sendUTFStr>
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	1f 91       	pop	r17
     c7c:	0f 91       	pop	r16
     c7e:	08 95       	ret

00000c80 <MQTT_Publish>:
void MQTT_Publish(u8* topic, u8* msgPtr, u8 msgLen){
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	7c 01       	movw	r14, r24
     c8e:	8b 01       	movw	r16, r22
     c90:	d4 2f       	mov	r29, r20
	u8 RL = (2 + strlen(topic)) + msgLen;
     c92:	fc 01       	movw	r30, r24
     c94:	01 90       	ld	r0, Z+
     c96:	00 20       	and	r0, r0
     c98:	e9 f7       	brne	.-6      	; 0xc94 <MQTT_Publish+0x14>
     c9a:	31 97       	sbiw	r30, 0x01	; 1
     c9c:	e8 1b       	sub	r30, r24
     c9e:	f9 0b       	sbc	r31, r25
     ca0:	e4 0f       	add	r30, r20
     ca2:	c2 e0       	ldi	r28, 0x02	; 2
     ca4:	ce 0f       	add	r28, r30
	u8 ind = 0;
	UART_TX(0x30);
     ca6:	80 e3       	ldi	r24, 0x30	; 48
     ca8:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(RL);
     cac:	8c 2f       	mov	r24, r28
     cae:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	sendUTFStr(topic);
     cb2:	c7 01       	movw	r24, r14
     cb4:	0e 94 f5 05 	call	0xbea	; 0xbea <sendUTFStr>
	for (ind = 0; ind < msgLen; ind++)
     cb8:	c0 e0       	ldi	r28, 0x00	; 0
     cba:	07 c0       	rjmp	.+14     	; 0xcca <MQTT_Publish+0x4a>
	{
		UART_TX(msgPtr[ind]);
     cbc:	f8 01       	movw	r30, r16
     cbe:	ec 0f       	add	r30, r28
     cc0:	f1 1d       	adc	r31, r1
     cc2:	80 81       	ld	r24, Z
     cc4:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	u8 RL = (2 + strlen(topic)) + msgLen;
	u8 ind = 0;
	UART_TX(0x30);
	UART_TX(RL);
	sendUTFStr(topic);
	for (ind = 0; ind < msgLen; ind++)
     cc8:	cf 5f       	subi	r28, 0xFF	; 255
     cca:	cd 17       	cp	r28, r29
     ccc:	b8 f3       	brcs	.-18     	; 0xcbc <MQTT_Publish+0x3c>
	{
		UART_TX(msgPtr[ind]);
	}
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	1f 91       	pop	r17
     cd4:	0f 91       	pop	r16
     cd6:	ff 90       	pop	r15
     cd8:	ef 90       	pop	r14
     cda:	08 95       	ret

00000cdc <MQTT_Subscribe>:
void MQTT_Subscribe(u8* topic){
     cdc:	0f 93       	push	r16
     cde:	1f 93       	push	r17
     ce0:	cf 93       	push	r28
     ce2:	8c 01       	movw	r16, r24
	u8 RL = 2 + (2 + strlen(topic)) + 1;
     ce4:	fc 01       	movw	r30, r24
     ce6:	01 90       	ld	r0, Z+
     ce8:	00 20       	and	r0, r0
     cea:	e9 f7       	brne	.-6      	; 0xce6 <MQTT_Subscribe+0xa>
     cec:	31 97       	sbiw	r30, 0x01	; 1
     cee:	e8 1b       	sub	r30, r24
     cf0:	f9 0b       	sbc	r31, r25
     cf2:	c5 e0       	ldi	r28, 0x05	; 5
     cf4:	ce 0f       	add	r28, r30
	UART_TX(0x82);
     cf6:	82 e8       	ldi	r24, 0x82	; 130
     cf8:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX(RL);
     cfc:	8c 2f       	mov	r24, r28
     cfe:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	
	UART_TX((u8)(PID>>8)); // MSB
     d02:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <PID+0x1>
     d06:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	UART_TX((u8)(PID));
     d0a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <PID>
     d0e:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
	PID++;
     d12:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <PID>
     d16:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <PID+0x1>
     d1a:	01 96       	adiw	r24, 0x01	; 1
     d1c:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <PID+0x1>
     d20:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <PID>
	
	sendUTFStr(topic);	
     d24:	c8 01       	movw	r24, r16
     d26:	0e 94 f5 05 	call	0xbea	; 0xbea <sendUTFStr>
	UART_TX(0x00);
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	0e 94 d2 05 	call	0xba4	; 0xba4 <UART_TX>
     d30:	cf 91       	pop	r28
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	08 95       	ret

00000d38 <FireAlarm>:
	_delay_ms(1000);
}


void FireAlarm(void)
{
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
     d40:	2d 97       	sbiw	r28, 0x0d	; 13
     d42:	0f b6       	in	r0, 0x3f	; 63
     d44:	f8 94       	cli
     d46:	de bf       	out	0x3e, r29	; 62
     d48:	0f be       	out	0x3f, r0	; 63
     d4a:	cd bf       	out	0x3d, r28	; 61
	u8 msg[]="home on fire";
     d4c:	8d e0       	ldi	r24, 0x0D	; 13
     d4e:	e1 e9       	ldi	r30, 0x91	; 145
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	be 01       	movw	r22, r28
     d54:	6f 5f       	subi	r22, 0xFF	; 255
     d56:	7f 4f       	sbci	r23, 0xFF	; 255
     d58:	db 01       	movw	r26, r22
     d5a:	01 90       	ld	r0, Z+
     d5c:	0d 92       	st	X+, r0
     d5e:	8a 95       	dec	r24
     d60:	e1 f7       	brne	.-8      	; 0xd5a <FireAlarm+0x22>
	TGLBit(PORTD,3);
     d62:	92 b3       	in	r25, 0x12	; 18
     d64:	88 e0       	ldi	r24, 0x08	; 8
     d66:	89 27       	eor	r24, r25
     d68:	82 bb       	out	0x12, r24	; 18
	TGLBit(PORTB,7);
     d6a:	88 b3       	in	r24, 0x18	; 24
     d6c:	80 58       	subi	r24, 0x80	; 128
     d6e:	88 bb       	out	0x18, r24	; 24
	MQTT_Publish("G/fire",msg,strlen(msg));
     d70:	fb 01       	movw	r30, r22
     d72:	01 90       	ld	r0, Z+
     d74:	00 20       	and	r0, r0
     d76:	e9 f7       	brne	.-6      	; 0xd72 <FireAlarm+0x3a>
     d78:	31 97       	sbiw	r30, 0x01	; 1
     d7a:	af 01       	movw	r20, r30
     d7c:	46 1b       	sub	r20, r22
     d7e:	57 0b       	sbc	r21, r23
     d80:	8a e8       	ldi	r24, 0x8A	; 138
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	0e 94 40 06 	call	0xc80	; 0xc80 <MQTT_Publish>
     d88:	2f ef       	ldi	r18, 0xFF	; 255
     d8a:	89 e6       	ldi	r24, 0x69	; 105
     d8c:	98 e1       	ldi	r25, 0x18	; 24
     d8e:	21 50       	subi	r18, 0x01	; 1
     d90:	80 40       	sbci	r24, 0x00	; 0
     d92:	90 40       	sbci	r25, 0x00	; 0
     d94:	e1 f7       	brne	.-8      	; 0xd8e <FireAlarm+0x56>
     d96:	00 c0       	rjmp	.+0      	; 0xd98 <FireAlarm+0x60>
     d98:	00 00       	nop
	_delay_ms(1000);	
}
     d9a:	2d 96       	adiw	r28, 0x0d	; 13
     d9c:	0f b6       	in	r0, 0x3f	; 63
     d9e:	f8 94       	cli
     da0:	de bf       	out	0x3e, r29	; 62
     da2:	0f be       	out	0x3f, r0	; 63
     da4:	cd bf       	out	0x3d, r28	; 61
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	08 95       	ret

00000dac <turnOnFireAlarm>:
static u8 flag=0;


void turnOnFireAlarm(void)
{
	Callback(FireAlarm);
     dac:	8c e9       	ldi	r24, 0x9C	; 156
     dae:	96 e0       	ldi	r25, 0x06	; 6
     db0:	0e 94 a8 03 	call	0x750	; 0x750 <Callback>
     db4:	08 95       	ret

00000db6 <Project_Init>:
}

void Project_Init(void)
{
	KEYPAD_Init();
     db6:	0e 94 47 02 	call	0x48e	; 0x48e <KEYPAD_Init>
	LCD_init();
     dba:	0e 94 ed 02 	call	0x5da	; 0x5da <LCD_init>
	ADC_init();
     dbe:	0e 94 dd 03 	call	0x7ba	; 0x7ba <ADC_init>
	INT_init(INT_0,any_level);
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	86 e0       	ldi	r24, 0x06	; 6
     dc6:	0e 94 ad 03 	call	0x75a	; 0x75a <INT_init>
	
	pinDirection(DOOR_LED,OUTPUT);
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	84 e1       	ldi	r24, 0x14	; 20
     dce:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(BUZZER,OUTPUT);
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	8f e0       	ldi	r24, 0x0F	; 15
     dd6:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(SOIL_PUMP,OUTPUT);
     dda:	61 e0       	ldi	r22, 0x01	; 1
     ddc:	8c e1       	ldi	r24, 0x1C	; 28
     dde:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(OUTERLIGHT,OUTPUT);
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	8d e1       	ldi	r24, 0x1D	; 29
     de6:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(FIREPUMP,OUTPUT);
     dea:	61 e0       	ldi	r22, 0x01	; 1
     dec:	8b e1       	ldi	r24, 0x1B	; 27
     dee:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(TV_PIN,OUTPUT);
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	8f e1       	ldi	r24, 0x1F	; 31
     df6:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(FAN,OUTPUT);
     dfa:	61 e0       	ldi	r22, 0x01	; 1
     dfc:	83 e1       	ldi	r24, 0x13	; 19
     dfe:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	pinDirection(INNERLIGHT,OUTPUT);
     e02:	61 e0       	ldi	r22, 0x01	; 1
     e04:	8e e1       	ldi	r24, 0x1E	; 30
     e06:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
	
	pinDirection(FLAME_SENSOR,INPUT);
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	8a e1       	ldi	r24, 0x1A	; 26
     e0e:	0e 94 88 04 	call	0x910	; 0x910 <pinDirection>
     e12:	08 95       	ret

00000e14 <Check_Password>:
	Check_Password(password);
	}
}

void Check_Password(u8* password)
{
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	ec 01       	movw	r28, r24
	
	if (strcmp(oldpassword,password)==0)
     e1a:	bc 01       	movw	r22, r24
     e1c:	83 e7       	ldi	r24, 0x73	; 115
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 ee 08 	call	0x11dc	; 0x11dc <strcmp>
     e24:	89 2b       	or	r24, r25
     e26:	f9 f4       	brne	.+62     	; 0xe66 <Check_Password+0x52>
	{
		LCD_CLEAR();
     e28:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_CLEAR>
		writePin(DOOR_LED,HIGH);//open door
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	84 e1       	ldi	r24, 0x14	; 20
     e30:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		disp_strXY(2,1,"Pass accepted");
     e34:	4e e9       	ldi	r20, 0x9E	; 158
     e36:	50 e0       	ldi	r21, 0x00	; 0
     e38:	61 e0       	ldi	r22, 0x01	; 1
     e3a:	82 e0       	ldi	r24, 0x02	; 2
     e3c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
     e40:	2f ef       	ldi	r18, 0xFF	; 255
     e42:	8d e3       	ldi	r24, 0x3D	; 61
     e44:	99 e4       	ldi	r25, 0x49	; 73
     e46:	21 50       	subi	r18, 0x01	; 1
     e48:	80 40       	sbci	r24, 0x00	; 0
     e4a:	90 40       	sbci	r25, 0x00	; 0
     e4c:	e1 f7       	brne	.-8      	; 0xe46 <Check_Password+0x32>
     e4e:	00 c0       	rjmp	.+0      	; 0xe50 <Check_Password+0x3c>
     e50:	00 00       	nop
		_delay_ms(3000);
		writePin(DOOR_LED,LOW);//close door
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	84 e1       	ldi	r24, 0x14	; 20
     e56:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		trials=0;
     e5a:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <trials>
		flag=1;
     e5e:	81 e0       	ldi	r24, 0x01	; 1
     e60:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <flag>
		return;
     e64:	41 c0       	rjmp	.+130    	; 0xee8 <Check_Password+0xd4>
	}
	disp_intXY(2,1,trials);
     e66:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <trials>
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	40 e0       	ldi	r20, 0x00	; 0
     e6e:	50 e0       	ldi	r21, 0x00	; 0
     e70:	61 e0       	ldi	r22, 0x01	; 1
     e72:	82 e0       	ldi	r24, 0x02	; 2
     e74:	0e 94 97 03 	call	0x72e	; 0x72e <disp_intXY>
	if (trials>=2)
     e78:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <trials>
     e7c:	82 30       	cpi	r24, 0x02	; 2
     e7e:	a0 f0       	brcs	.+40     	; 0xea8 <Check_Password+0x94>
	{
		writePin(BUZZER,HIGH); // 	turn on alarm
     e80:	61 e0       	ldi	r22, 0x01	; 1
     e82:	8f e0       	ldi	r24, 0x0F	; 15
     e84:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
     e88:	2f ef       	ldi	r18, 0xFF	; 255
     e8a:	8d e3       	ldi	r24, 0x3D	; 61
     e8c:	99 e4       	ldi	r25, 0x49	; 73
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	80 40       	sbci	r24, 0x00	; 0
     e92:	90 40       	sbci	r25, 0x00	; 0
     e94:	e1 f7       	brne	.-8      	; 0xe8e <Check_Password+0x7a>
     e96:	00 c0       	rjmp	.+0      	; 0xe98 <Check_Password+0x84>
     e98:	00 00       	nop
		_delay_ms(3000);
		writePin(BUZZER,LOW);// 	turn off alarm
     e9a:	60 e0       	ldi	r22, 0x00	; 0
     e9c:	8f e0       	ldi	r24, 0x0F	; 15
     e9e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		trials=0;
     ea2:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <trials>
		return;
     ea6:	20 c0       	rjmp	.+64     	; 0xee8 <Check_Password+0xd4>
	}
	LCD_CLEAR();
     ea8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_CLEAR>
	disp_strXY(2,1,"Wrong Pass");
     eac:	4c ea       	ldi	r20, 0xAC	; 172
     eae:	50 e0       	ldi	r21, 0x00	; 0
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	82 e0       	ldi	r24, 0x02	; 2
     eb4:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
     eb8:	2f ef       	ldi	r18, 0xFF	; 255
     eba:	84 e3       	ldi	r24, 0x34	; 52
     ebc:	9c e0       	ldi	r25, 0x0C	; 12
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	80 40       	sbci	r24, 0x00	; 0
     ec2:	90 40       	sbci	r25, 0x00	; 0
     ec4:	e1 f7       	brne	.-8      	; 0xebe <Check_Password+0xaa>
     ec6:	00 c0       	rjmp	.+0      	; 0xec8 <Check_Password+0xb4>
     ec8:	00 00       	nop
	_delay_ms(500);
	trials++;
     eca:	20 91 ab 01 	lds	r18, 0x01AB	; 0x8001ab <trials>
     ece:	2f 5f       	subi	r18, 0xFF	; 255
     ed0:	20 93 ab 01 	sts	0x01AB, r18	; 0x8001ab <trials>
	disp_intXY(2,6,trials);
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	40 e0       	ldi	r20, 0x00	; 0
     ed8:	50 e0       	ldi	r21, 0x00	; 0
     eda:	66 e0       	ldi	r22, 0x06	; 6
     edc:	82 e0       	ldi	r24, 0x02	; 2
     ede:	0e 94 97 03 	call	0x72e	; 0x72e <disp_intXY>
	Get_Password(password);	
     ee2:	ce 01       	movw	r24, r28
     ee4:	0e 94 77 07 	call	0xeee	; 0xeee <Get_Password>
}
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	08 95       	ret

00000eee <Get_Password>:
	pinDirection(FLAME_SENSOR,INPUT);
}


void Get_Password(u8* password)
{
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	cf 93       	push	r28
     ef4:	8c 01       	movw	r16, r24
	
	while(flag!=1)
     ef6:	1d c0       	rjmp	.+58     	; 0xf32 <Get_Password+0x44>
	{
	LCD_CLEAR();
     ef8:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_CLEAR>
	disp_strXY(2,1,"Enter password :");
     efc:	47 eb       	ldi	r20, 0xB7	; 183
     efe:	50 e0       	ldi	r21, 0x00	; 0
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	82 e0       	ldi	r24, 0x02	; 2
     f04:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	u8 keyPressed=0, counter=0;
     f08:	c0 e0       	ldi	r28, 0x00	; 0
	while (counter<4)
     f0a:	0e c0       	rjmp	.+28     	; 0xf28 <Get_Password+0x3a>
	{
		keyPressed=GetKey();
     f0c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <GetKey>
		
		if (keyPressed!=0)
     f10:	88 23       	and	r24, r24
     f12:	51 f0       	breq	.+20     	; 0xf28 <Get_Password+0x3a>
		{
			password[counter]=keyPressed;
     f14:	f8 01       	movw	r30, r16
     f16:	ec 0f       	add	r30, r28
     f18:	f1 1d       	adc	r31, r1
     f1a:	80 83       	st	Z, r24
			disp_charXY(3,counter+1,keyPressed);
     f1c:	cf 5f       	subi	r28, 0xFF	; 255
     f1e:	48 2f       	mov	r20, r24
     f20:	6c 2f       	mov	r22, r28
     f22:	83 e0       	ldi	r24, 0x03	; 3
     f24:	0e 94 50 03 	call	0x6a0	; 0x6a0 <disp_charXY>
	while(flag!=1)
	{
	LCD_CLEAR();
	disp_strXY(2,1,"Enter password :");
	u8 keyPressed=0, counter=0;
	while (counter<4)
     f28:	c4 30       	cpi	r28, 0x04	; 4
     f2a:	80 f3       	brcs	.-32     	; 0xf0c <Get_Password+0x1e>
			disp_charXY(3,counter+1,keyPressed);
			keyPressed=0;
			counter++;
		}
	}
	Check_Password(password);
     f2c:	c8 01       	movw	r24, r16
     f2e:	0e 94 0a 07 	call	0xe14	; 0xe14 <Check_Password>


void Get_Password(u8* password)
{
	
	while(flag!=1)
     f32:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <flag>
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	f9 f6       	brne	.-66     	; 0xef8 <Get_Password+0xa>
			counter++;
		}
	}
	Check_Password(password);
	}
}
     f3a:	cf 91       	pop	r28
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	08 95       	ret

00000f42 <temp>:
// 	 	_delay_ms(1000);
// 	
}

void temp(void)
{
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	0f 93       	push	r16
     f48:	1f 93       	push	r17
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	cd b7       	in	r28, 0x3d	; 61
     f50:	de b7       	in	r29, 0x3e	; 62
     f52:	c8 57       	subi	r28, 0x78	; 120
     f54:	d1 09       	sbc	r29, r1
     f56:	0f b6       	in	r0, 0x3f	; 63
     f58:	f8 94       	cli
     f5a:	de bf       	out	0x3e, r29	; 62
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	cd bf       	out	0x3d, r28	; 61
	u8 temp[60];
	u8 hum[60];
	disp_strXY(3,1,"Humid=     %RH");
     f60:	48 ec       	ldi	r20, 0xC8	; 200
     f62:	50 e0       	ldi	r21, 0x00	; 0
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	disp_strXY(4,1,"temp=      Deg.c");
     f6c:	47 ed       	ldi	r20, 0xD7	; 215
     f6e:	50 e0       	ldi	r21, 0x00	; 0
     f70:	61 e0       	ldi	r22, 0x01	; 1
     f72:	84 e0       	ldi	r24, 0x04	; 4
     f74:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	DHT_Represent(hum,temp);
     f78:	8e 01       	movw	r16, r28
     f7a:	03 5c       	subi	r16, 0xC3	; 195
     f7c:	1f 4f       	sbci	r17, 0xFF	; 255
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	7c 01       	movw	r14, r24
     f84:	bc 01       	movw	r22, r24
     f86:	c8 01       	movw	r24, r16
     f88:	0e 94 17 02 	call	0x42e	; 0x42e <DHT_Represent>
	disp_strXY(3,7,hum);
     f8c:	a8 01       	movw	r20, r16
     f8e:	67 e0       	ldi	r22, 0x07	; 7
     f90:	83 e0       	ldi	r24, 0x03	; 3
     f92:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	disp_strXY(4,6,temp);
     f96:	a7 01       	movw	r20, r14
     f98:	66 e0       	ldi	r22, 0x06	; 6
     f9a:	84 e0       	ldi	r24, 0x04	; 4
     f9c:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	
	MQTT_Publish("G/DHT",temp,strlen(temp));
     fa0:	f7 01       	movw	r30, r14
     fa2:	01 90       	ld	r0, Z+
     fa4:	00 20       	and	r0, r0
     fa6:	e9 f7       	brne	.-6      	; 0xfa2 <temp+0x60>
     fa8:	31 97       	sbiw	r30, 0x01	; 1
     faa:	af 01       	movw	r20, r30
     fac:	4e 19       	sub	r20, r14
     fae:	5f 09       	sbc	r21, r15
     fb0:	b7 01       	movw	r22, r14
     fb2:	88 ee       	ldi	r24, 0xE8	; 232
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	0e 94 40 06 	call	0xc80	; 0xc80 <MQTT_Publish>
     fba:	9f ef       	ldi	r25, 0xFF	; 255
     fbc:	29 e6       	ldi	r18, 0x69	; 105
     fbe:	88 e1       	ldi	r24, 0x18	; 24
     fc0:	91 50       	subi	r25, 0x01	; 1
     fc2:	20 40       	sbci	r18, 0x00	; 0
     fc4:	80 40       	sbci	r24, 0x00	; 0
     fc6:	e1 f7       	brne	.-8      	; 0xfc0 <temp+0x7e>
     fc8:	00 c0       	rjmp	.+0      	; 0xfca <temp+0x88>
     fca:	00 00       	nop
	_delay_ms(1000);
	MQTT_Publish("G/hum",hum,strlen(hum));
     fcc:	f8 01       	movw	r30, r16
     fce:	01 90       	ld	r0, Z+
     fd0:	00 20       	and	r0, r0
     fd2:	e9 f7       	brne	.-6      	; 0xfce <temp+0x8c>
     fd4:	31 97       	sbiw	r30, 0x01	; 1
     fd6:	af 01       	movw	r20, r30
     fd8:	40 1b       	sub	r20, r16
     fda:	51 0b       	sbc	r21, r17
     fdc:	b8 01       	movw	r22, r16
     fde:	8e ee       	ldi	r24, 0xEE	; 238
     fe0:	90 e0       	ldi	r25, 0x00	; 0
     fe2:	0e 94 40 06 	call	0xc80	; 0xc80 <MQTT_Publish>
     fe6:	9f ef       	ldi	r25, 0xFF	; 255
     fe8:	29 e6       	ldi	r18, 0x69	; 105
     fea:	88 e1       	ldi	r24, 0x18	; 24
     fec:	91 50       	subi	r25, 0x01	; 1
     fee:	20 40       	sbci	r18, 0x00	; 0
     ff0:	80 40       	sbci	r24, 0x00	; 0
     ff2:	e1 f7       	brne	.-8      	; 0xfec <temp+0xaa>
     ff4:	00 c0       	rjmp	.+0      	; 0xff6 <temp+0xb4>
     ff6:	00 00       	nop
	_delay_ms(1000);
}
     ff8:	c8 58       	subi	r28, 0x88	; 136
     ffa:	df 4f       	sbci	r29, 0xFF	; 255
     ffc:	0f b6       	in	r0, 0x3f	; 63
     ffe:	f8 94       	cli
    1000:	de bf       	out	0x3e, r29	; 62
    1002:	0f be       	out	0x3f, r0	; 63
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	df 91       	pop	r29
    1008:	cf 91       	pop	r28
    100a:	1f 91       	pop	r17
    100c:	0f 91       	pop	r16
    100e:	ff 90       	pop	r15
    1010:	ef 90       	pop	r14
    1012:	08 95       	ret

00001014 <AnalogSensors>:
	disp_intXY(2,6,trials);
	Get_Password(password);	
}

void AnalogSensors(void)
{
    1014:	cf 92       	push	r12
    1016:	df 92       	push	r13
    1018:	ef 92       	push	r14
    101a:	ff 92       	push	r15
    101c:	0f 93       	push	r16
    101e:	1f 93       	push	r17
    1020:	cf 93       	push	r28
    1022:	df 93       	push	r29
	u8 tempstr[4]={0};
	LCD_CLEAR();
    1024:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <LCD_CLEAR>
	u16 LDR=0;
	u16 soil=0;
	soil=read_analog(SOILSENSOR);
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <read_analog>
    1030:	ec 01       	movw	r28, r24
	LDR=read_analog(LDRSENSOR);
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	90 e0       	ldi	r25, 0x00	; 0
    1036:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <read_analog>
    103a:	8c 01       	movw	r16, r24
	soil=(100-(soil*100UL)/1019UL);
    103c:	9e 01       	movw	r18, r28
    103e:	a4 e6       	ldi	r26, 0x64	; 100
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__umulhisi3>
    1046:	2b ef       	ldi	r18, 0xFB	; 251
    1048:	33 e0       	ldi	r19, 0x03	; 3
    104a:	40 e0       	ldi	r20, 0x00	; 0
    104c:	50 e0       	ldi	r21, 0x00	; 0
    104e:	0e 94 ac 08 	call	0x1158	; 0x1158 <__udivmodsi4>
    1052:	c4 e6       	ldi	r28, 0x64	; 100
    1054:	d0 e0       	ldi	r29, 0x00	; 0
    1056:	c2 1b       	sub	r28, r18
    1058:	d3 0b       	sbc	r29, r19
	LDR=((LDR*100UL)/407UL);
    105a:	98 01       	movw	r18, r16
    105c:	a4 e6       	ldi	r26, 0x64	; 100
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <__umulhisi3>
    1064:	27 e9       	ldi	r18, 0x97	; 151
    1066:	31 e0       	ldi	r19, 0x01	; 1
    1068:	40 e0       	ldi	r20, 0x00	; 0
    106a:	50 e0       	ldi	r21, 0x00	; 0
    106c:	0e 94 ac 08 	call	0x1158	; 0x1158 <__udivmodsi4>
    1070:	69 01       	movw	r12, r18
    1072:	7a 01       	movw	r14, r20
    1074:	89 01       	movw	r16, r18
	disp_strXY(1,1,"soil water=");
    1076:	44 ef       	ldi	r20, 0xF4	; 244
    1078:	50 e0       	ldi	r21, 0x00	; 0
    107a:	61 e0       	ldi	r22, 0x01	; 1
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	disp_int(soil);
    1082:	be 01       	movw	r22, r28
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 64 03 	call	0x6c8	; 0x6c8 <disp_int>
	disp_char('%');
    108c:	85 e2       	ldi	r24, 0x25	; 37
    108e:	0e 94 1e 03 	call	0x63c	; 0x63c <disp_char>
	disp_strXY(2,1,"Light = ");
    1092:	40 e0       	ldi	r20, 0x00	; 0
    1094:	51 e0       	ldi	r21, 0x01	; 1
    1096:	61 e0       	ldi	r22, 0x01	; 1
    1098:	82 e0       	ldi	r24, 0x02	; 2
    109a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <disp_strXY>
	disp_int(LDR);
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	88 27       	eor	r24, r24
    10a4:	99 27       	eor	r25, r25
    10a6:	0e 94 64 03 	call	0x6c8	; 0x6c8 <disp_int>
	disp_char('%');
    10aa:	85 e2       	ldi	r24, 0x25	; 37
    10ac:	0e 94 1e 03 	call	0x63c	; 0x63c <disp_char>
	//controlling planets irrigation 
	if (soil<=30)//turn on pump
    10b0:	6f 97       	sbiw	r28, 0x1f	; 31
    10b2:	28 f4       	brcc	.+10     	; 0x10be <AnalogSensors+0xaa>
	{
		writePin(SOIL_PUMP,HIGH);
    10b4:	61 e0       	ldi	r22, 0x01	; 1
    10b6:	8c e1       	ldi	r24, 0x1C	; 28
    10b8:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <AnalogSensors+0xb2>
	}
	else
	{
		writePin(SOIL_PUMP,LOW);
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	8c e1       	ldi	r24, 0x1C	; 28
    10c2:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
	}
	//controlling outer lights
	if (LDR<30)//turn on lights
    10c6:	0e 31       	cpi	r16, 0x1E	; 30
    10c8:	11 05       	cpc	r17, r1
    10ca:	28 f4       	brcc	.+10     	; 0x10d6 <AnalogSensors+0xc2>
	{
		writePin(OUTERLIGHT,HIGH);
    10cc:	61 e0       	ldi	r22, 0x01	; 1
    10ce:	8d e1       	ldi	r24, 0x1D	; 29
    10d0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <AnalogSensors+0xca>
	}
	else
	{
		writePin(OUTERLIGHT,LOW);
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	8d e1       	ldi	r24, 0x1D	; 29
    10da:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
	}
	 	
	temp();
    10de:	0e 94 a1 07 	call	0xf42	; 0xf42 <temp>
// 		itoa(LDR,tempstr,10);
// 	 	MQTT_Publish("G/light",tempstr,strlen(tempstr));
// 	 	_delay_ms(1000);
// 	
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	1f 91       	pop	r17
    10e8:	0f 91       	pop	r16
    10ea:	ff 90       	pop	r15
    10ec:	ef 90       	pop	r14
    10ee:	df 90       	pop	r13
    10f0:	cf 90       	pop	r12
    10f2:	08 95       	ret

000010f4 <IOTcharinput>:
	_delay_ms(1000);	
}

void IOTcharinput(u8 data)
{
	switch(data)
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	fc 01       	movw	r30, r24
    10f8:	f0 97       	sbiw	r30, 0x30	; 48
    10fa:	e8 30       	cpi	r30, 0x08	; 8
    10fc:	f1 05       	cpc	r31, r1
    10fe:	58 f5       	brcc	.+86     	; 0x1156 <IOTcharinput+0x62>
    1100:	e6 5d       	subi	r30, 0xD6	; 214
    1102:	ff 4f       	sbci	r31, 0xFF	; 255
    1104:	0c 94 ce 08 	jmp	0x119c	; 0x119c <__tablejump2__>
	{
		case '0':
		writePin(TV_PIN,LOW);
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	8f e1       	ldi	r24, 0x1F	; 31
    110c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    1110:	08 95       	ret
		case '1':
		writePin(TV_PIN,HIGH);
    1112:	61 e0       	ldi	r22, 0x01	; 1
    1114:	8f e1       	ldi	r24, 0x1F	; 31
    1116:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    111a:	08 95       	ret
		case '2':
		writePin(INNERLIGHT,HIGH);
    111c:	61 e0       	ldi	r22, 0x01	; 1
    111e:	8e e1       	ldi	r24, 0x1E	; 30
    1120:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    1124:	08 95       	ret
		case '3':
		writePin(INNERLIGHT,LOW);
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	8e e1       	ldi	r24, 0x1E	; 30
    112a:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    112e:	08 95       	ret
		case '4':
		writePin(FAN,HIGH);
    1130:	61 e0       	ldi	r22, 0x01	; 1
    1132:	83 e1       	ldi	r24, 0x13	; 19
    1134:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    1138:	08 95       	ret
		case '5':
		writePin(FAN,LOW);
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	83 e1       	ldi	r24, 0x13	; 19
    113e:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    1142:	08 95       	ret
		case '6':
		writePin(OUTERLIGHT,HIGH);
    1144:	61 e0       	ldi	r22, 0x01	; 1
    1146:	8d e1       	ldi	r24, 0x1D	; 29
    1148:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
		break;
    114c:	08 95       	ret
		case '7':
		writePin(OUTERLIGHT,LOW);
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	8d e1       	ldi	r24, 0x1D	; 29
    1152:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <writePin>
    1156:	08 95       	ret

00001158 <__udivmodsi4>:
    1158:	a1 e2       	ldi	r26, 0x21	; 33
    115a:	1a 2e       	mov	r1, r26
    115c:	aa 1b       	sub	r26, r26
    115e:	bb 1b       	sub	r27, r27
    1160:	fd 01       	movw	r30, r26
    1162:	0d c0       	rjmp	.+26     	; 0x117e <__udivmodsi4_ep>

00001164 <__udivmodsi4_loop>:
    1164:	aa 1f       	adc	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	ee 1f       	adc	r30, r30
    116a:	ff 1f       	adc	r31, r31
    116c:	a2 17       	cp	r26, r18
    116e:	b3 07       	cpc	r27, r19
    1170:	e4 07       	cpc	r30, r20
    1172:	f5 07       	cpc	r31, r21
    1174:	20 f0       	brcs	.+8      	; 0x117e <__udivmodsi4_ep>
    1176:	a2 1b       	sub	r26, r18
    1178:	b3 0b       	sbc	r27, r19
    117a:	e4 0b       	sbc	r30, r20
    117c:	f5 0b       	sbc	r31, r21

0000117e <__udivmodsi4_ep>:
    117e:	66 1f       	adc	r22, r22
    1180:	77 1f       	adc	r23, r23
    1182:	88 1f       	adc	r24, r24
    1184:	99 1f       	adc	r25, r25
    1186:	1a 94       	dec	r1
    1188:	69 f7       	brne	.-38     	; 0x1164 <__udivmodsi4_loop>
    118a:	60 95       	com	r22
    118c:	70 95       	com	r23
    118e:	80 95       	com	r24
    1190:	90 95       	com	r25
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24
    1196:	bd 01       	movw	r22, r26
    1198:	cf 01       	movw	r24, r30
    119a:	08 95       	ret

0000119c <__tablejump2__>:
    119c:	ee 0f       	add	r30, r30
    119e:	ff 1f       	adc	r31, r31
    11a0:	05 90       	lpm	r0, Z+
    11a2:	f4 91       	lpm	r31, Z
    11a4:	e0 2d       	mov	r30, r0
    11a6:	09 94       	ijmp

000011a8 <__umulhisi3>:
    11a8:	a2 9f       	mul	r26, r18
    11aa:	b0 01       	movw	r22, r0
    11ac:	b3 9f       	mul	r27, r19
    11ae:	c0 01       	movw	r24, r0
    11b0:	a3 9f       	mul	r26, r19
    11b2:	70 0d       	add	r23, r0
    11b4:	81 1d       	adc	r24, r1
    11b6:	11 24       	eor	r1, r1
    11b8:	91 1d       	adc	r25, r1
    11ba:	b2 9f       	mul	r27, r18
    11bc:	70 0d       	add	r23, r0
    11be:	81 1d       	adc	r24, r1
    11c0:	11 24       	eor	r1, r1
    11c2:	91 1d       	adc	r25, r1
    11c4:	08 95       	ret

000011c6 <strcat>:
    11c6:	fb 01       	movw	r30, r22
    11c8:	dc 01       	movw	r26, r24
    11ca:	0d 90       	ld	r0, X+
    11cc:	00 20       	and	r0, r0
    11ce:	e9 f7       	brne	.-6      	; 0x11ca <strcat+0x4>
    11d0:	11 97       	sbiw	r26, 0x01	; 1
    11d2:	01 90       	ld	r0, Z+
    11d4:	0d 92       	st	X+, r0
    11d6:	00 20       	and	r0, r0
    11d8:	e1 f7       	brne	.-8      	; 0x11d2 <strcat+0xc>
    11da:	08 95       	ret

000011dc <strcmp>:
    11dc:	fb 01       	movw	r30, r22
    11de:	dc 01       	movw	r26, r24
    11e0:	8d 91       	ld	r24, X+
    11e2:	01 90       	ld	r0, Z+
    11e4:	80 19       	sub	r24, r0
    11e6:	01 10       	cpse	r0, r1
    11e8:	d9 f3       	breq	.-10     	; 0x11e0 <strcmp+0x4>
    11ea:	99 0b       	sbc	r25, r25
    11ec:	08 95       	ret

000011ee <sprintf>:
    11ee:	ae e0       	ldi	r26, 0x0E	; 14
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	ed ef       	ldi	r30, 0xFD	; 253
    11f4:	f8 e0       	ldi	r31, 0x08	; 8
    11f6:	0c 94 b8 0b 	jmp	0x1770	; 0x1770 <__prologue_saves__+0x1c>
    11fa:	0d 89       	ldd	r16, Y+21	; 0x15
    11fc:	1e 89       	ldd	r17, Y+22	; 0x16
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	8c 83       	std	Y+4, r24	; 0x04
    1202:	1a 83       	std	Y+2, r17	; 0x02
    1204:	09 83       	std	Y+1, r16	; 0x01
    1206:	8f ef       	ldi	r24, 0xFF	; 255
    1208:	9f e7       	ldi	r25, 0x7F	; 127
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
    120e:	ae 01       	movw	r20, r28
    1210:	47 5e       	subi	r20, 0xE7	; 231
    1212:	5f 4f       	sbci	r21, 0xFF	; 255
    1214:	6f 89       	ldd	r22, Y+23	; 0x17
    1216:	78 8d       	ldd	r23, Y+24	; 0x18
    1218:	ce 01       	movw	r24, r28
    121a:	01 96       	adiw	r24, 0x01	; 1
    121c:	0e 94 19 09 	call	0x1232	; 0x1232 <vfprintf>
    1220:	ef 81       	ldd	r30, Y+7	; 0x07
    1222:	f8 85       	ldd	r31, Y+8	; 0x08
    1224:	e0 0f       	add	r30, r16
    1226:	f1 1f       	adc	r31, r17
    1228:	10 82       	st	Z, r1
    122a:	2e 96       	adiw	r28, 0x0e	; 14
    122c:	e4 e0       	ldi	r30, 0x04	; 4
    122e:	0c 94 d4 0b 	jmp	0x17a8	; 0x17a8 <__epilogue_restores__+0x1c>

00001232 <vfprintf>:
    1232:	ab e0       	ldi	r26, 0x0B	; 11
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	ef e1       	ldi	r30, 0x1F	; 31
    1238:	f9 e0       	ldi	r31, 0x09	; 9
    123a:	0c 94 aa 0b 	jmp	0x1754	; 0x1754 <__prologue_saves__>
    123e:	6c 01       	movw	r12, r24
    1240:	7b 01       	movw	r14, r22
    1242:	8a 01       	movw	r16, r20
    1244:	fc 01       	movw	r30, r24
    1246:	17 82       	std	Z+7, r1	; 0x07
    1248:	16 82       	std	Z+6, r1	; 0x06
    124a:	83 81       	ldd	r24, Z+3	; 0x03
    124c:	81 ff       	sbrs	r24, 1
    124e:	cc c1       	rjmp	.+920    	; 0x15e8 <vfprintf+0x3b6>
    1250:	ce 01       	movw	r24, r28
    1252:	01 96       	adiw	r24, 0x01	; 1
    1254:	3c 01       	movw	r6, r24
    1256:	f6 01       	movw	r30, r12
    1258:	93 81       	ldd	r25, Z+3	; 0x03
    125a:	f7 01       	movw	r30, r14
    125c:	93 fd       	sbrc	r25, 3
    125e:	85 91       	lpm	r24, Z+
    1260:	93 ff       	sbrs	r25, 3
    1262:	81 91       	ld	r24, Z+
    1264:	7f 01       	movw	r14, r30
    1266:	88 23       	and	r24, r24
    1268:	09 f4       	brne	.+2      	; 0x126c <vfprintf+0x3a>
    126a:	ba c1       	rjmp	.+884    	; 0x15e0 <vfprintf+0x3ae>
    126c:	85 32       	cpi	r24, 0x25	; 37
    126e:	39 f4       	brne	.+14     	; 0x127e <vfprintf+0x4c>
    1270:	93 fd       	sbrc	r25, 3
    1272:	85 91       	lpm	r24, Z+
    1274:	93 ff       	sbrs	r25, 3
    1276:	81 91       	ld	r24, Z+
    1278:	7f 01       	movw	r14, r30
    127a:	85 32       	cpi	r24, 0x25	; 37
    127c:	29 f4       	brne	.+10     	; 0x1288 <vfprintf+0x56>
    127e:	b6 01       	movw	r22, r12
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    1286:	e7 cf       	rjmp	.-50     	; 0x1256 <vfprintf+0x24>
    1288:	91 2c       	mov	r9, r1
    128a:	21 2c       	mov	r2, r1
    128c:	31 2c       	mov	r3, r1
    128e:	ff e1       	ldi	r31, 0x1F	; 31
    1290:	f3 15       	cp	r31, r3
    1292:	d8 f0       	brcs	.+54     	; 0x12ca <vfprintf+0x98>
    1294:	8b 32       	cpi	r24, 0x2B	; 43
    1296:	79 f0       	breq	.+30     	; 0x12b6 <vfprintf+0x84>
    1298:	38 f4       	brcc	.+14     	; 0x12a8 <vfprintf+0x76>
    129a:	80 32       	cpi	r24, 0x20	; 32
    129c:	79 f0       	breq	.+30     	; 0x12bc <vfprintf+0x8a>
    129e:	83 32       	cpi	r24, 0x23	; 35
    12a0:	a1 f4       	brne	.+40     	; 0x12ca <vfprintf+0x98>
    12a2:	23 2d       	mov	r18, r3
    12a4:	20 61       	ori	r18, 0x10	; 16
    12a6:	1d c0       	rjmp	.+58     	; 0x12e2 <vfprintf+0xb0>
    12a8:	8d 32       	cpi	r24, 0x2D	; 45
    12aa:	61 f0       	breq	.+24     	; 0x12c4 <vfprintf+0x92>
    12ac:	80 33       	cpi	r24, 0x30	; 48
    12ae:	69 f4       	brne	.+26     	; 0x12ca <vfprintf+0x98>
    12b0:	23 2d       	mov	r18, r3
    12b2:	21 60       	ori	r18, 0x01	; 1
    12b4:	16 c0       	rjmp	.+44     	; 0x12e2 <vfprintf+0xb0>
    12b6:	83 2d       	mov	r24, r3
    12b8:	82 60       	ori	r24, 0x02	; 2
    12ba:	38 2e       	mov	r3, r24
    12bc:	e3 2d       	mov	r30, r3
    12be:	e4 60       	ori	r30, 0x04	; 4
    12c0:	3e 2e       	mov	r3, r30
    12c2:	2a c0       	rjmp	.+84     	; 0x1318 <vfprintf+0xe6>
    12c4:	f3 2d       	mov	r31, r3
    12c6:	f8 60       	ori	r31, 0x08	; 8
    12c8:	1d c0       	rjmp	.+58     	; 0x1304 <vfprintf+0xd2>
    12ca:	37 fc       	sbrc	r3, 7
    12cc:	2d c0       	rjmp	.+90     	; 0x1328 <vfprintf+0xf6>
    12ce:	20 ed       	ldi	r18, 0xD0	; 208
    12d0:	28 0f       	add	r18, r24
    12d2:	2a 30       	cpi	r18, 0x0A	; 10
    12d4:	40 f0       	brcs	.+16     	; 0x12e6 <vfprintf+0xb4>
    12d6:	8e 32       	cpi	r24, 0x2E	; 46
    12d8:	b9 f4       	brne	.+46     	; 0x1308 <vfprintf+0xd6>
    12da:	36 fc       	sbrc	r3, 6
    12dc:	81 c1       	rjmp	.+770    	; 0x15e0 <vfprintf+0x3ae>
    12de:	23 2d       	mov	r18, r3
    12e0:	20 64       	ori	r18, 0x40	; 64
    12e2:	32 2e       	mov	r3, r18
    12e4:	19 c0       	rjmp	.+50     	; 0x1318 <vfprintf+0xe6>
    12e6:	36 fe       	sbrs	r3, 6
    12e8:	06 c0       	rjmp	.+12     	; 0x12f6 <vfprintf+0xc4>
    12ea:	8a e0       	ldi	r24, 0x0A	; 10
    12ec:	98 9e       	mul	r9, r24
    12ee:	20 0d       	add	r18, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	92 2e       	mov	r9, r18
    12f4:	11 c0       	rjmp	.+34     	; 0x1318 <vfprintf+0xe6>
    12f6:	ea e0       	ldi	r30, 0x0A	; 10
    12f8:	2e 9e       	mul	r2, r30
    12fa:	20 0d       	add	r18, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	22 2e       	mov	r2, r18
    1300:	f3 2d       	mov	r31, r3
    1302:	f0 62       	ori	r31, 0x20	; 32
    1304:	3f 2e       	mov	r3, r31
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <vfprintf+0xe6>
    1308:	8c 36       	cpi	r24, 0x6C	; 108
    130a:	21 f4       	brne	.+8      	; 0x1314 <vfprintf+0xe2>
    130c:	83 2d       	mov	r24, r3
    130e:	80 68       	ori	r24, 0x80	; 128
    1310:	38 2e       	mov	r3, r24
    1312:	02 c0       	rjmp	.+4      	; 0x1318 <vfprintf+0xe6>
    1314:	88 36       	cpi	r24, 0x68	; 104
    1316:	41 f4       	brne	.+16     	; 0x1328 <vfprintf+0xf6>
    1318:	f7 01       	movw	r30, r14
    131a:	93 fd       	sbrc	r25, 3
    131c:	85 91       	lpm	r24, Z+
    131e:	93 ff       	sbrs	r25, 3
    1320:	81 91       	ld	r24, Z+
    1322:	7f 01       	movw	r14, r30
    1324:	81 11       	cpse	r24, r1
    1326:	b3 cf       	rjmp	.-154    	; 0x128e <vfprintf+0x5c>
    1328:	98 2f       	mov	r25, r24
    132a:	9f 7d       	andi	r25, 0xDF	; 223
    132c:	95 54       	subi	r25, 0x45	; 69
    132e:	93 30       	cpi	r25, 0x03	; 3
    1330:	28 f4       	brcc	.+10     	; 0x133c <vfprintf+0x10a>
    1332:	0c 5f       	subi	r16, 0xFC	; 252
    1334:	1f 4f       	sbci	r17, 0xFF	; 255
    1336:	9f e3       	ldi	r25, 0x3F	; 63
    1338:	99 83       	std	Y+1, r25	; 0x01
    133a:	0d c0       	rjmp	.+26     	; 0x1356 <vfprintf+0x124>
    133c:	83 36       	cpi	r24, 0x63	; 99
    133e:	31 f0       	breq	.+12     	; 0x134c <vfprintf+0x11a>
    1340:	83 37       	cpi	r24, 0x73	; 115
    1342:	71 f0       	breq	.+28     	; 0x1360 <vfprintf+0x12e>
    1344:	83 35       	cpi	r24, 0x53	; 83
    1346:	09 f0       	breq	.+2      	; 0x134a <vfprintf+0x118>
    1348:	59 c0       	rjmp	.+178    	; 0x13fc <vfprintf+0x1ca>
    134a:	21 c0       	rjmp	.+66     	; 0x138e <vfprintf+0x15c>
    134c:	f8 01       	movw	r30, r16
    134e:	80 81       	ld	r24, Z
    1350:	89 83       	std	Y+1, r24	; 0x01
    1352:	0e 5f       	subi	r16, 0xFE	; 254
    1354:	1f 4f       	sbci	r17, 0xFF	; 255
    1356:	88 24       	eor	r8, r8
    1358:	83 94       	inc	r8
    135a:	91 2c       	mov	r9, r1
    135c:	53 01       	movw	r10, r6
    135e:	13 c0       	rjmp	.+38     	; 0x1386 <vfprintf+0x154>
    1360:	28 01       	movw	r4, r16
    1362:	f2 e0       	ldi	r31, 0x02	; 2
    1364:	4f 0e       	add	r4, r31
    1366:	51 1c       	adc	r5, r1
    1368:	f8 01       	movw	r30, r16
    136a:	a0 80       	ld	r10, Z
    136c:	b1 80       	ldd	r11, Z+1	; 0x01
    136e:	36 fe       	sbrs	r3, 6
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <vfprintf+0x146>
    1372:	69 2d       	mov	r22, r9
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x14a>
    1378:	6f ef       	ldi	r22, 0xFF	; 255
    137a:	7f ef       	ldi	r23, 0xFF	; 255
    137c:	c5 01       	movw	r24, r10
    137e:	0e 94 05 0b 	call	0x160a	; 0x160a <strnlen>
    1382:	4c 01       	movw	r8, r24
    1384:	82 01       	movw	r16, r4
    1386:	f3 2d       	mov	r31, r3
    1388:	ff 77       	andi	r31, 0x7F	; 127
    138a:	3f 2e       	mov	r3, r31
    138c:	16 c0       	rjmp	.+44     	; 0x13ba <vfprintf+0x188>
    138e:	28 01       	movw	r4, r16
    1390:	22 e0       	ldi	r18, 0x02	; 2
    1392:	42 0e       	add	r4, r18
    1394:	51 1c       	adc	r5, r1
    1396:	f8 01       	movw	r30, r16
    1398:	a0 80       	ld	r10, Z
    139a:	b1 80       	ldd	r11, Z+1	; 0x01
    139c:	36 fe       	sbrs	r3, 6
    139e:	03 c0       	rjmp	.+6      	; 0x13a6 <vfprintf+0x174>
    13a0:	69 2d       	mov	r22, r9
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	02 c0       	rjmp	.+4      	; 0x13aa <vfprintf+0x178>
    13a6:	6f ef       	ldi	r22, 0xFF	; 255
    13a8:	7f ef       	ldi	r23, 0xFF	; 255
    13aa:	c5 01       	movw	r24, r10
    13ac:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <strnlen_P>
    13b0:	4c 01       	movw	r8, r24
    13b2:	f3 2d       	mov	r31, r3
    13b4:	f0 68       	ori	r31, 0x80	; 128
    13b6:	3f 2e       	mov	r3, r31
    13b8:	82 01       	movw	r16, r4
    13ba:	33 fc       	sbrc	r3, 3
    13bc:	1b c0       	rjmp	.+54     	; 0x13f4 <vfprintf+0x1c2>
    13be:	82 2d       	mov	r24, r2
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	88 16       	cp	r8, r24
    13c4:	99 06       	cpc	r9, r25
    13c6:	b0 f4       	brcc	.+44     	; 0x13f4 <vfprintf+0x1c2>
    13c8:	b6 01       	movw	r22, r12
    13ca:	80 e2       	ldi	r24, 0x20	; 32
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    13d2:	2a 94       	dec	r2
    13d4:	f4 cf       	rjmp	.-24     	; 0x13be <vfprintf+0x18c>
    13d6:	f5 01       	movw	r30, r10
    13d8:	37 fc       	sbrc	r3, 7
    13da:	85 91       	lpm	r24, Z+
    13dc:	37 fe       	sbrs	r3, 7
    13de:	81 91       	ld	r24, Z+
    13e0:	5f 01       	movw	r10, r30
    13e2:	b6 01       	movw	r22, r12
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    13ea:	21 10       	cpse	r2, r1
    13ec:	2a 94       	dec	r2
    13ee:	21 e0       	ldi	r18, 0x01	; 1
    13f0:	82 1a       	sub	r8, r18
    13f2:	91 08       	sbc	r9, r1
    13f4:	81 14       	cp	r8, r1
    13f6:	91 04       	cpc	r9, r1
    13f8:	71 f7       	brne	.-36     	; 0x13d6 <vfprintf+0x1a4>
    13fa:	e8 c0       	rjmp	.+464    	; 0x15cc <vfprintf+0x39a>
    13fc:	84 36       	cpi	r24, 0x64	; 100
    13fe:	11 f0       	breq	.+4      	; 0x1404 <vfprintf+0x1d2>
    1400:	89 36       	cpi	r24, 0x69	; 105
    1402:	41 f5       	brne	.+80     	; 0x1454 <vfprintf+0x222>
    1404:	f8 01       	movw	r30, r16
    1406:	37 fe       	sbrs	r3, 7
    1408:	07 c0       	rjmp	.+14     	; 0x1418 <vfprintf+0x1e6>
    140a:	60 81       	ld	r22, Z
    140c:	71 81       	ldd	r23, Z+1	; 0x01
    140e:	82 81       	ldd	r24, Z+2	; 0x02
    1410:	93 81       	ldd	r25, Z+3	; 0x03
    1412:	0c 5f       	subi	r16, 0xFC	; 252
    1414:	1f 4f       	sbci	r17, 0xFF	; 255
    1416:	08 c0       	rjmp	.+16     	; 0x1428 <vfprintf+0x1f6>
    1418:	60 81       	ld	r22, Z
    141a:	71 81       	ldd	r23, Z+1	; 0x01
    141c:	07 2e       	mov	r0, r23
    141e:	00 0c       	add	r0, r0
    1420:	88 0b       	sbc	r24, r24
    1422:	99 0b       	sbc	r25, r25
    1424:	0e 5f       	subi	r16, 0xFE	; 254
    1426:	1f 4f       	sbci	r17, 0xFF	; 255
    1428:	f3 2d       	mov	r31, r3
    142a:	ff 76       	andi	r31, 0x6F	; 111
    142c:	3f 2e       	mov	r3, r31
    142e:	97 ff       	sbrs	r25, 7
    1430:	09 c0       	rjmp	.+18     	; 0x1444 <vfprintf+0x212>
    1432:	90 95       	com	r25
    1434:	80 95       	com	r24
    1436:	70 95       	com	r23
    1438:	61 95       	neg	r22
    143a:	7f 4f       	sbci	r23, 0xFF	; 255
    143c:	8f 4f       	sbci	r24, 0xFF	; 255
    143e:	9f 4f       	sbci	r25, 0xFF	; 255
    1440:	f0 68       	ori	r31, 0x80	; 128
    1442:	3f 2e       	mov	r3, r31
    1444:	2a e0       	ldi	r18, 0x0A	; 10
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	a3 01       	movw	r20, r6
    144a:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__ultoa_invert>
    144e:	88 2e       	mov	r8, r24
    1450:	86 18       	sub	r8, r6
    1452:	45 c0       	rjmp	.+138    	; 0x14de <vfprintf+0x2ac>
    1454:	85 37       	cpi	r24, 0x75	; 117
    1456:	31 f4       	brne	.+12     	; 0x1464 <vfprintf+0x232>
    1458:	23 2d       	mov	r18, r3
    145a:	2f 7e       	andi	r18, 0xEF	; 239
    145c:	b2 2e       	mov	r11, r18
    145e:	2a e0       	ldi	r18, 0x0A	; 10
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	25 c0       	rjmp	.+74     	; 0x14ae <vfprintf+0x27c>
    1464:	93 2d       	mov	r25, r3
    1466:	99 7f       	andi	r25, 0xF9	; 249
    1468:	b9 2e       	mov	r11, r25
    146a:	8f 36       	cpi	r24, 0x6F	; 111
    146c:	c1 f0       	breq	.+48     	; 0x149e <vfprintf+0x26c>
    146e:	18 f4       	brcc	.+6      	; 0x1476 <vfprintf+0x244>
    1470:	88 35       	cpi	r24, 0x58	; 88
    1472:	79 f0       	breq	.+30     	; 0x1492 <vfprintf+0x260>
    1474:	b5 c0       	rjmp	.+362    	; 0x15e0 <vfprintf+0x3ae>
    1476:	80 37       	cpi	r24, 0x70	; 112
    1478:	19 f0       	breq	.+6      	; 0x1480 <vfprintf+0x24e>
    147a:	88 37       	cpi	r24, 0x78	; 120
    147c:	21 f0       	breq	.+8      	; 0x1486 <vfprintf+0x254>
    147e:	b0 c0       	rjmp	.+352    	; 0x15e0 <vfprintf+0x3ae>
    1480:	e9 2f       	mov	r30, r25
    1482:	e0 61       	ori	r30, 0x10	; 16
    1484:	be 2e       	mov	r11, r30
    1486:	b4 fe       	sbrs	r11, 4
    1488:	0d c0       	rjmp	.+26     	; 0x14a4 <vfprintf+0x272>
    148a:	fb 2d       	mov	r31, r11
    148c:	f4 60       	ori	r31, 0x04	; 4
    148e:	bf 2e       	mov	r11, r31
    1490:	09 c0       	rjmp	.+18     	; 0x14a4 <vfprintf+0x272>
    1492:	34 fe       	sbrs	r3, 4
    1494:	0a c0       	rjmp	.+20     	; 0x14aa <vfprintf+0x278>
    1496:	29 2f       	mov	r18, r25
    1498:	26 60       	ori	r18, 0x06	; 6
    149a:	b2 2e       	mov	r11, r18
    149c:	06 c0       	rjmp	.+12     	; 0x14aa <vfprintf+0x278>
    149e:	28 e0       	ldi	r18, 0x08	; 8
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <vfprintf+0x27c>
    14a4:	20 e1       	ldi	r18, 0x10	; 16
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	02 c0       	rjmp	.+4      	; 0x14ae <vfprintf+0x27c>
    14aa:	20 e1       	ldi	r18, 0x10	; 16
    14ac:	32 e0       	ldi	r19, 0x02	; 2
    14ae:	f8 01       	movw	r30, r16
    14b0:	b7 fe       	sbrs	r11, 7
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <vfprintf+0x290>
    14b4:	60 81       	ld	r22, Z
    14b6:	71 81       	ldd	r23, Z+1	; 0x01
    14b8:	82 81       	ldd	r24, Z+2	; 0x02
    14ba:	93 81       	ldd	r25, Z+3	; 0x03
    14bc:	0c 5f       	subi	r16, 0xFC	; 252
    14be:	1f 4f       	sbci	r17, 0xFF	; 255
    14c0:	06 c0       	rjmp	.+12     	; 0x14ce <vfprintf+0x29c>
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 5f       	subi	r16, 0xFE	; 254
    14cc:	1f 4f       	sbci	r17, 0xFF	; 255
    14ce:	a3 01       	movw	r20, r6
    14d0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <__ultoa_invert>
    14d4:	88 2e       	mov	r8, r24
    14d6:	86 18       	sub	r8, r6
    14d8:	fb 2d       	mov	r31, r11
    14da:	ff 77       	andi	r31, 0x7F	; 127
    14dc:	3f 2e       	mov	r3, r31
    14de:	36 fe       	sbrs	r3, 6
    14e0:	0d c0       	rjmp	.+26     	; 0x14fc <vfprintf+0x2ca>
    14e2:	23 2d       	mov	r18, r3
    14e4:	2e 7f       	andi	r18, 0xFE	; 254
    14e6:	a2 2e       	mov	r10, r18
    14e8:	89 14       	cp	r8, r9
    14ea:	58 f4       	brcc	.+22     	; 0x1502 <vfprintf+0x2d0>
    14ec:	34 fe       	sbrs	r3, 4
    14ee:	0b c0       	rjmp	.+22     	; 0x1506 <vfprintf+0x2d4>
    14f0:	32 fc       	sbrc	r3, 2
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <vfprintf+0x2d4>
    14f4:	83 2d       	mov	r24, r3
    14f6:	8e 7e       	andi	r24, 0xEE	; 238
    14f8:	a8 2e       	mov	r10, r24
    14fa:	05 c0       	rjmp	.+10     	; 0x1506 <vfprintf+0x2d4>
    14fc:	b8 2c       	mov	r11, r8
    14fe:	a3 2c       	mov	r10, r3
    1500:	03 c0       	rjmp	.+6      	; 0x1508 <vfprintf+0x2d6>
    1502:	b8 2c       	mov	r11, r8
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <vfprintf+0x2d6>
    1506:	b9 2c       	mov	r11, r9
    1508:	a4 fe       	sbrs	r10, 4
    150a:	0f c0       	rjmp	.+30     	; 0x152a <vfprintf+0x2f8>
    150c:	fe 01       	movw	r30, r28
    150e:	e8 0d       	add	r30, r8
    1510:	f1 1d       	adc	r31, r1
    1512:	80 81       	ld	r24, Z
    1514:	80 33       	cpi	r24, 0x30	; 48
    1516:	21 f4       	brne	.+8      	; 0x1520 <vfprintf+0x2ee>
    1518:	9a 2d       	mov	r25, r10
    151a:	99 7e       	andi	r25, 0xE9	; 233
    151c:	a9 2e       	mov	r10, r25
    151e:	09 c0       	rjmp	.+18     	; 0x1532 <vfprintf+0x300>
    1520:	a2 fe       	sbrs	r10, 2
    1522:	06 c0       	rjmp	.+12     	; 0x1530 <vfprintf+0x2fe>
    1524:	b3 94       	inc	r11
    1526:	b3 94       	inc	r11
    1528:	04 c0       	rjmp	.+8      	; 0x1532 <vfprintf+0x300>
    152a:	8a 2d       	mov	r24, r10
    152c:	86 78       	andi	r24, 0x86	; 134
    152e:	09 f0       	breq	.+2      	; 0x1532 <vfprintf+0x300>
    1530:	b3 94       	inc	r11
    1532:	a3 fc       	sbrc	r10, 3
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <vfprintf+0x326>
    1536:	a0 fe       	sbrs	r10, 0
    1538:	06 c0       	rjmp	.+12     	; 0x1546 <vfprintf+0x314>
    153a:	b2 14       	cp	r11, r2
    153c:	88 f4       	brcc	.+34     	; 0x1560 <vfprintf+0x32e>
    153e:	28 0c       	add	r2, r8
    1540:	92 2c       	mov	r9, r2
    1542:	9b 18       	sub	r9, r11
    1544:	0e c0       	rjmp	.+28     	; 0x1562 <vfprintf+0x330>
    1546:	b2 14       	cp	r11, r2
    1548:	60 f4       	brcc	.+24     	; 0x1562 <vfprintf+0x330>
    154a:	b6 01       	movw	r22, r12
    154c:	80 e2       	ldi	r24, 0x20	; 32
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    1554:	b3 94       	inc	r11
    1556:	f7 cf       	rjmp	.-18     	; 0x1546 <vfprintf+0x314>
    1558:	b2 14       	cp	r11, r2
    155a:	18 f4       	brcc	.+6      	; 0x1562 <vfprintf+0x330>
    155c:	2b 18       	sub	r2, r11
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <vfprintf+0x332>
    1560:	98 2c       	mov	r9, r8
    1562:	21 2c       	mov	r2, r1
    1564:	a4 fe       	sbrs	r10, 4
    1566:	10 c0       	rjmp	.+32     	; 0x1588 <vfprintf+0x356>
    1568:	b6 01       	movw	r22, r12
    156a:	80 e3       	ldi	r24, 0x30	; 48
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    1572:	a2 fe       	sbrs	r10, 2
    1574:	17 c0       	rjmp	.+46     	; 0x15a4 <vfprintf+0x372>
    1576:	a1 fc       	sbrc	r10, 1
    1578:	03 c0       	rjmp	.+6      	; 0x1580 <vfprintf+0x34e>
    157a:	88 e7       	ldi	r24, 0x78	; 120
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <vfprintf+0x352>
    1580:	88 e5       	ldi	r24, 0x58	; 88
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	b6 01       	movw	r22, r12
    1586:	0c c0       	rjmp	.+24     	; 0x15a0 <vfprintf+0x36e>
    1588:	8a 2d       	mov	r24, r10
    158a:	86 78       	andi	r24, 0x86	; 134
    158c:	59 f0       	breq	.+22     	; 0x15a4 <vfprintf+0x372>
    158e:	a1 fe       	sbrs	r10, 1
    1590:	02 c0       	rjmp	.+4      	; 0x1596 <vfprintf+0x364>
    1592:	8b e2       	ldi	r24, 0x2B	; 43
    1594:	01 c0       	rjmp	.+2      	; 0x1598 <vfprintf+0x366>
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	a7 fc       	sbrc	r10, 7
    159a:	8d e2       	ldi	r24, 0x2D	; 45
    159c:	b6 01       	movw	r22, r12
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15a4:	89 14       	cp	r8, r9
    15a6:	38 f4       	brcc	.+14     	; 0x15b6 <vfprintf+0x384>
    15a8:	b6 01       	movw	r22, r12
    15aa:	80 e3       	ldi	r24, 0x30	; 48
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15b2:	9a 94       	dec	r9
    15b4:	f7 cf       	rjmp	.-18     	; 0x15a4 <vfprintf+0x372>
    15b6:	8a 94       	dec	r8
    15b8:	f3 01       	movw	r30, r6
    15ba:	e8 0d       	add	r30, r8
    15bc:	f1 1d       	adc	r31, r1
    15be:	80 81       	ld	r24, Z
    15c0:	b6 01       	movw	r22, r12
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15c8:	81 10       	cpse	r8, r1
    15ca:	f5 cf       	rjmp	.-22     	; 0x15b6 <vfprintf+0x384>
    15cc:	22 20       	and	r2, r2
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <vfprintf+0x3a0>
    15d0:	42 ce       	rjmp	.-892    	; 0x1256 <vfprintf+0x24>
    15d2:	b6 01       	movw	r22, r12
    15d4:	80 e2       	ldi	r24, 0x20	; 32
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	0e 94 10 0b 	call	0x1620	; 0x1620 <fputc>
    15dc:	2a 94       	dec	r2
    15de:	f6 cf       	rjmp	.-20     	; 0x15cc <vfprintf+0x39a>
    15e0:	f6 01       	movw	r30, r12
    15e2:	86 81       	ldd	r24, Z+6	; 0x06
    15e4:	97 81       	ldd	r25, Z+7	; 0x07
    15e6:	02 c0       	rjmp	.+4      	; 0x15ec <vfprintf+0x3ba>
    15e8:	8f ef       	ldi	r24, 0xFF	; 255
    15ea:	9f ef       	ldi	r25, 0xFF	; 255
    15ec:	2b 96       	adiw	r28, 0x0b	; 11
    15ee:	e2 e1       	ldi	r30, 0x12	; 18
    15f0:	0c 94 c6 0b 	jmp	0x178c	; 0x178c <__epilogue_restores__>

000015f4 <strnlen_P>:
    15f4:	fc 01       	movw	r30, r24
    15f6:	05 90       	lpm	r0, Z+
    15f8:	61 50       	subi	r22, 0x01	; 1
    15fa:	70 40       	sbci	r23, 0x00	; 0
    15fc:	01 10       	cpse	r0, r1
    15fe:	d8 f7       	brcc	.-10     	; 0x15f6 <strnlen_P+0x2>
    1600:	80 95       	com	r24
    1602:	90 95       	com	r25
    1604:	8e 0f       	add	r24, r30
    1606:	9f 1f       	adc	r25, r31
    1608:	08 95       	ret

0000160a <strnlen>:
    160a:	fc 01       	movw	r30, r24
    160c:	61 50       	subi	r22, 0x01	; 1
    160e:	70 40       	sbci	r23, 0x00	; 0
    1610:	01 90       	ld	r0, Z+
    1612:	01 10       	cpse	r0, r1
    1614:	d8 f7       	brcc	.-10     	; 0x160c <strnlen+0x2>
    1616:	80 95       	com	r24
    1618:	90 95       	com	r25
    161a:	8e 0f       	add	r24, r30
    161c:	9f 1f       	adc	r25, r31
    161e:	08 95       	ret

00001620 <fputc>:
    1620:	0f 93       	push	r16
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	fb 01       	movw	r30, r22
    162a:	23 81       	ldd	r18, Z+3	; 0x03
    162c:	21 fd       	sbrc	r18, 1
    162e:	03 c0       	rjmp	.+6      	; 0x1636 <fputc+0x16>
    1630:	8f ef       	ldi	r24, 0xFF	; 255
    1632:	9f ef       	ldi	r25, 0xFF	; 255
    1634:	2c c0       	rjmp	.+88     	; 0x168e <fputc+0x6e>
    1636:	22 ff       	sbrs	r18, 2
    1638:	16 c0       	rjmp	.+44     	; 0x1666 <fputc+0x46>
    163a:	46 81       	ldd	r20, Z+6	; 0x06
    163c:	57 81       	ldd	r21, Z+7	; 0x07
    163e:	24 81       	ldd	r18, Z+4	; 0x04
    1640:	35 81       	ldd	r19, Z+5	; 0x05
    1642:	42 17       	cp	r20, r18
    1644:	53 07       	cpc	r21, r19
    1646:	44 f4       	brge	.+16     	; 0x1658 <fputc+0x38>
    1648:	a0 81       	ld	r26, Z
    164a:	b1 81       	ldd	r27, Z+1	; 0x01
    164c:	9d 01       	movw	r18, r26
    164e:	2f 5f       	subi	r18, 0xFF	; 255
    1650:	3f 4f       	sbci	r19, 0xFF	; 255
    1652:	31 83       	std	Z+1, r19	; 0x01
    1654:	20 83       	st	Z, r18
    1656:	8c 93       	st	X, r24
    1658:	26 81       	ldd	r18, Z+6	; 0x06
    165a:	37 81       	ldd	r19, Z+7	; 0x07
    165c:	2f 5f       	subi	r18, 0xFF	; 255
    165e:	3f 4f       	sbci	r19, 0xFF	; 255
    1660:	37 83       	std	Z+7, r19	; 0x07
    1662:	26 83       	std	Z+6, r18	; 0x06
    1664:	14 c0       	rjmp	.+40     	; 0x168e <fputc+0x6e>
    1666:	8b 01       	movw	r16, r22
    1668:	ec 01       	movw	r28, r24
    166a:	fb 01       	movw	r30, r22
    166c:	00 84       	ldd	r0, Z+8	; 0x08
    166e:	f1 85       	ldd	r31, Z+9	; 0x09
    1670:	e0 2d       	mov	r30, r0
    1672:	09 95       	icall
    1674:	89 2b       	or	r24, r25
    1676:	e1 f6       	brne	.-72     	; 0x1630 <fputc+0x10>
    1678:	d8 01       	movw	r26, r16
    167a:	16 96       	adiw	r26, 0x06	; 6
    167c:	8d 91       	ld	r24, X+
    167e:	9c 91       	ld	r25, X
    1680:	17 97       	sbiw	r26, 0x07	; 7
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	17 96       	adiw	r26, 0x07	; 7
    1686:	9c 93       	st	X, r25
    1688:	8e 93       	st	-X, r24
    168a:	16 97       	sbiw	r26, 0x06	; 6
    168c:	ce 01       	movw	r24, r28
    168e:	df 91       	pop	r29
    1690:	cf 91       	pop	r28
    1692:	1f 91       	pop	r17
    1694:	0f 91       	pop	r16
    1696:	08 95       	ret

00001698 <__ultoa_invert>:
    1698:	fa 01       	movw	r30, r20
    169a:	aa 27       	eor	r26, r26
    169c:	28 30       	cpi	r18, 0x08	; 8
    169e:	51 f1       	breq	.+84     	; 0x16f4 <__ultoa_invert+0x5c>
    16a0:	20 31       	cpi	r18, 0x10	; 16
    16a2:	81 f1       	breq	.+96     	; 0x1704 <__ultoa_invert+0x6c>
    16a4:	e8 94       	clt
    16a6:	6f 93       	push	r22
    16a8:	6e 7f       	andi	r22, 0xFE	; 254
    16aa:	6e 5f       	subi	r22, 0xFE	; 254
    16ac:	7f 4f       	sbci	r23, 0xFF	; 255
    16ae:	8f 4f       	sbci	r24, 0xFF	; 255
    16b0:	9f 4f       	sbci	r25, 0xFF	; 255
    16b2:	af 4f       	sbci	r26, 0xFF	; 255
    16b4:	b1 e0       	ldi	r27, 0x01	; 1
    16b6:	3e d0       	rcall	.+124    	; 0x1734 <__ultoa_invert+0x9c>
    16b8:	b4 e0       	ldi	r27, 0x04	; 4
    16ba:	3c d0       	rcall	.+120    	; 0x1734 <__ultoa_invert+0x9c>
    16bc:	67 0f       	add	r22, r23
    16be:	78 1f       	adc	r23, r24
    16c0:	89 1f       	adc	r24, r25
    16c2:	9a 1f       	adc	r25, r26
    16c4:	a1 1d       	adc	r26, r1
    16c6:	68 0f       	add	r22, r24
    16c8:	79 1f       	adc	r23, r25
    16ca:	8a 1f       	adc	r24, r26
    16cc:	91 1d       	adc	r25, r1
    16ce:	a1 1d       	adc	r26, r1
    16d0:	6a 0f       	add	r22, r26
    16d2:	71 1d       	adc	r23, r1
    16d4:	81 1d       	adc	r24, r1
    16d6:	91 1d       	adc	r25, r1
    16d8:	a1 1d       	adc	r26, r1
    16da:	20 d0       	rcall	.+64     	; 0x171c <__ultoa_invert+0x84>
    16dc:	09 f4       	brne	.+2      	; 0x16e0 <__ultoa_invert+0x48>
    16de:	68 94       	set
    16e0:	3f 91       	pop	r19
    16e2:	2a e0       	ldi	r18, 0x0A	; 10
    16e4:	26 9f       	mul	r18, r22
    16e6:	11 24       	eor	r1, r1
    16e8:	30 19       	sub	r19, r0
    16ea:	30 5d       	subi	r19, 0xD0	; 208
    16ec:	31 93       	st	Z+, r19
    16ee:	de f6       	brtc	.-74     	; 0x16a6 <__ultoa_invert+0xe>
    16f0:	cf 01       	movw	r24, r30
    16f2:	08 95       	ret
    16f4:	46 2f       	mov	r20, r22
    16f6:	47 70       	andi	r20, 0x07	; 7
    16f8:	40 5d       	subi	r20, 0xD0	; 208
    16fa:	41 93       	st	Z+, r20
    16fc:	b3 e0       	ldi	r27, 0x03	; 3
    16fe:	0f d0       	rcall	.+30     	; 0x171e <__ultoa_invert+0x86>
    1700:	c9 f7       	brne	.-14     	; 0x16f4 <__ultoa_invert+0x5c>
    1702:	f6 cf       	rjmp	.-20     	; 0x16f0 <__ultoa_invert+0x58>
    1704:	46 2f       	mov	r20, r22
    1706:	4f 70       	andi	r20, 0x0F	; 15
    1708:	40 5d       	subi	r20, 0xD0	; 208
    170a:	4a 33       	cpi	r20, 0x3A	; 58
    170c:	18 f0       	brcs	.+6      	; 0x1714 <__ultoa_invert+0x7c>
    170e:	49 5d       	subi	r20, 0xD9	; 217
    1710:	31 fd       	sbrc	r19, 1
    1712:	40 52       	subi	r20, 0x20	; 32
    1714:	41 93       	st	Z+, r20
    1716:	02 d0       	rcall	.+4      	; 0x171c <__ultoa_invert+0x84>
    1718:	a9 f7       	brne	.-22     	; 0x1704 <__ultoa_invert+0x6c>
    171a:	ea cf       	rjmp	.-44     	; 0x16f0 <__ultoa_invert+0x58>
    171c:	b4 e0       	ldi	r27, 0x04	; 4
    171e:	a6 95       	lsr	r26
    1720:	97 95       	ror	r25
    1722:	87 95       	ror	r24
    1724:	77 95       	ror	r23
    1726:	67 95       	ror	r22
    1728:	ba 95       	dec	r27
    172a:	c9 f7       	brne	.-14     	; 0x171e <__ultoa_invert+0x86>
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	61 05       	cpc	r22, r1
    1730:	71 05       	cpc	r23, r1
    1732:	08 95       	ret
    1734:	9b 01       	movw	r18, r22
    1736:	ac 01       	movw	r20, r24
    1738:	0a 2e       	mov	r0, r26
    173a:	06 94       	lsr	r0
    173c:	57 95       	ror	r21
    173e:	47 95       	ror	r20
    1740:	37 95       	ror	r19
    1742:	27 95       	ror	r18
    1744:	ba 95       	dec	r27
    1746:	c9 f7       	brne	.-14     	; 0x173a <__ultoa_invert+0xa2>
    1748:	62 0f       	add	r22, r18
    174a:	73 1f       	adc	r23, r19
    174c:	84 1f       	adc	r24, r20
    174e:	95 1f       	adc	r25, r21
    1750:	a0 1d       	adc	r26, r0
    1752:	08 95       	ret

00001754 <__prologue_saves__>:
    1754:	2f 92       	push	r2
    1756:	3f 92       	push	r3
    1758:	4f 92       	push	r4
    175a:	5f 92       	push	r5
    175c:	6f 92       	push	r6
    175e:	7f 92       	push	r7
    1760:	8f 92       	push	r8
    1762:	9f 92       	push	r9
    1764:	af 92       	push	r10
    1766:	bf 92       	push	r11
    1768:	cf 92       	push	r12
    176a:	df 92       	push	r13
    176c:	ef 92       	push	r14
    176e:	ff 92       	push	r15
    1770:	0f 93       	push	r16
    1772:	1f 93       	push	r17
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	ca 1b       	sub	r28, r26
    177e:	db 0b       	sbc	r29, r27
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	09 94       	ijmp

0000178c <__epilogue_restores__>:
    178c:	2a 88       	ldd	r2, Y+18	; 0x12
    178e:	39 88       	ldd	r3, Y+17	; 0x11
    1790:	48 88       	ldd	r4, Y+16	; 0x10
    1792:	5f 84       	ldd	r5, Y+15	; 0x0f
    1794:	6e 84       	ldd	r6, Y+14	; 0x0e
    1796:	7d 84       	ldd	r7, Y+13	; 0x0d
    1798:	8c 84       	ldd	r8, Y+12	; 0x0c
    179a:	9b 84       	ldd	r9, Y+11	; 0x0b
    179c:	aa 84       	ldd	r10, Y+10	; 0x0a
    179e:	b9 84       	ldd	r11, Y+9	; 0x09
    17a0:	c8 84       	ldd	r12, Y+8	; 0x08
    17a2:	df 80       	ldd	r13, Y+7	; 0x07
    17a4:	ee 80       	ldd	r14, Y+6	; 0x06
    17a6:	fd 80       	ldd	r15, Y+5	; 0x05
    17a8:	0c 81       	ldd	r16, Y+4	; 0x04
    17aa:	1b 81       	ldd	r17, Y+3	; 0x03
    17ac:	aa 81       	ldd	r26, Y+2	; 0x02
    17ae:	b9 81       	ldd	r27, Y+1	; 0x01
    17b0:	ce 0f       	add	r28, r30
    17b2:	d1 1d       	adc	r29, r1
    17b4:	0f b6       	in	r0, 0x3f	; 63
    17b6:	f8 94       	cli
    17b8:	de bf       	out	0x3e, r29	; 62
    17ba:	0f be       	out	0x3f, r0	; 63
    17bc:	cd bf       	out	0x3d, r28	; 61
    17be:	ed 01       	movw	r28, r26
    17c0:	08 95       	ret

000017c2 <_exit>:
    17c2:	f8 94       	cli

000017c4 <__stop_program>:
    17c4:	ff cf       	rjmp	.-2      	; 0x17c4 <__stop_program>
